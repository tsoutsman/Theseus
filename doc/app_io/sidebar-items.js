window.SIDEBAR_ITEMS = {"fn":[["cancel_stdin_instant_flush","Applications call this function to reset the flag which requests the parent shell to flush stdin immediately upon character input, but to wait for enter key strike."],["get_my_terminal","An application can call this function to get the terminal to which it should print."],["insert_child_streams","Shells call this function to store queue readers/writers and the pointer to terminal for applications. If there is any existing readers/writers for the task (which should not happen in normal practice), it returns the old one, otherwise returns None."],["is_requesting_instant_flush","Shell call this function to check whether a task is requesting instant stdin flush."],["lock_and_execute","Lock all shared states (i.e. those defined as `static`s) and execute the closure. This function is mainly provided for the shell to clean up the pointers stored in the map without causing a deadlock. In other words, by using this function, shell can prevent the application from holding the lock of these shared maps before killing it. Otherwise, the lock will never get a chance to be released. Since we currently don’t have stack unwinding."],["print_to_stdout_args","Converts the given `core::fmt::Arguments` to a `String` and enqueues the string into the correct terminal print-producer"],["remove_child_streams","Shells call this function to remove queues and pointer to terminal for applications. It returns the removed streams in the return value if the key matches, otherwise returns None."],["request_stdin_instant_flush","Applications call this function to set the flag which requests the parent shell to flush stdin immediately upon character input, rather than waiting for enter key strike."],["stderr","Applications call this function to acquire a writer to its stderr queue."],["stdin","Applications call this function to acquire a reader to its stdin queue."],["stdout","Applications call this function to acquire a writer to its stdout queue."],["take_key_event_queue","Applications call this function to take reader to the key event queue to directly access keyboard events."]],"macro":[["print","The main printing macro, which simply writes to the current task’s stdout stream."],["println","Calls `print!()` with an extra newline (‘\\n’) appended to the end. "]],"struct":[["IoControlFlags","Applications set the flags in this structure to inform the parent shell to perform IO accordingly."],["IoStreams","Stores the stdio queues, key event queue and the pointer to the terminal for applications. This structure is provided for application’s use and only contains necessary one-end readers/writers to queues. On the shell side, we have full control to queues."]]};