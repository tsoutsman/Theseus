window.SIDEBAR_ITEMS = {"enum":[["AnsiStyleCodes","The set of all possible ANSI escape codes for setting text style."],["CarriageReturnSendsLineFeed","Whether a Carriage Return subsequently issues a Line Feed (newline / new line)."],["Character","The character stored in each [`Unit`] of the terminal screen. "],["Color","The set of colors that can be displayed by a terminal emulator. "],["CursorStyle",""],["DisplayAction","A pending action to display content from the terminal’s scrollback buffer on the screen."],["InsertMode","Whether text characters printed to the terminal will be inserted before other characters or will replace/overwrite existing characters."],["LineFeedSendsCarriageReturn","Whether a Line Feed (newline / new line) subsequently issues a Carriage Return."],["ScrollAction","A pending action to scroll the screen up or down by a number of rows."],["ScrollPosition","The position (“viewport”) that the terminal is currently scrolled to. "],["ShowCursor","Whether the screen cursor is visible."],["Wrap","Whether or not to wrap cursor movement or text display to the previous/next line or row."]],"struct":[["AsciiControlCodes","The set of ASCII values that are non-printable characters  and require special handling by a terminal emulator. "],["BackgroundColor","A wrapper type around [`Color`] that is used in [`crate::AnsiStyleCodes`] to set the background color (behind displayed text)."],["Column","A column index or number of columns in the x-dimension of the screen viewport. "],["ForegroundColor","A wrapper type around [`Color`] that is used in [`crate::AnsiStyleCodes`] to set the foreground color (for displayed text)."],["FormatFlags","The flags that describe the formatting of a given text character."],["Line","An entire unbroken line of characters (`Unit`s) that has been written to a terminal."],["LineIndex","An index of a `Line` in the scrollback buffer."],["ModeSwitch","The set of “frequently-supported” commands to switch terminal modes."],["Row","A row index or number of rows in the y-dimension of the screen viewport. "],["ScreenPoint","A 2D position value that represents a point on the screen, in which `(0, 0)` represents the top-left corner. Thus, a valid `ScreenPoint` must fit be the bounds of  the current [`ScreenSize`]."],["ScreenSize","The size of a terminal screen, expressed as the number of columns (x dimension) by the number of rows (y dimension)."],["ScrollbackBuffer","The scrollback buffer is stored as a row-major vector of [`Line`]s."],["ScrollbackBufferPoint","A 2D position value that represents a point in the scrollback buffer, in which `(0, 0)` represents the `Unit` at the first column of the first line."],["StatusReportCommands",""],["Style","The style of text, including formatting and color choice,  for the character(s) displayed in a `Unit`."],["StyleDiff","A representation of the difference between two [`Style`]s."],["TerminalMode","The set of options that determine terminal behavior."],["TextTerminal","A text-based terminal that supports the ANSI, xterm, VT100, and other standards. "],["TtyBackend","A terminal backend that is simply a character device TTY endpoint  (a full terminal emulator) on the other side, which only allows writing a stream of bytes to it."],["UnderlinedColor","A wrapper type around [`Color`] that is used in [`crate::AnsiStyleCodes`] to set the color of the underline for underlined text."],["Unit","A `Unit` is a single character block displayed in the terminal."],["UnitIndex","An index of a `Unit` in a `Line` in the scrollback buffer."]],"trait":[["TerminalBackend",""]]};