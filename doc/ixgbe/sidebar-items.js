window.SIDEBAR_ITEMS = {"constant":[["INTEL_82599","Device ID for the 82599ES, used to identify the device from the PCI space"],["INTEL_VEND","Vendor ID for Intel"],["IXGBE_NUM_RX_QUEUES_ENABLED","The number of receive queues that are enabled.  Do NOT set this greater than 64 since the queues 65-128 don’t seem to work,  most likely because they need additional configuration."],["IXGBE_NUM_TX_QUEUES_ENABLED","The number of transmit queues that are enabled.  Do NOT set this greater than 64 since the queues 65-128 don’t seem to work,  most likely because they need additional configuration."]],"enum":[["FilterProtocol","Options for the filter protocol used in the 5-tuple filters."],["LinkSpeedMbps","Possible link speeds of the 82599 NIC"],["RxBufferSizeKiB","The set of receive buffer sizes that are accepted by the 82599 device."]],"fn":[["get_ixgbe_nic","Returns a reference to the IxgbeNic wrapped in a MutexIrqSafe, if it exists and has been initialized. Currently we use the pci location of the device as identification since it should not change after initialization."],["get_ixgbe_nics_list","Returns a reference to the list of all initialized ixgbe NICs"],["rx_poll_mq","A helper function to poll the nic receive queues (only for testing purposes)."],["tx_send_mq","A helper function to send a test packet on a nic transmit queue (only for testing purposes)."]],"mod":[["test_packets","A set of functions to create packets for testing the NIC transmission functionality."],["virtual_function","Interface for an application to request a `VirtualNIC` from the ixgbe device, and implementation of the `PhysicalNic` trait for the ixgbe device."]],"static":[["IXGBE_NICS","All the 82599 NICs found in the PCI space are initialized and then stored here."]],"struct":[["IxgbeNic","A struct representing an ixgbe network interface card."]]};