(function() {var implementors = {};
implementors["frame_allocator"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"frame_allocator/struct.AllocatedFrames.html\" title=\"struct frame_allocator::AllocatedFrames\">AllocatedFrames</a>&gt; for <a class=\"struct\" href=\"page_table_entry/struct.UnmappedFrames.html\" title=\"struct page_table_entry::UnmappedFrames\">UnmappedFrames</a>","synthetic":false,"types":["page_table_entry::UnmappedFrames"]}];
implementors["memory_structs"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"memory_structs/struct.VirtualAddress.html\" title=\"struct memory_structs::VirtualAddress\">VirtualAddress</a>","synthetic":false,"types":["memory_structs::VirtualAddress"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"memory_structs/struct.PhysicalAddress.html\" title=\"struct memory_structs::PhysicalAddress\">PhysicalAddress</a>","synthetic":false,"types":["memory_structs::PhysicalAddress"]}];
implementors["unwind"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;(<a class=\"struct\" href=\"unwind/struct.StackFrameIter.html\" title=\"struct unwind::StackFrameIter\">StackFrameIter</a>, <a class=\"enum\" href=\"task/enum.KillReason.html\" title=\"enum task::KillReason\">KillReason</a>, <a class=\"struct\" href=\"task/struct.TaskRef.html\" title=\"struct task::TaskRef\">TaskRef</a>)&gt; for <a class=\"struct\" href=\"unwind/struct.UnwindingContext.html\" title=\"struct unwind::UnwindingContext\">UnwindingContext</a>","synthetic":false,"types":["unwind::UnwindingContext"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()