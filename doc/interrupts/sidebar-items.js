window.SIDEBAR_ITEMS = {"constant":[["CPU_LOCAL_TIMER_IRQ","The IRQ number reserved for CPU-local timer interrupts, which Theseus currently uses for preemptive task switching."],["IRQ_BASE_OFFSET","The offset added to the first IRQ: `0x20`."]],"enum":[["EoiBehaviour",""]],"fn":[["deregister_interrupt","Deregisters an interrupt handler, making it available to the rest of the system again."],["eoi","Send an end of interrupt signal, notifying the interrupt chip that the given interrupt request `irq` has been serviced. "],["init","Initializes the interrupt subsystem and sets up an initial Interrupt Descriptor Table (IDT)."],["init_ap","Similar to `init()`, but for APs to call after the BSP has already invoked `init()`."],["is_exception_handler_with_error_code","Returns `true` if the given address is the exception handler in the current `IDT` for any exception in which the CPU pushes an error code onto the stack."],["register_interrupt","Registers an interrupt handler at the given IRQ interrupt number."],["register_msi_interrupt","Allocates and returns an unused interrupt number and sets its handler function."]],"macro":[["interrupt_handler","Macro which helps writing cross-platform interrupt handlers."]],"static":[["IDT","The single system-wide Interrupt Descriptor Table (IDT)."]],"struct":[["InterruptStackFrame","Wrapper type for the interrupt stack frame pushed by the CPU."]],"type":[["InterruptHandler","A handler function for an interrupt or an exception without error code."],["InterruptNumber",""]]};