window.SIDEBAR_ITEMS = {"enum":[["DeviceToHostResponse",""],["HostToControllerCommand","Command types which can be sent to the PS/2 Controller"],["HostToKeyboardCommand",""],["HostToKeyboardCommandOrData",""],["HostToMouseCommand",""],["HostToMouseCommandOrData",""],["KeyboardType",""],["MouseId","See [MousePacket] and its enum variants for further information."],["MousePacket",""],["MouseResolution",""],["PortTestResult",""],["SampleRate",""],["ScancodeSet",""]],"fn":[["flush_output_buffer","Clean the [PS2_DATA_PORT] output buffer, skipping the [ControllerToHostStatus] `output_buffer_full` check"],["keyboard_detect","detect the [KeyboardType]"],["keyboard_scancode_set","set the scancode set of the keyboard"],["mouse_id","get the [MouseId]"],["read_config","read the config of the PS/2 port"],["read_controller_test_result","must only be called after writing the [TestController] command otherwise would read bogus data"],["read_mouse_packet","read the correct [MousePacket] according to [MouseId]"],["read_port_test_result","must only be called after writing the [TestPort1] or [TestPort2] command otherwise would read bogus data"],["read_scancode","reads a Scancode (for now an untyped u8)"],["reset_keyboard","reset the keyboard"],["reset_mouse","reset the mouse"],["set_keyboard_led","set LED status of the keyboard"],["set_mouse_id","set the [MouseId] by magic sequence"],["status_register","Read the PS/2 status port/register"],["write_command","Write a command to the PS/2 command port/register"],["write_config","write the new config to the PS/2 command port (0x64)"]],"struct":[["ControllerConfigurationByte","Used for [HostToControllerCommand::ReadFromInternalRAMByte0] and [HostToControllerCommand::WriteToInternalRAMByte0]"],["ControllerToHostStatus",""],["LEDState",""],["MousePacket3",""],["MousePacket4",""],["MousePacketGeneric",""]]};