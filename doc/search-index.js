var searchIndex = JSON.parse('{\
"___Theseus_Crates___":{"doc":"Overview of Theseus","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"acpi":{"doc":"Code to parse the ACPI tables, based off of Redox. ","t":[5,5],"n":["get_acpi_tables","init"],"q":["acpi",""],"d":["Returns a reference to the singleton instance of all ACPI …","Parses the system’s ACPI tables "],"i":[0,0],"f":[[[],1],[2,[[4,[3]]]]],"p":[[6,"Mutex"],[3,"PageTable"],[15,"str"],[4,"Result"]]},\
"acpi_table":{"doc":"Definitions for the ACPI table","t":[6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11],"n":["AcpiSignature","AcpiTables","TableLocation","add_table_location","borrow","borrow","borrow_mut","borrow_mut","empty","fmt","from","from","into","into","map_new_table","mapping","offset","slice_offset_and_length","table","table_location","table_mut","table_slice","table_slice_mut","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["acpi_table","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["All ACPI tables are identified by a 4-byte signature, …","The struct holding all ACPI tables and records of where …","A record that tracks where an ACPI Table exists in memory, …","Add the location and size details of a discovered ACPI …","","","","","Returns a new empty <code>AcpiTables</code> object.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Map the ACPI table that exists at the given …","Returns an immutable reference to the underlying …","The offset of the statically-sized part of the table, …","The offset and length of the dynamically-sized part of the …","Returns a reference to the table that matches the …","Returns the location of the ACPI table based on the given …","Returns a mutable reference to the table that matches the …","Returns a reference to the dynamically-sized part at the …","Returns a mutable reference to the dynamically-sized part …","","","","","",""],"i":[0,0,0,1,1,7,1,7,1,7,1,7,1,7,1,1,7,7,1,1,1,1,1,1,7,1,7,1,7],"f":[0,0,0,[[1,2,3,4],[[6,[5]]]],[[]],[[]],[[]],[[]],[[],1],[[7,8],9],[[]],[[]],[[]],[[]],[[1,3,10],[[6,[5]]]],[1,11],0,0,[[1,2],[[6,[5]]]],[[1,2],[[4,[7]]]],[[1,2],[[6,[5]]]],[[1,2],[[6,[5]]]],[[1,2],[[6,[5]]]],[[],6],[[],6],[[],6],[[],6],[[],12],[[],12]],"p":[[3,"AcpiTables"],[6,"AcpiSignature"],[3,"PhysicalAddress"],[4,"Option"],[15,"str"],[4,"Result"],[3,"TableLocation"],[3,"Formatter"],[6,"Result"],[3,"PageTable"],[3,"MappedPages"],[3,"TypeId"]]},\
"acpi_table_handler":{"doc":"Handles ACPI tables based on signatures.","t":[5],"n":["acpi_table_handler"],"q":["acpi_table_handler"],"d":["The single arbiter of ACPI Table types,  which contains a …"],"i":[0],"f":[[[1,2,3,4],[[6,[5]]]]],"p":[[3,"AcpiTables"],[6,"AcpiSignature"],[15,"usize"],[3,"PhysicalAddress"],[15,"str"],[4,"Result"]]},\
"ap_start":{"doc":"Routines for booting up secondary CPU cores,  aka …","t":[7,5,5],"n":["AP_READY_FLAG","insert_ap_stack","kstart_ap"],"q":["ap_start","",""],"d":["An atomic flag used for synchronizing progress between the …","Insert a new stack that was allocated for the AP with the …","Entry to rust for an AP. The arguments must match the …"],"i":[0,0,0],"f":[0,[[1,2]],[[1,1,3,3,1,4],5]],"p":[[15,"u8"],[3,"Stack"],[3,"VirtualAddress"],[15,"u16"],[15,"never"]]},\
"apic":{"doc":"","t":[13,17,13,13,3,7,4,17,4,3,4,13,13,13,13,13,3,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,5,11,11,5,5,5,5,11,11,12,5,11,12,12,12,11,11,11,11,11,11,5,11,12,12,12,12,12,12,12,12,12,12,11,12,12,11,11,11,11,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["APIC","APIC_SPURIOUS_INTERRUPT_IRQ","All","AllButMe","ApicRegisters","INTERRUPT_CHIP","InterruptChip","LOCAL_APIC_LVT_IRQ","LapicIpiDestination","LocalApic","LvtLint","Me","One","PIC","Pin0","Pin1","RegisterArray","X2APIC","apic_id","arbitration_priority","as_icr_value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_error","clear_pmi_mask","clone","clone_into","cpu_count","destination_format","drop","enable_lvt_timer","eoi","eoi","eq","error","error_status","fmt","fmt","from","from","from","from","from","from","get_bsp_id","get_irr","get_isr","get_lapics","get_my_apic","get_my_apic_id","has_x2apic","icr","id","in_service_registers","init","init","interrupt_command_high","interrupt_command_low","interrupt_request_registers","into","into","into","into","into","into","is_bsp","is_bsp","lapic_id","lapic_version","logical_destination","lvt_cmci","lvt_error","lvt_lint0","lvt_lint1","lvt_perf_monitor","lvt_thermal","lvt_timer","processor","processor_priority","remote_read","send_ipi","send_nmi_ipi","set_icr","set_nmi","spurious_interrupt_vector","task_priority","timer_current_count","timer_divide","timer_initial_count","to_owned","trigger_mode_registers","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","version","0"],"q":["apic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","apic::LapicIpiDestination"],"d":["","The IRQ number reserved for spurious APIC interrupts (as …","Send IPI to all APICs, including myself","Send IPI to all APICs except for myself","A structure that offers access to APIC/xAPIC through its …","The interrupt chip that is currently configured on this …","","The IRQ number reserved for Local APIC timer interrupts in …","The possible destination shorthand values for IPI ICR.","This structure represents a single APIC in the system, …","The Local APIC’s vector table local interrupt pins.","Send IPI to my own (the current) APIC  ","Send IPI to a specific APIC ","","","","","","Returns the APIC ID of this lapic.","","Convert the enum to a bitmask value to be used in the …","","","","","","","","","","","","","Clears/resets this lapic’s error register.","Clears the interrupt mask bit in the apic performance …","","","Returns the number of CPUs (cores, or local APICs) that …","","","Enable (unmask) or disable (mask) the LVT timer interrupt …","Send an End Of Interrupt (EOI) signal to this local APIC, …","","","Returns the value of this lapic’s error register.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the values of the 8 request registers for this …","Returns the values of the 8 in-service registers for this …","Returns a reference to the list of LocalApics, one per CPU …","Returns a reference to the LocalApic for the currently …","Returns the APIC ID of the currently executing CPU core.","Returns true if the machine has support for x2apic","Reads the current value of this lapic’s Interrupt …","Reads the hardware-provided ID of this lapic (from its …","","Initially maps the base APIC MMIO register frames so that …","Creates and initializes a new <code>LocalApic</code> for the current …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the currently executing processor core is …","Returns <code>true</code> if this CPU core was the BootStrap Processor …","This Lapic’s ID. Some systems allow setting the ID, but …","","","","","","","","","","Returns the “processor ID” of this lapic, which is …","","","Send an IPI to the cores specified by the given destination","Send a NMI IPI to the cores specified by the given …","Writes <code>value</code> to this lapic’s Interrupt Control Register.","Set the NonMaskableInterrupt redirect for this LocalApic. …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the version of this lapic.",""],"i":[5,0,3,3,0,0,0,0,0,0,0,3,3,5,17,17,0,5,1,19,3,3,17,1,5,19,20,3,17,1,5,19,20,1,1,5,5,0,19,1,1,1,19,5,1,19,1,5,3,17,1,5,19,20,0,1,1,0,0,0,0,1,1,19,0,1,19,19,19,3,17,1,5,19,20,0,1,19,19,19,19,19,19,19,19,19,19,1,19,19,1,1,1,1,19,19,19,19,19,5,19,3,17,1,5,19,20,3,17,1,5,19,20,3,17,1,5,19,20,1,21],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1],[5,5],[[]],[[],2],0,[1],[[1,6]],[1],0,[[5,5],6],[1,7],0,[[1,8],9],[[5,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[10,[2]]]],[1],[1],[[],11],[[],[[10,[12]]]],[[],2],[[],6],[1,4],[1,2],0,[13,[[15,[14]]]],[[13,2,2,6,2,16],[[15,[14]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[1,6],0,0,0,0,0,0,0,0,0,0,[1,2],0,0,[[1,2,3]],[[1,3]],[[1,4]],[[1,17,16]],0,0,0,0,0,[[]],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[1,7],0],"p":[[3,"LocalApic"],[15,"u8"],[4,"LapicIpiDestination"],[15,"u64"],[4,"InterruptChip"],[15,"bool"],[15,"u32"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"AtomicMap"],[3,"RwLockIrqSafe"],[3,"PageTable"],[15,"str"],[4,"Result"],[15,"u16"],[4,"LvtLint"],[3,"TypeId"],[3,"ApicRegisters"],[3,"RegisterArray"],[13,"One"]],"a":{"cpus":[37],"lapic":[9],"lint":[10],"lint0":[10],"lint1":[10],"lvt":[10]}},\
"app_io":{"doc":"A simple library that handles stdio queues for …","t":[3,3,11,11,11,11,5,11,11,5,5,11,11,5,5,11,11,14,5,14,5,5,5,5,5,5,11,11,11,11,11,11],"n":["IoControlFlags","IoStreams","borrow","borrow","borrow_mut","borrow_mut","cancel_stdin_instant_flush","from","from","get_my_terminal","insert_child_streams","into","into","is_requesting_instant_flush","lock_and_execute","new","new","print","print_to_stdout_args","println","remove_child_streams","request_stdin_instant_flush","stderr","stdin","stdout","take_key_event_queue","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["app_io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Applications set the flags in this structure to inform the …","Stores the stdio queues, key event queue and the pointer …","","","","","Applications call this function to reset the flag which …","Returns the argument unchanged.","Returns the argument unchanged.","An application can call this function to get the terminal …","Shells call this function to store queue readers/writers …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Shell call this function to check whether a task is …","Lock all shared states (i.e. those defined as <code>static</code>s) and …","","Create a new <code>IoControlFlags</code> instance. <code>stdin_instant_flush</code> …","The main printing macro, which simply writes to the …","Converts the given <code>core::fmt::Arguments</code> to a <code>String</code> and …","Calls <code>print!()</code> with an extra newline (‘\\\\n’) appended …","Shells call this function to remove queues and pointer to …","Applications call this function to set the flag which …","Applications call this function to acquire a writer to its …","Applications call this function to acquire a reader to its …","Applications call this function to acquire a writer to its …","Applications call this function to take reader to the key …","","","","","",""],"i":[0,0,8,13,8,13,0,8,13,0,0,8,13,0,0,8,13,0,0,0,0,0,0,0,0,0,8,13,8,13,8,13],"f":[0,0,[[]],[[]],[[]],[[]],[[],[[2,[1]]]],[[]],[[]],[[],[[6,[[5,[[4,[3]]]]]]]],[[7,8],[[6,[8]]]],[[]],[[]],[7,[[2,[9,1]]]],[[]],[[10,11,11,[5,[[4,[[6,[12]]]]]],[5,[[4,[3]]]]],8],[[],13],0,[14],0,[7,[[6,[8]]]],[[],[[2,[1]]]],[[],[[2,[11,1]]]],[[],[[2,[10,1]]]],[[],[[2,[11,1]]]],[[],[[2,[15,1]]]],[[],2],[[],2],[[],2],[[],2],[[],16],[[],16]],"p":[[15,"str"],[4,"Result"],[3,"Terminal"],[6,"Mutex"],[3,"Arc"],[4,"Option"],[15,"usize"],[3,"IoStreams"],[15,"bool"],[3,"StdioReader"],[3,"StdioWriter"],[3,"KeyEventQueueReader"],[3,"IoControlFlags"],[3,"Arguments"],[3,"KeyEventReadGuard"],[3,"TypeId"]]},\
"async_channel":{"doc":"An asynchronous channel for Inter-Task Communication (ITC) …","t":[13,13,4,13,4,13,3,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["ChannelDisconnected","ChannelEmpty","ChannelError","ChannelFull","ChannelStatus","Connected","Receiver","ReceiverDisconnected","Sender","SenderDisconnected","WaitError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","drop","drop","eq","eq","fmt","fmt","from","from","from","from","into","into","into","into","is_disconnected","is_disconnected","ne","new_channel","receive","send","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_receive","try_send","type_id","type_id","type_id","type_id","0"],"q":["async_channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","async_channel::ChannelError"],"d":["Occurs when one end of channel is dropped","Occurs when <code>try_receive</code> is performed on an empty channel","Error type for tracking different type of errors sender …","Occurs when <code>try_send</code> is performed on a full channel","Indicates whether channel is Connected or Disconnected","Channel is working. Initially channel is created with …","The receiver side of a channel.","Set to Disconnected when Receiver end is dropped.","The sender (transmit) side of a channel.","Set to Disconnected when Sender end is dropped.","Occurs when an error occur in <code>WaitQueue</code>","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the channel is disconnected.","Returns true if the channel is disconnected.","","Create a new channel that allows senders and receivers to  …","Receive a message, blocking until a message is available …","Send a message, blocking until space in the channel’s …","","","","","","","","","","","","Tries to receive a message, only succeeding if a message …","Tries to send the message, only succeeding if buffer space …","","","","",""],"i":[7,7,0,7,0,1,0,1,0,1,7,1,7,4,5,1,7,4,5,1,4,5,1,4,5,4,5,1,7,1,7,1,7,4,5,1,7,4,5,4,5,7,0,5,4,1,4,5,1,7,4,5,1,7,4,5,5,4,1,7,4,5,13],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[[4,[[0,[2,3]]]]],[[4,[[0,[2,3]]]]]],[[[5,[[0,[2,3]]]]],[[5,[[0,[2,3]]]]]],[[]],[[]],[[]],[[[4,[3]]]],[[[5,[3]]]],[[1,1],6],[[7,7],6],[[1,8],9],[[7,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[3]]],6],[[[5,[3]]],6],[[7,7],6],[10],[[[5,[3]]],[[11,[3,7]]]],[[[4,[3]],3],[[11,[7]]]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[5,[3]]],[[11,[3,7]]]],[[[4,[3]],3],11],[[],12],[[],12],[[],12],[[],12],0],"p":[[4,"ChannelStatus"],[8,"Clone"],[8,"Send"],[3,"Sender"],[3,"Receiver"],[15,"bool"],[4,"ChannelError"],[3,"Formatter"],[6,"Result"],[15,"usize"],[4,"Result"],[3,"TypeId"],[13,"WaitError"]]},\
"ata":{"doc":"Basic driver for accessing ATA drives (IDE) as a storage …","t":[18,4,3,6,3,3,3,3,3,3,18,18,18,18,18,18,18,18,18,18,18,3,3,18,18,13,13,13,13,18,18,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,11,11,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,12,12,11,11,12,12,12],"n":["ADDRESS_MARK_NOT_FOUND","AtaDeviceType","AtaDrive","AtaDriveRef","AtaError","AtaFirmwareVersion","AtaIdentifyData","AtaModelNumber","AtaSerialNumber","AtaStatus","BAD_BLOCK","BUSY","COMMAND_ABORTED","CORRECTED_DATA","DATA_REQUEST_READY","DRIVE_READY","DRIVE_SEEK_COMPLETE","DRIVE_WRITE_FAULT","ERROR","ID_MARK_NOT_FOUND","INDEX","IdeController","IdeControllerIter","MEDIA_CHANGED","MEDIA_CHANGE_REQUEST","Pata","PataPi","Sata","SataPi","TRACK_0_NOT_FOUND","UNCORRECTABLE_DATA","additional_product_id","additional_supported","advanced_pio_modes","all","all","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","block_alignment","block_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","cfa_power_mode1","checksum","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","command_set_active","command_set_active_ext","command_set_support","command_set_support_ext","complement","complement","contains","contains","current_acoustic_value","current_apm_level","current_media_serial_number","current_multi_sector_setting","current_sector_capacity","current_sectors_per_track","data_set_management_feature","default","default","default","default","devices","difference","difference","dsm_cap","empty","empty","enhanced_security_erase_unit","eq","eq","ext_command_supported","extend","extend","extended_num_of_user_addressable_sectors","firmware_version","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free_fall_control_sensitivity","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","general_configuration","get_hash","get_hash","hardware_reset_result","hash","hash","insert","insert","inter_seek_delay","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_iter","is_all","is_all","is_empty","is_empty","is_master","iter","len","major_revision","master_password_id","max_48_bit_lba","max_blocks_per_download_microcode","max_blocks_per_transfer","min_blocks_per_download_microcode","minimum_mw_transfer_cycle_time","minimum_pio_cycle_time","minimum_pio_cycle_time_io_ready","minor_revision","model_number","msn_support","multiword_dma_active","multiword_dma_support","ne","ne","new","next","nominal_form_factor","nominal_media_rotation_rate","normal_security_erase_unit","not","not","num_current_cylinders","num_current_heads","num_cylinders","num_heads","num_sectors_per_track","nv_cache_capabilities","nv_cache_size_lsw","nv_cache_size_msw","nv_cache_time_to_spin_up_in_seconds","partial_cmp","partial_cmp","physical_logical_sector_size","primary_master","primary_slave","queue_depth","read_blocks","read_pio","recommended_acoustic_value","recommended_mw_transfer_cycle_time","remove","remove","reserved_for_expanded_support_and_active","reserved_for_tlc_technical_report","reserved_for_world_wide_name_128","sct_command_transport","secondary_master","secondary_slave","security_status","serial_ata_capabilities","serial_ata_features_enabled","serial_ata_features_supported","serial_number","set","set","signature","size_in_blocks","specific_configuration","stream_min_request_size","streaming_access_latency_dma_pio","streaming_perf_granularity","streaming_transfer_time","streaming_transfer_time_dma","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","toggle","toggle","translation_fields_valid","transport_major_version","transport_minor_version","trusted_computing","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ultra_dma_active","ultra_dma_support","union","union","user_addressable_sectors","vendor_unique1","vendor_unique2","words_per_logical_sector","world_wide_name","write_blocks","write_pio","write_read_verify_sector_count_mode","write_read_verify_sector_count_mode_2_only","write_read_verify_sector_count_mode_3_only"],"q":["atad":["","The possible types of drive devices that can be attached …","A single ATA drive, either a master or a slave,  which …","","The possible error values found in an ATA drive’s error …","An ATA drive’s firmware version is an 8-byte string.","Information that describes an ATA drive,  obtained from …","An ATA drive’s model number is a 40-byte string.","An ATA drive’s serial number is a 20-byte string.","The possible status values found in an ATA drive’s …","","When set, the drive’s port values are still changing, so …","","","When <strong>cleared</strong>, the drive is ready for data to be …","When set, the drive is on. When cleared, the drive is …","","","","","","A single IDE controller has two buses with up to two …","Provides an iterator over all <code>AtaDrive</code>s in an <code>IdeController</code>…","","","A parallel ATA (PATA) drive, like a hard drive. This is …","A parallel ATA (PATA) drive that uses the packet interface,","A serial ATA (SATA) drive that is operating in legacy IDE …","A serial ATA (SATA) drive that that is operating in legacy …","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","","","","","","","","","","","","","","","","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Returns an empty set of flags.","","","","MultiSectorSettingValid : 1; ReservedByte59 : 3; …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if this drive is the master, or <code>false</code> if it …","Returns an <code>Iterator</code> over all of the <code>AtaDrive</code>s  that exist …","","","","Number of sectors in the drive, if using 48-bit LBA.  This …","","Maximum number of blocks per transfer. Sometimes referred …","","","","","","","","","","","","Creates a new instance of an IDE controller based on the …","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","<code>[0:3]</code> Physical sector size (in logical sectors)","","","only the first 5 bits are used, others are reserved","","Reads data from this drive starting at the given …","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","A bitmask of translation fields valid and free fall …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Number of sectors in the drive, if using 28-bit LBA.  This …","","","","","","Writes data from the provided <code>buffer</code> to this drive, …","","",""],"i":[1,0,0,0,0,0,0,0,0,0,1,2,1,2,2,2,2,2,2,1,2,0,0,1,1,31,31,31,31,1,1,8,8,8,1,2,31,1,2,5,14,7,8,9,10,11,31,1,2,5,14,7,8,9,10,11,1,2,1,2,1,2,1,2,1,2,1,2,1,2,8,5,31,1,2,5,14,7,8,9,10,11,31,1,2,5,14,7,8,9,10,11,8,8,8,1,2,7,8,9,10,11,1,2,7,8,9,10,11,1,2,8,8,8,8,1,2,1,2,8,8,8,8,8,8,8,8,9,10,11,14,1,2,8,1,2,8,1,2,8,1,2,8,8,5,1,1,1,1,1,2,2,2,2,2,5,14,8,9,9,10,10,11,11,8,31,1,2,5,14,7,8,9,10,11,1,2,1,2,1,2,1,2,8,1,2,8,1,2,1,2,8,1,2,1,2,31,1,2,5,14,7,8,9,10,11,31,1,2,5,14,7,8,9,10,11,31,1,2,5,14,7,8,9,10,11,31,1,2,5,14,7,8,9,10,11,7,1,2,1,2,5,14,5,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,2,14,7,8,8,8,1,2,8,8,8,8,8,8,8,8,8,1,2,8,14,14,8,5,5,8,8,1,2,8,8,8,8,14,14,8,8,8,8,8,1,2,8,5,8,8,8,8,8,8,1,2,1,2,1,2,1,2,7,8,9,10,11,9,10,11,1,2,8,8,8,8,31,1,2,5,14,7,8,9,10,11,31,1,2,5,14,7,8,9,10,11,31,1,2,5,14,7,8,9,10,11,8,8,1,2,8,8,8,8,8,5,5,8,8,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],2],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[1,4],[2,4],[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],0,[5,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[1,1],[2,2],[7,7],[8,8],[9,9],[10,10],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],12],[[2,2],12],0,0,0,0,[1,1],[2,2],[[1,1],13],[[2,2],13],0,0,0,0,0,0,0,[[],8],[[],9],[[],10],[[],11],[14,[[16,[15]]]],[[1,1],1],[[2,2],2],0,[[],1],[[],2],0,[[1,1],13],[[2,2],13],0,[[1,17]],[[2,17]],0,0,[5,[[19,[18]]]],[[1,20],21],[[1,20],21],[[1,20],21],[[1,20],21],[[1,20],21],[[2,20],21],[[2,20],21],[[2,20],21],[[2,20],21],[[2,20],21],[[5,20],21],[[14,20],21],[[8,20],21],[[9,20],21],[[9,20],21],[[10,20],21],[[10,20],21],[[11,20],21],[[11,20],21],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,[[22,[1]]]],[4,[[22,[2]]]],[4,1],[4,2],[4,1],[4,2],[17,1],[17,2],0,[[],23],[[],23],0,[1],[2],[[1,1]],[[2,2]],0,[[1,1],1],[[2,2],2],[[1,1],13],[[2,2],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[16,[24]]],[[16,[3,24]]]],[[[16,[24]]],[[16,[3,24]]]],[[[16,[24]]],[[16,[3,24]]]],[[[16,[24]]],[[16,[3,24]]]],[[[16,[24]]],[[16,[3,24]]]],[[[16,[24]]],[[16,[3,24]]]],[[[16,[24]]],[[16,[3,24]]]],[[[16,[24]]],[[16,[3,24]]]],[[[16,[24]]],[[16,[3,24]]]],[[[16,[24]]],[[16,[3,24]]]],[25,[[25,[3]]]],[25,[[25,[3]]]],[25,[[25,[3]]]],[25,[[25,[3]]]],[25,[[25,[3]]]],[25,[[25,[3]]]],[25,[[25,[3]]]],[25,[[25,[3]]]],[25,[[25,[3]]]],[25,[[25,[3]]]],[26,[[26,[3]]]],[26,[[26,[3]]]],[26,[[26,[3]]]],[26,[[26,[3]]]],[26,[[26,[3]]]],[26,[[26,[3]]]],[26,[[26,[3]]]],[26,[[26,[3]]]],[26,[[26,[3]]]],[26,[[26,[3]]]],[[]],[1,13],[2,13],[1,13],[2,13],[5,13],[14,7],[5,6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],13],[[2,2],13],[27,[[19,[14,28]]]],[7,22],0,0,0,[1,1],[2,2],0,0,0,0,0,0,0,0,0,[[1,1],[[22,[12]]]],[[2,2],[[22,[12]]]],0,0,0,0,[[5,6],[[19,[6,18]]]],[[5,6],[[19,[6,28]]]],0,0,[[1,1]],[[2,2]],0,0,0,0,0,0,0,0,0,0,0,[[1,1,13]],[[2,2,13]],0,[5,6],0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[[1,1],1],[[2,2],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[1,1]],[[2,2]],0,0,0,0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,0,[[1,1],1],[[2,2],2],0,0,0,0,0,[[5,6],[[19,[6,18]]]],[[5,6],[[19,[6,28]]]],0,0,0],"p":[[3,"AtaError"],[3,"AtaStatus"],[8,"Any"],[15,"u8"],[3,"AtaDrive"],[15,"usize"],[3,"IdeControllerIter"],[3,"AtaIdentifyData"],[3,"AtaSerialNumber"],[3,"AtaModelNumber"],[3,"AtaFirmwareVersion"],[4,"Ordering"],[15,"bool"],[3,"IdeController"],[8,"Iterator"],[3,"Box"],[8,"IntoIterator"],[4,"IoError"],[4,"Result"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"u64"],[3,"Global"],[3,"Arc"],[3,"Rc"],[3,"PciDevice"],[15,"str"],[3,"String"],[3,"TypeId"],[4,"AtaDeviceType"]]},\
"atomic_linked_list":{"doc":"","t":[0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["atomic_linked_list","atomic_map","AtomicLinkedList","AtomicLinkedListIter","AtomicLinkedListIterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fmt","from","from","from","into","into","into","into_iter","into_iter","iter","iter_mut","new","next","next","push_front","push_front_timeout","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AtomicMap","AtomicMapIter","AtomicMapIterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","fmt","from","from","from","get","get_mut","insert","insert_timeout","into","into","into","into_iter","into_iter","iter","new","next","next","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["atomic_linked_list","","atomic_linked_list::atomic_linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","atomic_linked_list::atomic_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A basic atomic linked list.  A generic, singly-linked list …","A basic map structure which is backed by an atomic linked …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","returns a forward iterator through this linked list. ","returns a forward iterator through this linked list, …","Create a new empty AtomicLinkedList.","","","add a new element to the front of the list.","add a new element to the front of the list, but will abort …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value matching the given key, …","Returns a mutable reference to the value matching the …","Adds a new key-value pair to the map.  If the given key is …","Adds a new key-value pair to the map.  If the given key is …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns a forward iterator through this map. ","Create a new empty AtomicMap.","","","","","","","","","","",""],"i":[0,0,0,0,0,5,6,2,5,6,2,2,5,6,2,5,6,2,5,6,2,2,2,5,6,2,2,5,6,2,5,6,2,5,6,2,0,0,0,12,14,11,12,14,11,11,11,12,14,11,11,11,11,11,12,14,11,12,14,11,11,12,14,12,14,11,12,14,11,12,14,11],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,5],[2,6],[[],2],[5,7],[6,7],[2,8],[[2,9],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],[[],10],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[11],[[[11,[1,1]],3],4],[[]],[[]],[[]],[11,7],[11,7],[11,7],[[11,9],[[8,[7]]]],[[]],[[]],[[]],[[]],[[]],[11,12],[[],11],[[[12,[13]]],7],[[[14,[13]]],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],[[],10]],"p":[[8,"Debug"],[3,"AtomicLinkedList"],[3,"Formatter"],[6,"Result"],[3,"AtomicLinkedListIter"],[3,"AtomicLinkedListIterMut"],[4,"Option"],[4,"Result"],[15,"u64"],[3,"TypeId"],[3,"AtomicMap"],[3,"AtomicMapIter"],[8,"PartialEq"],[3,"AtomicMapIterMut"]]},\
"block_allocator":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11],"n":["FixedSizeBlockAllocator","allocate","borrow","borrow_mut","deallocate","from","init","into","new","try_from","try_into","type_id"],"q":["block_allocator","","","","","","","","","","",""],"d":["","Allocates a chunk of the given size with the given …","","","Frees the given allocation. <code>ptr</code> must be a pointer returned …","Returns the argument unchanged.","Initialize the allocator with the given heap bounds.","Calls <code>U::from(self)</code>.","Creates an empty FixedSizeBlockAllocator.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2],3],[[]],[[]],[[1,3,2]],[[]],[[1,4,4]],[[]],[[],1],[[],5],[[],5],[[],6]],"p":[[3,"FixedSizeBlockAllocator"],[3,"Layout"],[15,"u8"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"block_cache":{"doc":"A caching layer for block based storage devices.","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BlockCache","as_any","as_any_mut","borrow","borrow_mut","flush","from","into","into_any","into_any_arc","into_any_rc","new","read_block","try_from","try_into","type_id","write_block"],"q":["block_cache","","","","","","","","","","","","","","","",""],"d":["A cache to store read and written blocks from a storage …","","","","","Flushes the given block to the backing storage device.  If …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Creates a new <code>BlockCache</code> device ","An internal function that first checks the cache for a …","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[],1],[[],1],[[]],[[]],[[2,[4,[3]]],[[6,[5]]]],[[]],[[]],[[[8,[7]]],[[8,[1,7]]]],[9,[[9,[1]]]],[10,[[10,[1]]]],[11,2],[[2,3],[[6,[5]]]],[[],6],[[],6],[[],12],[[2,3,13],[[6,[5]]]]],"p":[[8,"Any"],[3,"BlockCache"],[15,"usize"],[4,"Option"],[15,"str"],[4,"Result"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[6,"StorageDeviceRef"],[3,"TypeId"],[4,"Cow"]]},\
"bootloader_modules":{"doc":"An abstraction for bootloader-provided “modules”.","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BootloaderModule","borrow","borrow_mut","end_address","fmt","from","into","name","new","size_in_bytes","start_address","try_from","try_into","type_id"],"q":["bootloader_modules","","","","","","","","","","","","",""],"d":["A record of a bootloader module’s name and location in …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,2],[[1,3],4],[[]],[[]],[1,5],[[2,2,5],1],[1,6],[1,2],[[],7],[[],7],[[],8]],"p":[[3,"BootloaderModule"],[3,"PhysicalAddress"],[3,"Formatter"],[6,"Result"],[3,"String"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"captain":{"doc":"The main initialization routine and setup logic of the OS. ","t":[5],"n":["init"],"q":["captain"],"d":["Initialize the Captain, which is the main module that …"],"i":[0],"f":[[[1,[3,[2]],4,5,5],[[7,[6]]]]],"p":[[6,"MmiRef"],[3,"MappedPages"],[3,"Vec"],[3,"Stack"],[3,"VirtualAddress"],[15,"str"],[4,"Result"]]},\
"catch_unwind":{"doc":"Support for catching a panic while a panicked <code>Task</code> is …","t":[5,5],"n":["catch_unwind_with_arg","resume_unwind"],"q":["catch_unwind",""],"d":["Invokes the given closure <code>f</code>, catching a panic as it is …","Resumes the unwinding procedure after it was caught with …"],"i":[0,0],"f":[[[],[[2,[1]]]],[1,3]],"p":[[4,"KillReason"],[4,"Result"],[15,"never"]]},\
"color":{"doc":"A simple representation of the standard RGB color model.","t":[17,17,17,17,3,17,17,17,17,17,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BLACK","BLUE","BROWN","CYAN","Color","DARK_GRAY","GRAY","GREEN","LIGHT_BLUE","LIGHT_CYAN","LIGHT_GRAY","LIGHT_GREEN","MAGENTA","PINK","RED","TRANSPARENT","WHITE","YELLOW","blue","borrow","borrow_mut","clone","eq","fmt","from","green","into","new","red","set_transparency","transparency","try_from","try_into","type_id"],"q":["color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","This structure represents a color value in the standard …","","","","","","","","","","","","","","Returns the blue component of this <code>Color</code> as a <code>u8</code> value.","","","","","","Returns the argument unchanged.","Returns the green component of this <code>Color</code> as a <code>u8</code> value.","Calls <code>U::from(self)</code>.","Creates a new <code>Color</code> structure from a 4 bytes ARGB …","Returns the red component of this <code>Color</code> as a <code>u8</code> value.","Sets the transparency of the color, in which <code>0</code> is opaque …","Returns the transparency component of this <code>Color</code> as a <code>u8</code> …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[1,1],[[1,1],3],[[1,4],5],[[]],[1,2],[[]],[6,1],[1,2],[[1,2]],[1,2],[[],7],[[],7],[[],8]],"p":[[3,"Color"],[15,"u8"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"compositor":{"doc":"This crate defines a trait of <code>Compositor</code>  . A compositor …","t":[8,8,3,10,11,11,10,12,11,11,10,10,12,11,11,11],"n":["CompositableRegion","Compositor","FramebufferUpdates","blend_buffers","borrow","borrow_mut","composite","coordinate_in_dest_framebuffer","from","into","row_range","size","src_framebuffer","try_from","try_into","type_id"],"q":["compositor","","","","","","","","","","","","","","",""],"d":["A <code>CompositableRegion</code> is an abstract region (i.e., a …","A compositor composites (combines or blends) a series of …","A source framebuffer to be composited, along with its …","Blends the pixels in the source framebuffer <code>src_fb</code> within …","","","Composites the framebuffers in the list of source …","The coordinate in the destination framebuffer where the …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the range of rows covered by this region,  given …","Returns the number of pixels in the region.","The source framebuffer to be composited.","","",""],"i":[0,0,0,11,12,12,13,12,12,12,11,11,12,12,12,12],"f":[0,0,0,[[1,1,2,[4,[3]]],[[6,[5]]]],[[]],[[]],[[7,1,[0,[7,8]]],[[6,[5]]]],0,[[]],[[]],[[],[[4,[9]]]],[[],3],0,[[],6],[[],6],[[],10]],"p":[[3,"Framebuffer"],[3,"Coord"],[15,"usize"],[3,"Range"],[15,"str"],[4,"Result"],[8,"IntoIterator"],[8,"Clone"],[15,"isize"],[3,"TypeId"],[8,"CompositableRegion"],[3,"FramebufferUpdates"],[8,"Compositor"]]},\
"console":{"doc":"Creation and management of virtual consoles or terminals …","t":[3,11,11,11,5,11,5,5,11,11,11],"n":["Console","borrow","borrow_mut","from","ignore_serial_port_input","into","new_serial_console","start_connection_detection","try_from","try_into","type_id"],"q":["console","","","","","","","","","",""],"d":["","","","Returns the argument unchanged.","Configures the console connection listener to ignore …","Calls <code>U::from(self)</code>.","Creates a new console and a new <code>TextTerminal</code> that reads …","Starts a new task that detects new console connections by …","","",""],"i":[0,3,3,3,0,3,0,0,3,3,3],"f":[0,[[]],[[]],[[]],[1],[[]],[[],[[3,[2]]]],[[],[[6,[4,5]]]],[[],6],[[],6],[[],7]],"p":[[15,"u16"],[3,"TtyBackend"],[3,"Console"],[3,"JoinableTaskRef"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"context_switch":{"doc":"This is a wrapper crate around all other context switch …","t":[3,11,11,5,11,11,11,11,11,11],"n":["Context","borrow","borrow_mut","context_switch","from","into","new","try_from","try_into","type_id"],"q":["context_switch","","","","","","","","",""],"d":["The registers saved before a context switch and restored …","","","Switches context from an SSE Task to another SSE Task.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new ContextSSE struct that will cause the …","","",""],"i":[0,2,2,0,2,2,2,2,2,2],"f":[0,[[]],[[]],[[1,1]],[[]],[[]],[1,2],[[],3],[[],3],[[],4]],"p":[[15,"usize"],[3,"Context"],[4,"Result"],[3,"TypeId"]]},\
"context_switch_avx":{"doc":"This crate contains structures and routines for context …","t":[3,11,11,5,11,11,11,14,14,11,11,11],"n":["ContextAVX","borrow","borrow_mut","context_switch_avx","from","into","new","restore_registers_avx","save_registers_avx","try_from","try_into","type_id"],"q":["context_switch_avx","","","","","","","","","","",""],"d":["The registers saved before a context switch and restored …","","","Switches context from an AVX Task to another AVX Task.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new ContextAVX struct that will cause the …","An assembly block for restoring AVX registers by popping …","An assembly block for saving AVX registers by pushing them …","","",""],"i":[0,2,2,0,2,2,2,0,0,2,2,2],"f":[0,[[]],[[]],[[1,1]],[[]],[[]],[1,2],0,0,[[],3],[[],3],[[],4]],"p":[[15,"usize"],[3,"ContextAVX"],[4,"Result"],[3,"TypeId"]]},\
"context_switch_regular":{"doc":"This crate contains structures and routines for context …","t":[3,11,11,5,11,11,11,14,14,14,11,11,11],"n":["ContextRegular","borrow","borrow_mut","context_switch_regular","from","into","new","restore_registers_regular","save_registers_regular","switch_stacks","try_from","try_into","type_id"],"q":["context_switch_regular","","","","","","","","","","","",""],"d":["The registers saved before a context switch and restored …","","","Switches context from a regular Task to another regular …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new <code>ContextRegular</code> struct that will cause the …","An assembly block for restoring regular x86_64 registers …","An assembly block for saving regular x86_64 registers by …","An assembly block for switching stacks, which is the …","","",""],"i":[0,2,2,0,2,2,2,0,0,0,2,2,2],"f":[0,[[]],[[]],[[1,1]],[[]],[[]],[1,2],0,0,0,[[],3],[[],3],[[],4]],"p":[[15,"usize"],[3,"ContextRegular"],[4,"Result"],[3,"TypeId"]]},\
"context_switch_sse":{"doc":"This crate contains structures and routines for context …","t":[3,11,11,5,11,11,11,14,14,11,11,11],"n":["ContextSSE","borrow","borrow_mut","context_switch_sse","from","into","new","restore_registers_sse","save_registers_sse","try_from","try_into","type_id"],"q":["context_switch_sse","","","","","","","","","","",""],"d":["The registers saved before a context switch and restored …","","","Switches context from an SSE Task to another SSE Task.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new ContextSSE struct that will cause the …","An assembly block for restoring SSE registers by popping …","An assembly block for saving SSE registers by pushing them …","","",""],"i":[0,2,2,0,2,2,2,0,0,2,2,2],"f":[0,[[]],[[]],[[1,1]],[[]],[[]],[1,2],0,0,[[],3],[[],3],[[],4]],"p":[[15,"usize"],[3,"ContextSSE"],[4,"Result"],[3,"TypeId"]]},\
"cow_arc":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CowArc","CowWeak","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_shallow","downgrade","fmt","fmt","from","from","into","into","is_shared","lock_as_mut","lock_as_ref","new","ptr_eq","to_owned","to_owned","try_from","try_from","try_into","try_into","try_lock_as_ref","type_id","type_id","upgrade"],"q":["cow_arc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A special form of an <code>Arc</code> reference that uses two nested <code>Arc</code>…","A weak reference to a <code>CowArc</code>, just like a <code>Weak</code> is to an <code>Arc</code>…","","","","","Creates a shared reference to <code>this</code> <code>CowArc</code>  and returns …","","","","Creates a shallow clone of this <code>CowArc</code> that <strong>does not</strong> …","Downgrades this <code>CowArc</code> into a <code>CowWeak</code> weak reference.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this <code>CowArc</code> is in the <code>Shared</code> state,  and …","This acquires the lock on the inner <code>Mutex</code> wrapping the …","This acquires the lock on the inner <code>Mutex</code> wrapping the …","Crates a new <code>CowArc</code> that wraps the given data.  The new …","Returns true if the two <code>CowArc</code>s point to the same value …","","","","","","","This attempts to acquire the lock on the inner <code>Mutex</code> …","","","Just like <code>Weak::upgrade()</code>, attempts to upgrade this <code>CowWeak</code>"],"i":[0,0,1,2,1,2,1,2,1,2,1,1,1,2,1,2,1,2,1,1,1,1,1,1,2,1,2,1,2,1,1,2,2],"f":[0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[1,1],[1,2],[[[1,[3]],4],5],[[[2,[3]],4],5],[[]],[[]],[[]],[[]],[1,6],[1,[[8,[7]]]],[1,9],[[],1],[[1,1],6],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[1,[[8,[9]]]],[[],11],[[],11],[2,[[8,[1]]]]],"p":[[3,"CowArc"],[3,"CowWeak"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[6,"MutexGuardRefMut"],[4,"Option"],[6,"MutexGuardRef"],[4,"Result"],[3,"TypeId"]]},\
"crate_metadata":{"doc":"Defines types that contain metadata about crates loaded in …","t":[13,17,13,17,4,17,17,13,17,13,13,17,13,13,3,3,3,17,17,17,3,13,17,4,6,3,6,3,6,17,17,17,17,13,13,13,13,6,3,6,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,12,12,12,11,12,12,12,12,12,12,5,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5],"n":["Application","BSS_SECTION_NAME","Bss","CRATE_HASH_DELIMITER","CrateType","DATA_BSS_SECTION_FLAGS","DATA_SECTION_NAME","Data","EH_FRAME_SECTION_NAME","EhFrame","Executable","GCC_EXCEPT_TABLE_SECTION_NAME","GccExceptTable","Kernel","LoadedCrate","LoadedSection","LoadedSectionInner","MODULE_PREFIX_DELIMITER","RODATA_SECTION_FLAGS","RODATA_SECTION_NAME","RelocationEntry","Rodata","SECTION_HASH_DELIMITER","SectionType","Shndx","StrRef","StrongCrateRef","StrongDependency","StrongSectionRef","TEXT_SECTION_FLAGS","TEXT_SECTION_NAME","TLS_BSS_SECTION_NAME","TLS_DATA_SECTION_NAME","Text","TlsBss","TlsData","Userspace","WeakCrateRef","WeakDependent","WeakSectionRef","addend","address_range","as_func","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","copy_section_data_to","crate_name","crate_name_as_prefix","crate_name_without_hash","crates_dependent_on_me","crates_i_depend_on","data_pages","data_sections","data_sections_iter","debug_symbols_file","default","default_namespace_name","deref","deserialize","drop","eq","eq","eq","eq","find_section","find_weak_dependent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_elf_relocation","from_module_name","get_function_section","get_hash","get_type","global","global_sections","global_sections_iter","hash","inner","into","into","into","into","into","into","into","into","into","is_absolute","is_data_or_bss","mapped_pages","mapped_pages_offset","name","name","name_without_hash","ne","ne","new","object_file","offset","parent_crate","partial_cmp","reexported_symbols","relocation","relocation","rodata_pages","section","section","section_name_str_ref","section_name_without_hash","sections","sections_dependent_on_me","sections_i_depend_on","serialize","size","start_address","text_pages","tls_sections","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_dependencies","write_relocation"],"q":["crate_metadatad":["","","A <code>bss</code> section is just like a data section, but is …","A crate’s name and its hash are separated by “-”, …","The type of a crate, based on its object file naming …","<code>.data</code> and <code>.bss</code> sections are read-write and non-executable.","","A <code>data</code> section contains data that is both readable and …","","The <code>.eh_frame</code> section contains information about stack …","","","A <code>.gcc_except_table</code> section contains landing pads for …","","Represents a single crate whose object file has been  …","Represents a section that has been loaded and is part of a …","The parts of a <code>LoadedSection</code> that may be mutable, i.e.,  …","The Theseus Makefile appends prefixes onto bootloader …","<code>.rodata</code> sections are read-only and non-executable.","","The information necessary to calculate and write a …","An <code>rodata</code> section contains read-only data, i.e., constants.","A section’s demangled name and its hash are separated by …","The possible types of sections that can be loaded from a …","A Section Header iNDeX (SHNDX), as specified by the ELF …","A wrapper around an <code>Arc&lt;str&gt;</code>: an immutable shared …","A Strong reference to a <code>LoadedCrate</code>.","A representation that the owner <code>A</code> of (a <code>LoadedSection</code> …","A Strong reference (<code>Arc</code>) to a <code>LoadedSection</code>.","<code>.text</code> sections are read-only and executable.","","","","A <code>text</code> section contains executable code, i.e., functions. ","A <code>.tbss</code> section is a read-only section that holds all-zero …","A <code>.tdata</code> section is a read-only section that holds the …","","A Weak reference to a <code>LoadedCrate</code>.","A representation that the <code>section</code> <code>A</code> in this struct depends …","A Weak reference (<code>Weak</code>) to a <code>LoadedSection</code>.","The value that is added to the source section’s address  …","The range of <code>VirtualAddress</code>es covered by this section, …","Reinterprets this section’s underlying <code>MappedPages</code> …","","Obtain a reference to the inner <code>str</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies the actual data contents of this <code>LoadedSection</code> to …","The name of this crate.","Returns this crate name as a symbol prefix, including a …","Returns the substring of this crate’s name that excludes …","Currently may contain duplicates!","Returns the set of crates that this crate depends on.  …","A tuple of:","The set of <code>.data</code> and <code>.bss</code> sections in this crate. The <code>Shndx</code>…","A convenience function to iterate over only the data …","The file that contains debug symbols for this crate.  …","","Returns the string suffix for use as the name  of the …","","","","","","","","Returns the <strong>first</strong> <code>LoadedSection</code> that matches the given …","Returns the index of the first <code>WeakDependent</code> object in …","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a tuple of (CrateType, &amp;str, &amp;str) based on the …","Returns the <code>LoadedSection</code> of type <code>SectionType::Text</code> that …","","Returns the type of this section.","Whether or not this section’s symbol was exported …","The set of global symbols in this crate, including regular …","A convenience function to iterate over only the global …","","The inner contents of a section that could possibly change …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the relocation type results in a …","Returns <code>true</code> if <code>Data</code> or <code>Bss</code>, otherwise <code>false</code>.","The <code>MappedPages</code> that cover this section.","The offset into the <code>mapped_pages</code> where this section starts","Returns the const <code>&amp;str</code> name of this <code>SectionType</code>.","The full string name of this section, a fully-qualified …","Returns the substring of this section’s name that …","","","Create a new <code>LoadedSection</code>, with an empty <code>dependencies</code> …","The object file that this crate was loaded from.","The offset from the starting virtual address of the target …","The <code>LoadedCrate</code> object that contains/owns this section","","The set of symbols that this crate’s global symbols are …","The details of the relocation action that was performed.","The details of the relocation action that was performed.","A tuple of:","A strong reference to the <code>LoadedSection</code> <code>B</code> that the owner …","A weak reference to the <code>LoadedSection</code> <code>A</code> that depends on …","Returns the default name for the given <code>SectionType</code> as a …","Returns the substring of the given section’s name that …","A map containing all the sections in this crate. In …","The list of sections in foreign crates that depend on this …","The list of sections in foreign crates that this section …","","Returns the size in bytes of this section.","Returns the starting <code>VirtualAddress</code> of where this section …","A tuple of:","The set of thread-local storage (TLS) symbols in this …","","","","","","","","","","","","","","","","","","","","","","","","","","The type of this section, e.g., <code>.text</code>, <code>.rodata</code>, <code>.data</code>, <code>.bss</code>…","The type of relocation calculation that is performed  to …","","","","","","","","","","Same as [new()<code>](#method.new), but uses the given </code>…","Write an actual relocation entry."],"i":[16,0,5,0,0,0,0,5,0,5,16,0,5,16,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,5,5,5,16,0,0,0,8,1,1,4,4,4,4,4,10,5,1,16,15,6,7,8,4,10,5,1,16,15,6,7,8,4,5,6,7,8,4,5,6,7,8,4,1,10,10,10,10,10,10,10,10,10,15,16,4,5,10,4,5,16,8,10,1,4,4,10,5,1,1,16,6,7,8,4,4,10,5,1,16,15,6,7,8,8,16,10,4,1,1,10,10,4,1,4,10,5,1,16,15,6,7,8,8,5,1,1,5,1,1,4,8,1,10,8,1,4,10,6,7,10,6,7,0,1,10,15,15,5,1,1,10,10,4,5,6,7,8,4,1,4,10,5,1,16,15,6,7,8,4,10,5,1,16,15,6,7,8,1,8,4,10,5,1,16,15,6,7,8,1,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[4,2],[4,2],[4],[4,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[5,5],[6,6],[7,7],[8,8],[[]],[[]],[[]],[[]],[[]],[[4,4],9],[[1,1],[[3,[2]]]],0,[10,11],[10,2],[10,[[13,[12]]]],[10,[[13,[12]]]],0,0,[10,14],0,[[],15],[16,2],[4],[[],[[3,[5]]]],[10],[[4,4],17],[[5,5],17],[[16,16],17],[[8,8],17],[10,[[19,[18]]]],[[1,18],[[19,[20]]]],[[4,21],[[3,[22]]]],[[4,21],[[3,[22]]]],[[10,21],23],[[5,21],[[3,[22]]]],[[1,21],23],[[1,21],23],[[16,21],23],[[6,21],23],[[7,21],23],[[8,21],23],[[]],[2,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,8],[2,[[3,[2]]]],[[10,2],[[19,[18]]]],[[],25],[1,5],0,0,[10,14],[4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,17],[5,17],0,0,[5,2],0,[1,2],[[4,4],17],[[8,8],17],[[5,4,[28,[[27,[26]]]],20,29,20,17,12],1],0,0,0,[[4,4],[[19,[9]]]],0,0,0,0,0,0,[5,4],[2,2],0,0,0,[5,3],[1,20],[1,29],0,0,[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,0,[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[5,4,[28,[[27,[26]]]],20,29,20,17,12,[13,[6]],[13,[7]]],1],[[8,26,20,29,17],[[3,[2]]]]],"p":[[3,"LoadedSection"],[15,"str"],[4,"Result"],[3,"StrRef"],[4,"SectionType"],[3,"StrongDependency"],[3,"WeakDependent"],[3,"RelocationEntry"],[4,"Ordering"],[3,"LoadedCrate"],[3,"String"],[6,"WeakCrateRef"],[3,"Vec"],[8,"Iterator"],[3,"LoadedSectionInner"],[4,"CrateType"],[15,"bool"],[6,"StrongSectionRef"],[4,"Option"],[15,"usize"],[3,"Formatter"],[3,"Error"],[6,"Result"],[3,"Rela"],[15,"u64"],[3,"MappedPages"],[6,"Mutex"],[3,"Arc"],[3,"VirtualAddress"],[3,"TypeId"]]},\
"crate_metadata_serde":{"doc":"Standalone crate containing (de)serializable types for …","t":[17,13,17,13,17,13,17,13,17,13,4,3,3,6,17,17,17,13,13,13,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,12],"n":["BSS_SECTION_NAME","Bss","DATA_SECTION_NAME","Data","EH_FRAME_SECTION_NAME","EhFrame","GCC_EXCEPT_TABLE_SECTION_NAME","GccExceptTable","RODATA_SECTION_NAME","Rodata","SectionType","SerializedCrate","SerializedSection","Shndx","TEXT_SECTION_NAME","TLS_BSS_SECTION_NAME","TLS_DATA_SECTION_NAME","Text","TlsBss","TlsData","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","crate_name","data_sections","deserialize","deserialize","deserialize","eq","fmt","fmt","fmt","from","from","from","global","global_sections","init_symbols","into","into","into","is_data_or_bss","name","name","offset","sections","serialize","serialize","serialize","size","tls_sections","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","virtual_address"],"q":["crate_metadata_serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A <code>bss</code> section is just like a data section, but is …","","A <code>data</code> section contains data that is both readable and …","","The <code>.eh_frame</code> section contains information about stack …","","A <code>.gcc_except_table</code> section contains landing pads for …","","An <code>rodata</code> section contains read-only data, i.e., constants.","The possible types of sections that can be loaded from a …","A (de)serializable representation of a loaded crate that …","A (de)serializable representation of a loaded section that …","A Section Header iNDeX (SHNDX), as specified by the ELF …","","","","A <code>text</code> section contains executable code, i.e., functions. ","A <code>.tbss</code> section is a read-only section that holds all-zero …","A <code>.tdata</code> section is a read-only section that holds the …","","","","","","","","","The name of the crate.","A set containing the <code>.data</code> and <code>.bss</code> sections of the crate.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Whether or not the section is global.","A set containing the global sectinos of the crate.","A map of symbol names to their constant values, which …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>Data</code> or <code>Bss</code>, otherwise <code>false</code>.","Returns the const <code>&amp;str</code> name of this <code>SectionType</code>.","The full name of the section.","The offset into this section’s containing <code>MappedPages</code> …","A map containing all the sections of the crate.","","","","The size of the section.","A set containing the thread-local storage (TLS) sections …","","","","","","","","The type of the section.","","","","The starting virtual address of the range covered by this …"],"i":[0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,1,1,2,4,1,2,4,1,1,1,2,2,2,4,1,1,2,4,1,2,4,1,4,2,2,2,4,1,1,1,4,4,2,2,4,1,4,2,1,2,4,1,2,4,1,4,2,4,1,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],0,0,[[],[[3,[2]]]],[[],[[3,[4]]]],[[],[[3,[1]]]],[[1,1],5],[[2,6],7],[[4,6],7],[[1,6],7],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[1,5],[1,8],0,0,0,[2,3],[4,3],[1,3],0,0,[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,[[],9],[[],9],[[],9],0],"p":[[4,"SectionType"],[3,"SerializedCrate"],[4,"Result"],[3,"SerializedSection"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"TypeId"]]},\
"crate_name_utils":{"doc":"Utility functions for parsing and processing crate names …","t":[5,5,5,5,5],"n":["crate_name_from_path","get_containing_crate_name","get_containing_crate_name_ranges","is_valid_crate_name_char","replace_containing_crate_name"],"q":["crate_name_utils","","","",""],"d":["Returns the crate name that is derived from a crate object …","Parses the given symbol string to try to find the name of …","Same as <code>get_containing_crate_name()</code>, but returns the …","Crate names must be only alphanumeric characters, an …","Replaces the <code>old_crate_name</code> substring in the given …"],"i":[0,0,0,0,0],"f":[[1,2],[2,[[3,[2]]]],[2,[[3,[[5,[4]]]]]],[6,7],[[2,2,2],[[9,[8]]]]],"p":[[3,"Path"],[15,"str"],[3,"Vec"],[15,"usize"],[3,"Range"],[15,"char"],[15,"bool"],[3,"String"],[4,"Option"]]},\
"crate_swap":{"doc":"Defines functions and types for crate swapping, used in …","t":[4,13,13,13,13,6,3,6,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,12,12,12,12,12,12,12,12],"n":["InvalidSwapRequest","NewCrateAbsolutePathNotFound","NewCratePathNotAbsolute","NewCratePrefixNotFound","OldCrateNotFound","StateTransferFunction","SwapRequest","SwapRequestList","borrow","borrow","borrow_mut","borrow_mut","clear_unloaded_crate_cache","eq","fmt","fmt","from","from","get_hash","hash","into","into","ne","new","swap_crates","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","1","1","2","2"],"q":["crate_swap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crate_swap::InvalidSwapRequest","","","","","","",""],"d":["The possible errors that can occur when trying to create a …","The given absolute <code>Path</code> for the new crate object file …","The given <code>Path</code> for the new crate object file was not an …","A single crate object file could not be found by matching …","The old crate was not found in the old <code>CrateNamespace</code>. The …","A state transfer function is an arbitrary function called …","This struct is used to specify the details of a …","A list of one or more <code>SwapRequest</code>s that is used by the …","","","","","Clears the cache of unloaded (swapped-out) crates saved …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new <code>SwapRequest</code> that, when given to <code>swap_crates()</code>…","Swaps in new crates that can optionally replace existing …","","","","","","","","","","","","","",""],"i":[0,3,3,3,3,0,0,0,3,1,3,1,0,1,3,1,3,1,1,1,3,1,1,1,0,3,1,3,1,3,1,19,20,21,22,19,22,19,22],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[1,1],2],[[3,4],5],[[1,4],5],[[]],[[]],[[],6],[1],[[]],[[]],[[1,1],2],[[[8,[7]],[10,[9]],11,[8,[[10,[9]]]],2],[[12,[1,3]]]],[[10,13,[8,[14]],[16,[15]],17,2,2],[[12,[7]]]],[[],12],[[],12],[[],12],[[],12],[[],18],[[],18],0,0,0,0,0,0,0,0],"p":[[3,"SwapRequest"],[15,"bool"],[4,"InvalidSwapRequest"],[3,"Formatter"],[6,"Result"],[15,"u64"],[15,"str"],[4,"Option"],[3,"CrateNamespace"],[3,"Arc"],[4,"IntoCrateObjectFile"],[4,"Result"],[6,"SwapRequestList"],[3,"NamespaceDir"],[3,"String"],[3,"Vec"],[6,"MmiRef"],[3,"TypeId"],[13,"OldCrateNotFound"],[13,"NewCrateAbsolutePathNotFound"],[13,"NewCratePathNotAbsolute"],[13,"NewCratePrefixNotFound"]]},\
"debug_info":{"doc":"Support for DWARF debug information from ELF files.","t":[3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["DebugSections","DebugSymbols","Loaded","Unloaded","borrow","borrow","borrow_mut","borrow_mut","debug_abbrev","debug_info","debug_line","debug_loc","debug_pubnames","debug_pubtypes","debug_ranges","debug_str","find_subprogram_containing","from","from","get_loaded","into","into","load","try_from","try_from","try_into","try_into","type_id","type_id","unload","0","0"],"q":["debug_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debug_info::DebugSymbols",""],"d":["The set of debug sections that we need to use from a crate …","An enum describing the possible forms of debug information …","The debug information has already been parsed from the file","Debug information that hasn’t yet been parsed from the …","","","","","Returns the <code>&quot;.debug_abbrev&quot;</code> section.","Returns the <code>&quot;.debug_info&quot;</code> section.","Returns the <code>&quot;.debug_line&quot;</code> section.","Returns the <code>&quot;.debug_loc&quot;</code> section.","Returns the <code>&quot;.debug_pubnames&quot;</code> section.","Returns the <code>&quot;.debug_pubtypes&quot;</code> section.","Returns the <code>&quot;.debug_ranges&quot;</code> section.","Returns the <code>&quot;.debug_str&quot;</code> section.","Finds the subprogram that contains the given instruction …","Returns the argument unchanged.","Returns the argument unchanged.","A convenience method for accessing the already-loaded …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loads the debug symbols from the enclosed weak file …","","","","","","","Unloads these <code>DebugSymbols</code>, returning the enclosed …","",""],"i":[0,0,16,16,1,16,1,16,1,1,1,1,1,1,1,1,1,1,16,16,1,16,16,1,16,1,16,1,16,16,22,23],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[1,[[4,[[3,[2]]]]]],[1,[[5,[[3,[2]]]]]],[1,[[6,[[3,[2]]]]]],[1,[[8,[[7,[[3,[2]]]]]]]],[1,[[9,[[3,[2]]]]]],[1,[[10,[[3,[2]]]]]],[1,[[11,[[3,[2]]]]]],[1,[[12,[[3,[2]]]]]],[[1,13],[[15,[[8,[14]]]]]],[[]],[[]],[16,[[8,[1]]]],[[]],[[]],[[16,17,18],[[20,[1,19]]]],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[16,[[8,[1]]]],0,0],"p":[[3,"DebugSections"],[6,"NativeEndian"],[3,"EndianSlice"],[3,"DebugAbbrev"],[3,"DebugInfo"],[3,"DebugLine"],[3,"DebugLoc"],[4,"Option"],[3,"DebugPubNames"],[3,"DebugPubTypes"],[3,"DebugRanges"],[3,"DebugStr"],[3,"VirtualAddress"],[3,"DebugInfoOffset"],[6,"Result"],[4,"DebugSymbols"],[6,"StrongCrateRef"],[3,"CrateNamespace"],[15,"str"],[4,"Result"],[3,"TypeId"],[13,"Unloaded"],[13,"Loaded"]]},\
"debugit":{"doc":"Use debug printlns, without the trait bounds (using …","t":[12,3,11,11,11,14,11,11,11,11,11,11,11],"n":["0","DebugIt","borrow","borrow_mut","clone","debugit","fmt","fmt","from","into","try_from","try_into","type_id"],"q":["debugit","","","","","","","","","","","",""],"d":["","A helper type for using with the <code>debugit!()</code> macro.","","","","Formats the given argument using its <code>Debug</code> trait definition","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[2,0,2,2,2,0,2,2,2,2,2,2,2],"f":[0,0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],0,[[2,3],4],[[2,3],4],[[]],[[]],[[],5],[[],5],[[],6]],"p":[[8,"Clone"],[3,"DebugIt"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"deferred_interrupt_tasks":{"doc":"Abstractions for deferred interrupt tasks, a companion to …","t":[6,4,13,13,11,11,11,11,5,11,11,11,12,12,12],"n":["InterruptHandlerFunction","InterruptRegistrationError","IrqInUse","SpawnError","borrow","borrow_mut","from","into","register_interrupt_handler","try_from","try_into","type_id","0","existing_handler_address","irq"],"q":["deferred_interrupt_tasks","","","","","","","","","","","","deferred_interrupt_tasks::InterruptRegistrationError","",""],"d":["","The errors that may occur in <code>register_interrupt_handler()</code>.","The given <code>irq</code> number was already in use and is registered …","The given error occurred when spawning the deferred …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Registers an interrupt handler and spawns a companion “…","","","","","",""],"i":[0,0,5,5,5,5,5,5,0,5,5,5,8,9,9],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[1,2,3],[[6,[4,5]]]],[[],6],[[],6],[[],7],0,0,0],"p":[[15,"u8"],[6,"InterruptHandlerFunction"],[4,"Option"],[3,"JoinableTaskRef"],[4,"InterruptRegistrationError"],[4,"Result"],[3,"TypeId"],[13,"SpawnError"],[13,"IrqInUse"]]},\
"device_manager":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FatFsAdapter","FatFsIoErrorAdapter","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","early_init","flush","fmt","from","from","from","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_storage","is_interrupted","new","new_unexpected_eof_error","new_write_zero_error","read","seek","try_from","try_from","try_into","try_into","type_id","type_id","write"],"q":["device_manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An adapter (wrapper type) that implements traits required …","This struct exists to enable us to implement the …","","","","","","","","","Performs early-stage initialization for simple devices …","","","Returns the argument unchanged.","","Returns the argument unchanged.","Initializes all other devices not initialized during …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,5,6,5,6,5,6,5,6,0,5,6,5,6,6,0,5,6,5,6,5,6,5,6,5,6,5,6,6,5,5,5,6,5,6,5,6,5],"f":[0,0,[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[2,[[4,[3]]]],[5,4],[[6,7],8],[[]],[9,6],[[]],[[[11,[10]],[11,[10]]],[[4,[3]]]],[[]],[[]],[[[13,[12]]],[[13,[1,12]]]],[[[13,[12]]],[[13,[1,12]]]],[14,[[14,[1]]]],[14,[[14,[1]]]],[15,[[15,[1]]]],[15,[[15,[1]]]],[[]],[6,16],[[],5],[[],6],[[],6],[5,[[4,[17]]]],[[5,18],[[4,[19]]]],[[],4],[[],4],[[],4],[[],4],[[],20],[[],20],[5,[[4,[17]]]]],"p":[[8,"Any"],[3,"MemoryManagementInfo"],[15,"str"],[4,"Result"],[3,"FatFsAdapter"],[3,"FatFsIoErrorAdapter"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Event"],[3,"Queue"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[15,"bool"],[15,"usize"],[4,"SeekFrom"],[15,"u64"],[3,"TypeId"]]},\
"dfqueue":{"doc":"DFQ is a decoupled, fault-tolerant, multi-producer …","t":[3,3,3,13,13,13,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["DFQueue","DFQueueConsumer","DFQueueProducer","Data","Empty","Inconsistent","PeekResult","PeekedData","QueuedData","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","enqueue","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_consumer","has_failed","into","into","into","into","into","into","into_consumer","into_producer","is_completed","is_enqueued","mark_completed","mpsc_queue","new","obtain_producer","obtain_producer","peek","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","Data","Empty","Inconsistent","MpscQueue","PopResult","borrow","borrow","borrow_mut","borrow_mut","drop","from","from","into","into","new","pop","push","try_from","try_from","try_into","try_into","type_id","type_id","0"],"q":["dfqueue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dfqueue::PeekResult","dfqueue::mpsc_queue","","","","","","","","","","","","","","","","","","","","","","","dfqueue::mpsc_queue::PopResult"],"d":["The actual queue, an opaque type that cannot be used …","A consumer that can process (peek into) elements in a …","A producer that can enqueue elements into a DFQueue. Do …","Some data has been successfully peeked","The queue is empty","The queue is in an inconsistent state. Peeking data should …","A result of the <code>peek</code> function.","A wrapper around data in the queue that allows a …","A special reference type that wraps a data item that has …","","","","","","","","","","","","","","","Pushes the given <code>data</code> onto the queue.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a DFQueueConsumer for this queue, if it hasn’t …","The logic here is as follows: if the item on the queue has …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the DFQueue and returns the one and only consumer …","Consumes the DFQueue and returns a producer.  To obtain …","Whether this item has been completed (handled) by the …","Returns true if this data is still on the queue","","Ported from Rust’s std::sync::mpsc::Queue.","Creates a new DFQueue. ","Returns a new DFQueueProducer cloned from this consumer …","Call this to obtain another DFQueueProducer.  …","Returns the next non-completed element in the queue …","","","","","","","","","","","","","","","","","","","","Some data has been popped","The queue is empty","The queue is in an inconsistent state. Popping data should …","The multi-producer single-consumer structure. This is not …","A result of the <code>pop</code> function.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new queue that is safe to share among multiple …","Pops data from this queue.","Pushes a new value onto this queue.","","","","","","",""],"i":[0,0,0,14,14,14,0,0,0,14,5,8,3,1,2,14,5,8,3,1,2,1,2,3,5,8,3,1,2,14,5,8,3,1,2,3,1,14,5,8,3,1,2,5,5,1,1,2,0,5,8,3,8,14,5,8,3,1,2,14,5,8,3,1,2,14,5,8,3,1,2,15,16,16,16,0,0,16,13,16,13,13,16,13,16,13,13,13,13,16,13,16,13,16,13,17],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[2],[3,1],[[[5,[4]],6],7],[[[8,[4]],6],7],[[[3,[4]],6],7],[[[1,[4]],6],7],[[[2,[4]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[9,[8]]]],[1,10],[[]],[[]],[[]],[[]],[[]],[[]],[5,8],[5,3],[1,10],[1,10],[2],0,[[],5],[8,3],[3,3],[8,[[9,[2]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[13],[[]],[[]],[[]],[[]],[[],13],[13,9],[13],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0],"p":[[3,"QueuedData"],[3,"PeekedData"],[3,"DFQueueProducer"],[8,"Debug"],[3,"DFQueue"],[3,"Formatter"],[6,"Result"],[3,"DFQueueConsumer"],[4,"Option"],[15,"bool"],[4,"Result"],[3,"TypeId"],[3,"MpscQueue"],[4,"PeekResult"],[13,"Data"],[4,"PopResult"],[13,"Data"]]},\
"displayable":{"doc":"This crate defines a trait of <code>Displayable</code>. A displayable …","t":[8,10,10,10],"n":["Displayable","display","get_size","set_size"],"q":["displayable","","",""],"d":["The <code>Displayable</code> trait is an abstraction for any object …","Displays this <code>Displayable</code>’s content in the given …","Gets the size of the area occupied by the displayable.","Resizes the displayable area, but does not automatically …"],"i":[0,7,7,7],"f":[0,[[1,2],[[5,[3,4]]]],[[]],[[6,6]]],"p":[[3,"Coord"],[3,"Framebuffer"],[3,"Rectangle"],[15,"str"],[4,"Result"],[15,"usize"],[8,"Displayable"]]},\
"dmar":{"doc":"Definitions for the DMAR, the Direct Memory Access (DMA) …","t":[13,13,17,3,3,3,3,3,3,4,3,3,3,3,3,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["Andd","Atsr","DMAR_SIGNATURE","DeviceScopePath","Dmar","DmarAndd","DmarAtsr","DmarDeviceScope","DmarDrhd","DmarEntry","DmarEntryRecord","DmarIter","DmarRhsa","DmarRmrr","DmarSatc","Drhd","DrhdIter","Rhsa","Rmrr","Satc","UnknownOrCorrupt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","device","device_type","enumeration_id","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","function","get","handle","host_address_width","include_pci_all","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","iter","iter","next","next","path","register_base_address","sdt","segment_number","start_bus_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0"],"q":["dmardmar::DmarEntry","","","","","",""],"d":["","","","","A wrapper around the DMAR ACPI table (<code>DmarReporting</code>), …","ANDD: DMAR ACPI Name-space Device Declaration Structure. ","ATSR: DMAR Root Port ATS (Address Translation Services) …","DMAR Device Scope Structure.","DRHD: DMAR Hardware Unit Definition Structure.","The set of possible sub-tables that can exist in the …","Represents the “header” of each dynamic table entry  …","An <code>Iterator</code> over the dynamic entries of the <code>Dmar</code>. Its …","RHSA: DMAR Remapping Hardware Static Affinity Structure. ","RMRR: DMAR Reserved Memory Region Reporting Structure. ","SATC: DMAR SoC Integrated Address Translation Cache …","","An <code>Iterator</code> over the dynamic entries (<code>DmarDeviceScope</code>s) of …","","","","The DMAR table had an entry of an unknown type or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type of this device scope structure.","Returns the Enumeration ID, which differs in meaning based …","Returns the <code>flags</code> value in this DMAR table.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Finds the DMAR in the given <code>AcpiTables</code> and returns a …","The handler for parsing the DMAR table and adding it to …","Returns the maximum DMA physical addressability (in number …","Returns the value of the <code>INCLUDE_PCI_ALL</code> flag, the only …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns an <code>Iterator</code> over the <code>DmarDeviceScope</code> entries in …","Returns an <code>Iterator</code> over the DMAR’s remapping structures …","","","Calculates and returns the hierarchical path (along the …","Returns the base address of this DRHD’s remapping …","Returns a reference to the <code>Sdt</code> header in this DMAR table.","Returns the PCI segment number associated with this DRHD.","Returns the PCI bus number under which the device …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,16,16,16,13,1,10,2,12,3,4,16,5,6,7,8,9,13,1,10,2,12,3,4,16,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,2,10,10,12,13,10,2,12,4,16,5,6,7,8,9,13,1,10,2,12,3,4,16,5,6,7,8,9,2,12,0,12,13,13,1,10,2,12,3,4,16,5,6,7,8,9,1,3,13,12,1,3,10,13,12,13,10,1,2,3,4,5,6,7,8,9,13,1,10,2,12,3,4,16,5,6,7,8,9,13,1,10,2,12,3,4,16,5,6,7,8,9,13,1,10,2,12,3,4,16,5,6,7,8,9,29,30,31,32,33,34,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[10,11],[10,11],[12,11],[[13,14],15],[[10,14],15],[[2,14],15],[[12,14],15],[[4,14],15],[[16,14],15],[[5,14],15],[[6,14],15],[[7,14],15],[[8,14],15],[[9,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[17,[[18,[12]]]],[[17,19,20,21],[[23,[22]]]],[12,11],[13,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,1],[12,3],[1,18],[3,18],[10,[[23,[2,22]]]],[13,25],[12,26],[13,27],[10,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,0],"p":[[3,"DrhdIter"],[3,"DeviceScopePath"],[3,"DmarIter"],[3,"DmarEntryRecord"],[3,"DmarRmrr"],[3,"DmarAtsr"],[3,"DmarRhsa"],[3,"DmarAndd"],[3,"DmarSatc"],[3,"DmarDeviceScope"],[15,"u8"],[3,"Dmar"],[3,"DmarDrhd"],[3,"Formatter"],[6,"Result"],[4,"DmarEntry"],[3,"AcpiTables"],[4,"Option"],[6,"AcpiSignature"],[15,"usize"],[3,"PhysicalAddress"],[15,"str"],[4,"Result"],[15,"bool"],[15,"u64"],[3,"Sdt"],[15,"u16"],[3,"TypeId"],[13,"Drhd"],[13,"Rmrr"],[13,"Atsr"],[13,"Rhsa"],[13,"Andd"],[13,"Satc"],[13,"UnknownOrCorrupt"]]},\
"e1000":{"doc":"","t":[3,17,17,11,11,11,5,11,11,11,11,11,11,11,0,11,11,11,3,11,11,12,12,12,5,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,5,12,12,12,12,12,11,11,11],"n":["E1000Nic","E1000_DEV","INTEL_VEND","borrow","borrow_mut","from","get_e1000_nic","get_received_frame","init","into","mac_address","poll_receive","send_packet","spoof_mac","test_e1000_driver","try_from","try_into","type_id","arp_packet","borrow","borrow_mut","dest1","dest2","dest3","dhcp_request_packet","from","h_type","hlen","into","oper","p_type","packet_type","plen","sha1","sha2","sha3","source1","source2","source3","spa1","spa2","test_e1000_nic_driver","tha1","tha2","tha3","tpa1","tpa2","try_from","try_into","type_id"],"q":["e1000","","","","","","","","","","","","","","","","","","e1000::test_e1000_driver","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Struct representing an e1000 network interface card.","","","","","Returns the argument unchanged.","Returns a reference to the E1000Nic wrapped in a …","","Initializes the new E1000 network interface card that is …","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,3,3,3,0,3,3,3,3,3,3,3,0,3,3,3,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11],"f":[0,0,0,[[]],[[]],[[]],[[],[[2,[1]]]],[3,[[2,[4]]]],[5,[[7,[1,6]]]],[[]],[3],[3,[[7,[6]]]],[[3,8],[[7,[6]]]],[3],0,[[],7],[[],7],[[],9],0,[[]],[[]],0,0,0,[[],[[7,[6]]]],[[]],0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[10]]]],0,0,0,0,0,[[],7],[[],7],[[],9]],"p":[[3,"MutexIrqSafe"],[4,"Option"],[3,"E1000Nic"],[3,"ReceivedFrame"],[3,"PciDevice"],[15,"str"],[4,"Result"],[3,"TransmitBuffer"],[3,"TypeId"],[15,"u64"],[3,"arp_packet"]]},\
"entryflags_x86_64":{"doc":"This crate defines the structure of page table entry flags …","t":[18,18,18,3,18,18,18,18,17,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ACCESSED","DIRTY","EXCLUSIVE","EntryFlags","GLOBAL","HUGE_PAGE","NO_CACHE","NO_EXECUTE","PAGE_TABLE_ENTRY_FRAME_MASK","PRESENT","USER_ACCESSIBLE","WRITABLE","WRITE_THROUGH","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","cmp","complement","contains","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_elf_program_flags","from_elf_section_flags","from_iter","from_multiboot2_section_flags","hash","insert","intersection","intersects","into","into_exclusive","into_huge","into_non_exclusive","into_writable","is_all","is_empty","is_exclusive","is_executable","is_huge","is_writable","ne","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_into","type_id","union","zero"],"q":["entryflags_x86_64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The hardware will set this bit when the page is accessed.","The hardware will set this bit when the page has been …","Set this bit to indicate that the frame pointed to by this …","Page table entry flags on the x86_64 architecture. ","Set this bit to indicate that this page is mapped across …","Set this bit if this page table entry represents a “huge…","If set, this page’s content is never cached, neither for …","Set this bit to forbid execution of the mapped page. In …","A mask for the bits of a page table entry that contain the …","If set, this page is currently “present” in memory.  …","If set, userspace (ring 3) can access this page. If not …","If set, writes to this page are allowed. If not set, this …","If set, writes to this page go directly through the cache …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Gets flags according to the properties of a program. ","Gets flags according to the properties of a section from …","","Gets flags according to the properties of a section from …","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the huge page …","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the writable …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if these flags are exclusive. ","Returns <code>true</code> if these flags are executable.","Returns <code>true</code> if the page the entry points to is a huge …","Returns <code>true</code> if the page is writable.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns a new, all-zero <code>EntryFlags</code> with no bits enabled."],"i":[1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,2],[[1,1],1],[[1,1]],[[]],[[]],[1,1],[[1,1],3],[1,1],[[1,1],4],[[],1],[[1,1],1],[[],1],[[1,1],4],[[1,5]],[[1,6],7],[[1,6],7],[[1,6],7],[[1,6],7],[[1,6],7],[[]],[2,[[8,[1]]]],[2,1],[2,1],[9,1],[2,1],[5,1],[10,1],[1],[[1,1]],[[1,1],1],[[1,1],4],[[]],[1,1],[1,1],[1,1],[1,1],[1,4],[1,4],[1,4],[1,4],[1,4],[1,4],[[1,1],4],[1,1],[[1,1],[[8,[3]]]],[[1,1]],[[1,1,4]],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[[],11],[[],11],[[],12],[[1,1],1],[[],1]],"p":[[3,"EntryFlags"],[15,"u64"],[4,"Ordering"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"Flags"],[3,"ElfSection"],[4,"Result"],[3,"TypeId"]]},\
"environment":{"doc":"","t":[3,4,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Environment","Error","NotADirectory","NotFound","Result","borrow","borrow","borrow_mut","borrow_mut","chdir","cwd","default","fmt","from","from","get","into","into","set","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unset","variables","working_dir"],"q":["environment","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A structure that contains environment state for a given …","The error type for environment operations.","A filesystem node was, unexpectedly, not a directory.","A filesystem node wasn’t found.","A specialized <code>Result</code> type for environment operations.","","","","","Changes the current working directory.","Returns the absolute file path of the current working …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the value of the environment variable with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sets an environment variable with the given <code>key</code> and <code>value</code>.","","","","","","","","Unsets the environment variable with the given <code>key</code>.","","The “current working directory”, i.e., where a task’…"],"i":[0,0,5,5,0,1,5,1,5,1,1,1,5,1,5,1,1,5,1,5,1,5,1,5,1,5,1,1,1],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[1,2],3],[1,4],[[],1],[[5,6],7],[[]],[[]],[[1,8],[[9,[4]]]],[[]],[[]],[[1,4,4]],[[],4],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[1,8]],0,0],"p":[[3,"Environment"],[3,"Path"],[6,"Result"],[3,"String"],[4,"Error"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[4,"Result"],[3,"TypeId"]],"a":{"change":[9],"current":[10],"dir":[10],"getcwd":[10],"remove_var":[26],"set_var":[18],"var":[15],"working":[10]}},\
"ethernet_smoltcp_device":{"doc":"This crate implements an interface/glue layer between our …","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["EthernetDevice","EthernetNetworkInterface","RxToken","TxToken","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","consume","consume","ethernet_addr","from","from","from","from","has_ip_addr","iface","into","into","into","into","ip_addrs","new","new","new_ipv4_interface","poll","receive","routes","routes_mut","set_ethernet_addr","transmit","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["ethernet_smoltcp_device","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An implementation of smoltcp’s <code>Device</code> trait, which …","A struct that implements the <code>NetworkInterface</code> trait for a …","The receive token type used by smoltcp,  which contains …","The transmit token type used by smoltcp, which contains …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new instance of an ethernet network interface, …","Create a new instance of the <code>EthernetDevice</code>.","Creates a new ethernet network interface with an ipv4 …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,9,2,4,8,9,2,4,8,2,4,8,9,9,2,4,8,9,9,9,2,4,8,9,9,2,9,9,2,9,9,9,2,9,2,4,8,9,2,4,8,9,2,4,8],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],3],[[[4,[1]],5,6],7],[[8,5],7],[[[9,[1]]],10],[[]],[[]],[[]],[[]],[[[9,[1]],11],12],0,[[]],[[]],[[]],[[]],[[[9,[1]]]],[[13,[15,[14]],[15,[[16,[11]]]]],[[18,[[9,[1]],17]]]],[13,[[2,[1]]]],[[13,17],[[18,[[9,[1]],17]]]],[[[9,[1]],19,5],[[7,[12]]]],[[[2,[1]]],15],[[[9,[1]]],20],[[[9,[1]]],20],[[[9,[1]],10]],[[[2,[1]]],15],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],21],[[],21],[[],21],[[],21]],"p":[[8,"NetworkInterfaceCard"],[3,"EthernetDevice"],[3,"DeviceCapabilities"],[3,"TxToken"],[3,"Instant"],[15,"usize"],[6,"Result"],[3,"RxToken"],[3,"EthernetNetworkInterface"],[3,"Address"],[4,"Address"],[15,"bool"],[3,"MutexIrqSafe"],[4,"Cidr"],[4,"Option"],[8,"Into"],[15,"str"],[4,"Result"],[3,"Set"],[3,"Routes"],[3,"TypeId"]]},\
"event_types":{"doc":"","t":[4,13,13,3,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,12,11,11,11,12,11,11,11,12,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["Event","ExitEvent","KeyboardEvent","KeyboardInputEvent","MouseMovementEvent","MousePositionEvent","MousePositionEvent","OutputEvent","WindowResizeEvent","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coordinate","default","fifth_button_hold","fmt","fmt","fmt","fourth_button_hold","from","from","from","gcoordinate","into","into","into","key_event","left_button_hold","new","new_keyboard_event","new_output_event","new_window_resize_event","right_button_hold","scrolling_down","scrolling_up","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","0","0"],"q":["event_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","event_types::Event","","","",""],"d":["","","An input event from a keyboard","A keyboard event, indicating that one or more keys were …","An input event from a mouse","An event describing mouse position rather than movement …","The event tells application about mouse’s position …","An event indicating that another entity wants to print the …","Tells an application that the window manager has resized …","","","","","","","","","","","","","the relative position in window","","whether the fifth button holds","","","","whether the fourth button holds","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","the global position in window","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key input event from i/o device","whether the left button holds","Create a new key board input event. <code>key</code> is the key input …","Create a new keyboard event","Create a new output event","Create a new window resize event","whether the right button holds","whether the mouse is scrolling down","whether the mouse is scrolling up","","","","","","","","","","","","","","","","",""],"i":[0,2,2,0,2,0,2,2,2,1,2,3,1,2,3,1,2,3,1,2,3,1,1,1,1,2,3,1,1,2,3,1,1,2,3,3,1,3,2,2,2,1,1,1,1,2,3,1,2,3,1,2,3,1,2,3,10,11,12,13,14],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],0,[[],1],0,[[1,4],5],[[2,4],5],[[3,4],5],0,[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,[6,3],[6,2],[[],2],[7,2],0,0,0,[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],0,0,0,0,0],"p":[[3,"MousePositionEvent"],[4,"Event"],[3,"KeyboardInputEvent"],[3,"Formatter"],[6,"Result"],[3,"KeyEvent"],[3,"Rectangle"],[4,"Result"],[3,"TypeId"],[13,"KeyboardEvent"],[13,"MouseMovementEvent"],[13,"OutputEvent"],[13,"WindowResizeEvent"],[13,"MousePositionEvent"]]},\
"exceptions_early":{"doc":"Early exception handlers that do nothing but print an …","t":[7,5,5],"n":["EARLY_IDT","double_fault_handler","init"],"q":["exceptions_early","",""],"d":["An initial Interrupt Descriptor Table (IDT) with only very …","exception 0x08","Initializes an early IDT with a basic set of early …"],"i":[0,0,0],"f":[0,[[1,2],3],[[[5,[4]]]]],"p":[[3,"InterruptStackFrame"],[15,"u64"],[15,"never"],[3,"VirtualAddress"],[4,"Option"]]},\
"exceptions_full":{"doc":"Exception handlers that are task-aware, and will kill a …","t":[5],"n":["init"],"q":["exceptions_full"],"d":["Initialize the given <code>idt</code> with fully-featured exception …"],"i":[0],"f":[[1]],"p":[[3,"LockedIdt"]]},\
"external_unwind_info":{"doc":"Registers and stores unwind information from external …","t":[3,11,11,11,11,5,11,11,5,11,5,12,11,11,11,11,12],"n":["ExternalUnwindInfo","borrow","borrow_mut","clone","clone_into","deregister_unwind_info","fmt","from","get_unwind_info","into","register_unwind_info","text_section","to_owned","try_from","try_into","type_id","unwind_info"],"q":["external_unwind_info","","","","","","","","","","","","","","","",""],"d":["Unwinding information for an external (non-Theseus) …","","","","","Remove a previously-registered section of external …","","Returns the argument unchanged.","Returns the registered external unwind information that …","Calls <code>U::from(self)</code>.","Register  a new section of external unwinding information.","The bounds of the text section that this unwinding info …","","","","","The bounds of the unwinding information (e.g., <code>.eh_frame</code>) …"],"i":[0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[2,3],[[1,4],5],[[]],[6,[[7,[1]]]],[[]],[[2,8,2,8],3],0,[[]],[[],3],[[],3],[[],9],0],"p":[[3,"ExternalUnwindInfo"],[15,"u8"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"VirtualAddress"],[4,"Option"],[15,"usize"],[3,"TypeId"]]},\
"fadt":{"doc":"Definitions for FADT, the Fixed ACPI Description Table.","t":[17,3,12,12,12,11,11,12,12,11,11,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,12,5,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12],"n":["FADT_SIGNATURE","Fadt","acpi_disable","acpi_enable","boot_architecture_flags","borrow","borrow_mut","c_state_control","century","clone","clone_into","day_alarm","dsdt","duty_offset","duty_width","firmware_ctrl","flags","flush_size","flush_stride","fmt","from","get","gpe0_block","gpe0_ength","gpe1_base","gpe1_block","gpe1_length","handle","header","into","month_alarm","pm1_control_length","pm1_event_length","pm1a_control_block","pm1a_event_block","pm1b_control_block","pm1b_event_block","pm2_control_block","pm2_control_length","pm_timer_block","pm_timer_length","preferred_power_managament","pstate_control","s4_bios_req","sci_interrupt","smi_command_port","to_owned","try_from","try_into","type_id","worst_c2_latency","worst_c3_latency"],"q":["fadt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","The physical address of the DSDT table","","","","","","","","Returns the argument unchanged.","Finds the FADT in the given <code>AcpiTables</code> and returns a …","","","","","","The handler for parsing the FADT table and adding it to …","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,[[]],[[]],0,0,[1,1],[[]],0,0,0,0,0,0,0,0,[[1,2],3],[[]],[4,[[5,[1]]]],0,0,0,0,0,[[4,6,7,8],[[10,[9]]]],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],10],[[],10],[[],11],0,0],"p":[[3,"Fadt"],[3,"Formatter"],[6,"Result"],[3,"AcpiTables"],[4,"Option"],[6,"AcpiSignature"],[15,"usize"],[3,"PhysicalAddress"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"fault_crate_swap":{"doc":"Defines support functions needed for swapping of corrupted …","t":[3,11,11,11,11,5,11,5,11,5,11,12,12,12,12,12,12,5,11,11,11,11],"n":["SwapRanges","borrow","borrow_mut","clone","clone_into","constant_offset_fix","default","do_self_swap","from","get_crate_to_swap","into","new_data","new_rodata","new_text","old_data","old_rodata","old_text","self_swap_handler","to_owned","try_from","try_into","type_id"],"q":["fault_crate_swap","","","","","","","","","","","","","","","","","","","","",""],"d":["A data structure to hold the ranges of memory used by the …","","","","","A support function for self swap of crate Iterates through …","","For swapping of a crate from the identical object file in …","Returns the argument unchanged.","This function returns the name of the crate to replace if …","Calls <code>U::from(self)</code>.","","","","","","","This function calls the crate swapping routine for a …","","","",""],"i":[0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[1,2,2],[[4,[3]]]],[[],1],[[5,6,[8,[7]],[9,[3]],10,11],[[4,[1,3]]]],[[]],[[],[[8,[3]]]],[[]],0,0,0,0,0,0,[5,[[4,[1,3]]]],[[]],[[],4],[[],4],[[],12]],"p":[[3,"SwapRanges"],[15,"usize"],[3,"String"],[4,"Result"],[15,"str"],[6,"DirRef"],[3,"NamespaceDir"],[4,"Option"],[3,"Vec"],[3,"Arc"],[15,"bool"],[3,"TypeId"]]},\
"fault_log":{"doc":"This crate logs all the faults occuring within Theseus.  …","t":[13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,12,12,11,11,11,11,11,11,5,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,5,5,12,11,11,11,5,5,5,11,5,5,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["BoundRangeExceeded","DeviceNotAvailable","DivideByZero","DoubleFault","FaultCrateReplaced","FaultEntry","FaultType","GeneralProtectionFault","InvalidOpCode","InvalidTSS","IterativelyCrateReplaced","MultipleFaultRecovery","NMI","None","Overflow","PageFault","Panic","RecoveryAction","SegmentNotPresent","TaskRestarted","UnknownException","action_taken","address_accessed","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear_fault_log","clone","clone","clone","clone_into","clone_into","clone_into","core","crate_error_occured","eq","error_code","fault_type","fmt","fmt","fmt","from","from","from","from_exception_number","get_the_most_recent_match","instruction_pointer","into","into","into","log_exception","log_handled_fault","log_panic_entry","new","print_fault_log","remove_unhandled_exceptions","replaced_crates","running_app_crate","running_task","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0"],"q":["fault_log","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fault_log::FaultType"],"d":["","","","","Crate where fault is observed is replaced, and then task …","A data structure to hold information about each fault. ","The possible faults (panics and exceptions) encountered  …","","","","Different Crate than the crate where fault is observed is …","This fault is handled as a recovery for different fault.  …","","No action taken on this fault.","","","","The different types of recovery procedures used for the  …","","Task restarted only. No crate replaced.","","Recovery Action taken as a result of the fault","For page faults the address the program attempted to …","","","","","","","Clears the log of faults so far occured in the system ","","","","","","","The core error occured","Crate the address at which exception occured located","","Error code returned with the exception","Type of fault","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Utility function to get Fault type from exception number. ","Provides the most recent entry in the log for given crate …","Address at which exception occured","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Add a new exception instance to the fault log.  Generally …","Add a <code>FaultEntry</code> to fault log.","Add a new panic instance to the fault log. ","Returns an empty <code>FaultEntry</code> with only <code>fault_type</code> field …","Prints the fault log","Removes the unhandled faults from the fault log and …","List of crates reloaded from memory to recover from fault","If available the application crate that spawned the task","Task runnning immediately before the Exception","","","","","","","","","","","","",""],"i":[1,1,1,1,2,0,0,1,1,1,2,2,1,2,1,1,1,0,1,2,1,3,3,1,2,3,1,2,3,0,1,2,3,1,2,3,3,3,2,3,3,1,2,3,1,2,3,0,0,3,1,2,3,0,0,0,3,0,0,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,16],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],0,0,[[2,2],4],0,0,[[1,5],6],[[2,5],6],[[3,5],6],[[]],[[]],[[]],[7,1],[8,[[9,[3]]]],0,[[]],[[]],[[]],[[7,10,[9,[11]],[9,[10]]]],[3],[12],[1,3],[[]],[[],[[13,[3]]]],0,0,0,[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],0],"p":[[4,"FaultType"],[4,"RecoveryAction"],[3,"FaultEntry"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"str"],[4,"Option"],[15,"usize"],[15,"u64"],[3,"PanicInfo"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[13,"UnknownException"]]},\
"first_application":{"doc":"This crate contains a simple routine to start the first …","t":[5],"n":["start"],"q":["first_application"],"d":["Starts the first applications that run in Theseus  by …"],"i":[0],"f":[[[],[[2,[1]]]]],"p":[[15,"str"],[4,"Result"]]},\
"font":{"doc":"","t":[17,17,7],"n":["CHARACTER_HEIGHT","CHARACTER_WIDTH","FONT_BASIC"],"q":["font","",""],"d":["The height of a character.","The width of a character.","The bitmap array of characters."],"i":[0,0,0],"f":[0,0,0],"p":[]},\
"frame_allocator":{"doc":"Provides an allocator for physical memory frames. The …","t":[3,3,3,3,13,4,3,13,13,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11],"n":["AllocatedFrame","AllocatedFrames","AllocatedFramesIter","DeferredAllocAction","Free","MemoryRegionType","PhysicalMemoryRegion","Reserved","Unknown","allocate_frames","allocate_frames_at","allocate_frames_by_bytes","allocate_frames_by_bytes_at","allocate_frames_by_bytes_deferred","allocate_frames_deferred","as_allocated_frame","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","drop","drop","empty","eq","fmt","fmt","fmt","fmt","frames","from","from","from","from","from","from","init","into","into","into","into","into","into","into_iter","into_iter","merge","new","next","split","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["frame_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A reference to a single frame within a range of …","Represents a range of allocated physical memory <code>Frame</code>s; …","An iterator over each <code>AllocatedFrame</code> in a range of …","A series of pending actions related to frame allocator …","Memory that is available for any general purpose.","Types of physical memory. See each variant’s …","A region of physical memory.","Memory that is reserved for special use and is only ever …","Memory of an unknown type. This is a default value that …","Allocates the given number of frames with no constraints …","Allocates the given number of frames starting at …","Allocates frames with no constraints on the starting …","Allocates frames starting at the given <code>PhysicalAddress</code> …","Similar to <code>allocated_frames_deferred()</code>, but accepts a size …","The core frame allocation routine that allocates the given …","Returns an <code>AllocatedFrame</code> if this <code>AllocatedFrames</code> object …","","","","","","","","","","","","","","","","","","","","","","Returns an empty AllocatedFrames object that performs no …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initialize the frame allocator with the given list of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Merges the given <code>AllocatedFrames</code> object <code>other</code> into this …","","","Splits this <code>AllocatedFrames</code> into two separate …","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,9,0,0,9,9,0,0,0,0,0,0,2,2,15,11,8,9,7,2,15,11,8,9,7,8,9,8,9,2,8,7,2,11,2,9,2,8,9,7,8,2,15,11,8,9,7,0,2,15,11,8,9,7,2,15,2,8,15,2,8,9,2,15,11,8,9,7,2,15,11,8,9,7,8,2,15,11,8,9,7],"f":[0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[[4,1],[[6,[2,5]]]],[1,[[3,[2]]]],[[4,1],[[6,[2,5]]]],[[[3,[4]],1],[[6,[5]]]],[[[3,[4]],1],[[6,[5]]]],[2,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[9,9],[[]],[[]],[2,10],[8,10],[7],[2],[11],[[],2],[[9,9],12],[[2,13],14],[[8,13],14],[[9,13],14],[[7,13],14],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[[]],[[2,2],[[6,[2]]]],[[10,9],8],[15,3],[[2,16],[[6,[2]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[],17],[[],17],[[],17],[[],17],[[],17],[[],17]],"p":[[15,"usize"],[3,"AllocatedFrames"],[4,"Option"],[3,"PhysicalAddress"],[15,"str"],[4,"Result"],[3,"AllocatedFrame"],[3,"PhysicalMemoryRegion"],[4,"MemoryRegionType"],[3,"FrameRange"],[3,"DeferredAllocAction"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"AllocatedFramesIter"],[3,"Frame"],[3,"TypeId"]]},\
"framebuffer":{"doc":"This crate defines a <code>Framebuffer</code> structure, which is …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,0,11,11,11,3,8,3,12,10,11,11,12,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,10,11,11],"n":["Framebuffer","borrow","borrow_mut","buffer","buffer_mut","composite_buffer","contains","draw_pixel","fill","from","get_hash","get_pixel","get_size","hash","index_of","init","into","new","overlaps_with","overwrite_pixel","pixel","try_from","try_into","type_id","AlphaPixel","Pixel","RGBPixel","alpha","blend","blend","blend","blue","blue","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","composite_buffer","composite_buffer","composite_buffer","fmt","fmt","from","from","from","from","get_hash","get_hash","green","green","hash","hash","into","into","red","red","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","weight_blend","weight_blend","weight_blend"],"q":["framebuffer","","","","","","","","","","","","","","","","","","","","","","","","framebuffer::pixel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A framebuffer is a region of memory interpreted as a 2-D …","","","Returns a reference to the mapped memory of the buffer","Returns a mutable reference to the mapped memory of the …","Composites <code>src</code> to the buffer starting from <code>index</code>.","Checks if the given <code>coordinate</code> is within the framebuffer’…","Draw a pixel at the given 1coordinate1.  The <code>pixel</code> will be …","Fills (overwrites) the entire framebuffer with the given …","Returns the argument unchanged.","","Returns the pixel value at the given <code>coordinate</code> in this …","Returns the <code>(width, height)</code> of this framebuffer.","","Returns the index of the given <code>coordinate</code> in this …","Initializes the final framebuffer based on VESA graphics …","Calls <code>U::from(self)</code>.","Creates a new framebuffer with rectangular dimensions of …","Checks if a framebuffer overlaps with an area.","Overwites a pixel at the given coordinate in this …","Defines the <code>Pixel</code> trait as well as basic pixel formats, …","","","","An Alpha Pixel is a pixel with an alpha channel","A pixel provides methods to blend with others.","An RGB Pixel is a pixel with no extra channel.","","blend with another pixel considering their extra channel.","","","","","","","","","","","","","Composites the <code>src</code> pixel slice to the <code>dest</code> pixel slice.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Blend two pixels linearly with weights, as <code>blend</code> for <code>origin</code>…","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,0,0,15,1,14,15,14,15,14,15,14,15,14,15,14,15,1,14,15,14,15,14,14,15,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,1,14,15],"f":[0,[[]],[[]],[[[2,[1]]],3],[[[2,[1]]],3],[[[2,[1]],4]],[[[2,[1]],5],6],[[[2,[1]],5,1]],[[[2,[1]],1]],[[]],[[],7],[[[2,[1]],5],[[8,[1]]]],[[[2,[1]]]],[[[2,[[0,[9,1]]]]]],[[[2,[1]],5],[[8,[4]]]],[[],[[11,[[2,[1]],10]]]],[[]],[[4,4,[8,[12]]],[[11,[[2,[1]],10]]]],[[[2,[1]],5,4,4],6],[[[2,[1]],5,1]],0,[[],11],[[],11],[[],13],0,0,0,0,[[]],[[14,14],14],[[15,15],15],0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[]],[[]],[[]],[[14,16],17],[[15,16],17],[[]],[18,14],[[]],[18,15],[[],7],[[],7],0,0,[14],[15],[[]],[[]],0,0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],13],[[],13],[19],[[14,14,19],14],[[15,15,19],15]],"p":[[8,"Pixel"],[3,"Framebuffer"],[6,"BoxRefMut"],[15,"usize"],[3,"Coord"],[15,"bool"],[15,"u64"],[4,"Option"],[8,"Hash"],[15,"str"],[4,"Result"],[3,"PhysicalAddress"],[3,"TypeId"],[3,"RGBPixel"],[3,"AlphaPixel"],[3,"Formatter"],[6,"Result"],[3,"Color"],[15,"f32"]]},\
"framebuffer_compositor":{"doc":"This crate defines a framebuffer compositor.","t":[17,3,7,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CACHE_BLOCK_HEIGHT","CacheBlock","FRAME_COMPOSITOR","FrameCompositor","borrow","borrow","borrow_mut","borrow_mut","composite","from","from","into","into","overlaps_with","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["framebuffer_compositor","","","","","","","","","","","","","","","","","","",""],"d":["The height of a cache block. In every iteration the …","A <code>CacheBlock</code> represents the cached (previously-composited) …","The instance of the framebuffer compositor.","The framebuffer compositor structure. It caches …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if a cache block overlaps with another one","","","","","",""],"i":[0,0,0,0,7,1,7,1,1,7,1,7,1,7,7,1,7,1,7,1],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[1,2,3,[0,[2,4]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[7,7],8],[[],6],[[],6],[[],6],[[],6],[[],9],[[],9]],"p":[[3,"FrameCompositor"],[8,"IntoIterator"],[3,"Framebuffer"],[8,"Clone"],[15,"str"],[4,"Result"],[3,"CacheBlock"],[15,"bool"],[3,"TypeId"]]},\
"framebuffer_drawer":{"doc":"This crate contains a series of basic draw functions to …","t":[5,5,5,5],"n":["draw_circle","draw_line","draw_rectangle","fill_rectangle"],"q":["framebuffer_drawer","","",""],"d":["Draw a circle in the framebuffer. <code>coordinate</code> is the …","Draws a line in a framebuffer. The part exceeding the …","Draws a rectangle in a framebuffer. The part exceeding the …","Fills a rectangle in a framebuffer with color. The part …"],"i":[0,0,0,0],"f":[[[1,2,3,4]],[[1,2,2,4]],[[1,2,3,3,4]],[[1,2,3,3,4]]],"p":[[3,"Framebuffer"],[3,"Coord"],[15,"usize"],[8,"Pixel"]]},\
"framebuffer_printer":{"doc":"This crate contains functions to print strings in a …","t":[5,5,5],"n":["fill_blank","print_ascii_character","print_string"],"q":["framebuffer_printer","",""],"d":["Fill a blank text area (left, top, right, bottom) with …","Prints a character to the framebuffer at position (line, …","Prints a string in a framebuffer. Returns (column, line, …"],"i":[0,0,0],"f":[[[1,2,3]],[[1,4,3,3,5,6,6]],[[1,5,6,6,7,3,3,6,6]]],"p":[[3,"Framebuffer"],[3,"Rectangle"],[8,"Pixel"],[15,"u8"],[3,"Coord"],[15,"usize"],[15,"str"]]},\
"fs_node":{"doc":"Defines traits for Files and Directories within the …","t":[13,6,8,8,13,4,6,8,6,6,10,11,11,11,11,11,11,10,11,11,11,11,10,11,10,11,10,11,11,11,11,10,10,10,11,11,11,11,11,12,12],"n":["Dir","DirRef","Directory","File","File","FileOrDir","FileRef","FsNode","WeakDirRef","WeakFileRef","as_mapping","borrow","borrow_mut","clone","clone_into","fmt","from","get","get_absolute_path","get_absolute_path","get_dir","get_file","get_name","get_name","get_parent_dir","get_parent_dir","insert","into","is_dir","is_file","len","list","remove","set_parent_dir","set_parent_dir","to_owned","try_from","try_into","type_id","0","0"],"q":["fs_node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fs_node::FileOrDir",""],"d":["","A reference to any type that implements the <code>Directory</code> …","Trait for directories, implementors of Directory must also …","","","Allows us to return a generic type that can be matched by …","A reference to any type that implements the <code>File</code> trait, …","A trait that covers any filesystem node, both files and …","A weak reference to any type that implements the <code>Directory</code> …","A weak reference to any type that implements the <code>File</code> …","Returns a view of this file as an immutable memory-mapped …","","","","","","Returns the argument unchanged.","Gets either the file or directory in this <code>Directory</code>  on …","Recursively gets the absolute pathname as a String","","Like <code>Directory::get()</code>, but only looks for <strong>directories</strong> …","Like <code>Directory::get()</code>, but only looks for <strong>files</strong> matching …","Returns the string name of the node","","Returns the parent directory of the current node.","","Inserts the given new file or directory into this …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this is a <code>Directory</code>, <code>false</code> if it is a <code>File</code>.","Returns <code>true</code> if this is a <code>File</code>, <code>false</code> if it is a <code>Directory</code>.","Returns the length (size) in bytes of this <code>FileOrDir</code>.","Lists the names of the nodes in this directory.","Removes a file or directory from this directory and …","Sets this node’s parent directory. This is useful for …","","","","","","",""],"i":[4,0,0,0,4,0,0,0,0,0,16,4,4,4,4,4,4,17,18,4,17,17,18,4,18,4,17,4,4,4,4,17,17,18,4,4,4,4,4,19,20],"f":[0,0,0,0,0,0,0,0,0,0,[[],[[3,[1,2]]]],[[]],[[]],[4,4],[[]],[[4,5],6],[[]],[2,[[7,[4]]]],[[],8],[4,8],[2,[[7,[9]]]],[2,[[7,[10]]]],[[],8],[4,8],[[],[[7,[9]]]],[4,[[7,[9]]]],[4,[[3,[[7,[4]],2]]]],[[]],[4,11],[4,11],[4,12],[[],[[13,[8]]]],[4,[[7,[4]]]],[14],[[4,14]],[[]],[[],3],[[],3],[[],15],0,0],"p":[[3,"MappedPages"],[15,"str"],[4,"Result"],[4,"FileOrDir"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"String"],[6,"DirRef"],[6,"FileRef"],[15,"bool"],[15,"usize"],[3,"Vec"],[6,"WeakDirRef"],[3,"TypeId"],[8,"File"],[8,"Directory"],[8,"FsNode"],[13,"File"],[13,"Dir"]]},\
"gdt":{"doc":"","t":[4,4,3,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["AvailableSegmentSelector","Descriptor","Gdt","KernelCode","KernelData","SystemSegment","Tss","UserCode32","UserCode64","UserData32","UserData64","UserSegment","add_entry","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_and_load_tss_gdt","create_gdt","fmt","fmt","from","from","from","get","into","into","into","kernel_code_segment","kernel_data_segment","load","new","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","tss_segment","type_id","type_id","type_id","user_code_32_segment","user_code_64_segment","user_data_32_segment","user_data_64_segment","0","0","1"],"q":["gdt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gdt::Descriptor","",""],"d":["The GDT <code>SegmentSelector</code>s available in Theseus.","The two kinds of descriptor entries in the GDT.","The Global Descriptor Table, as specified by the x86_64 …","","","SystemSegment is used only for TSS.","","","","","","UserSegment is used for both code and data segments,  in …","","","","","","","","","","This function first creates and sets up a new TSS with the …","Creates and sets up a new GDT that refers to the given <code>TSS</code>…","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the requested <code>SegmentSelector</code>, or <code>None</code> if it hasn…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,5,5,2,5,5,5,5,5,2,1,1,2,5,1,2,5,5,5,0,0,1,5,1,2,5,5,1,2,5,2,2,1,1,5,1,1,2,5,1,2,5,2,1,2,5,2,2,2,2,16,17,17],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[[]],[[6,7,7]],[8],[[1,9],[[11,[10]]]],[[5,9],12],[[]],[[]],[[]],[5,[[13,[4]]]],[[]],[[]],[[]],[[],2],[[],2],[1],[[],1],[[]],[[],14],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[8,2],[[],15],[[],15],[[],15],[[],2],[[],2],[[],2],[[],2],0,0,0],"p":[[3,"Gdt"],[4,"Descriptor"],[4,"PrivilegeLevel"],[3,"SegmentSelector"],[4,"AvailableSegmentSelector"],[15,"u8"],[3,"VirtualAddress"],[3,"TaskStateSegment"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[4,"Option"],[3,"String"],[3,"TypeId"],[13,"UserSegment"],[13,"SystemSegment"]]},\
"heap":{"doc":"The global allocator for the system.  It starts off as a …","t":[7,17,3,11,11,11,11,11,11,5,11,5,11,11,11],"n":["GLOBAL_ALLOCATOR","HEAP_FLAGS","Heap","alloc","borrow","borrow_mut","dealloc","empty","from","init_single_heap","into","set_allocator","try_from","try_into","type_id"],"q":["heap","","","","","","","","","","","","","",""],"d":["","The heap mapped pages should be writable","The heap which is used as a global allocator for the …","","","","","Returns a heap in which only an empty initial allocator …","Returns the argument unchanged.","Initializes the single heap, which is the first heap used …","Calls <code>U::from(self)</code>.","Sets a new default allocator to be used by the global …","","",""],"i":[0,0,0,1,1,1,1,1,1,0,1,0,1,1,1],"f":[0,0,0,[[1,2],3],[[]],[[]],[[1,3,2]],[[],1],[[]],[[4,4]],[[]],[[[6,[5]]]],[[],7],[[],7],[[],8]],"p":[[3,"Heap"],[3,"Layout"],[15,"u8"],[15,"usize"],[8,"GlobalAlloc"],[3,"Box"],[4,"Result"],[3,"TypeId"]]},\
"heapfile":{"doc":"An implementation of in-memory files, backed by heap …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["HeapFile","as_mapping","borrow","borrow_mut","flush","from","from_vec","get_name","get_parent_dir","into","len","new","read_at","set_parent_dir","try_from","try_into","type_id","write_at"],"q":["heapfile","","","","","","","","","","","","","","","","",""],"d":["A file in memory that is backed by the heap, i.e., a <code>Vec</code>.","","","","","Returns the argument unchanged.","Creates a new <code>HeapFile</code> in the given <code>parent</code> directory with …","","","Calls <code>U::from(self)</code>.","","Creates a new file with empty content in the given <code>parent</code> …","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,[[4,[2,3]]]],[[]],[[]],[1,[[4,[5]]]],[[]],[[[7,[6]],8,9],[[4,[10,3]]]],[1,8],[1,[[11,[9]]]],[[]],[1,12],[[8,9],[[4,[10,3]]]],[[1,12],[[4,[12,5]]]],[[1,13]],[[],4],[[],4],[[],14],[[1,12],[[4,[12,5]]]]],"p":[[3,"HeapFile"],[3,"MappedPages"],[15,"str"],[4,"Result"],[4,"IoError"],[15,"u8"],[3,"Vec"],[3,"String"],[6,"DirRef"],[6,"FileRef"],[4,"Option"],[15,"usize"],[6,"WeakDirRef"],[3,"TypeId"]]},\
"hpet":{"doc":"Support for the x86 HPET: High Precision Event Timer.","t":[17,3,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,11,11,5,5,5,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11],"n":["HPET_SIGNATURE","Hpet","HpetAcpiTable","HpetTimer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","comparator_value","configuration_and_capability","counter_period_femtoseconds","enable_counter","fmt","from","from","from","fsb_interrupt_route","general_capabilities_and_id","general_configuration","general_interrupt_status","get","get_counter","get_hpet","get_hpet_mut","handle","init_hpet","into","into","into","main_counter_value","num_timers","timers","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vendor_id"],"q":["hpet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A structure that offers access to HPET through its I/O …","The structure of the HPET ACPI table.","A structure that wraps HPET I/O register for each timer …","","","","","","","","","This timer’s Comparator Value register.","This timer’s Configuration and Capability register.","Returns the period of the HPET counter in femtoseconds, …","Turns on or off the main counter","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This timer’s FSB Interrupt Route register. Some info …","The General Capabilities and ID Register, at offset 0x0.","The General Configuration Register, at offset 0x10.","The General Interrupt Status Register, at offset 0x20.","Finds the HPET in the given <code>AcpiTables</code> and returns a …","Returns the HPET’s main counter value","Returns a reference to the HPET timer structure, wrapped …","Returns a mutable reference to the HPET timer structure, …","The handler for parsing the HPET table and adding it to …","Initializes the HPET counter-based timer based on the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The Main Counter Value Register, at offset 0xF0.","","The timers (comparators) available for separate. There is …","","","","","","","","","","",""],"i":[0,0,0,0,2,24,1,2,24,1,1,1,24,24,2,2,1,2,24,1,24,2,2,2,1,2,0,0,0,1,2,24,1,2,2,2,1,2,24,1,2,24,1,2,24,1,2],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],0,0,[2,3],[[2,4]],[[1,5],6],[[]],[[]],[[]],0,0,0,0,[7,[[8,[1]]]],[2,9],[[],[[8,[[12,[[11,[10,2]]]]]]]],[[],[[8,[[13,[[11,[10,2]]]]]]]],[[7,14,15,16],[[18,[17]]]],[[1,19],[[18,[20,17]]]],[[]],[[]],[[]],0,[2,21],0,[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],22],[[],22],[[],22],[2,23]],"p":[[3,"HpetAcpiTable"],[3,"Hpet"],[15,"u32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"AcpiTables"],[4,"Option"],[15,"u64"],[3,"MappedPages"],[6,"BoxRefMut"],[3,"RwLockReadGuard"],[6,"RwLockWriteGuard"],[6,"AcpiSignature"],[15,"usize"],[3,"PhysicalAddress"],[15,"str"],[4,"Result"],[3,"PageTable"],[6,"RwLock"],[15,"u8"],[3,"TypeId"],[15,"u16"],[3,"HpetTimer"]]},\
"http_client":{"doc":"Functions for creating and sending HTTP requests and …","t":[3,6,3,11,11,11,11,11,11,5,11,11,11,12,11,11,11,12,12,5,12,11,11,11,11,11,11],"n":["ConnectedTcpSocket","HttpRequest","HttpResponse","as_result","as_result_err_str","borrow","borrow","borrow_mut","borrow_mut","check_http_request","from","from","header_bytes","header_length","into","into","new","packet","reason","send_request","status_code","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["http_client","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A convenience struct that packages together a connected …","TODO: create a proper HttpRequest type with header …","An HttpResponse that has been fully received from a remote …","Returns the content of this <code>HttpResponse</code> as a <code>Result</code>,  in …","A convenience function that just returns a standard Err …","","","","","Checks to see if the provided HTTP request can be properly …","Returns the argument unchanged.","Returns the argument unchanged.","","The length of all headers","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ConnectedTcpSocket</code> with the given necessary …","The actual array of raw bytes received from the server,  …","The reason, e.g., “OK”, “File not found”","Sends the given HTTP request over the network via the …","The status code, e.g., 200, 404","","","","","",""],"i":[0,0,0,1,1,1,8,1,8,0,1,8,1,1,1,8,8,1,1,0,1,1,8,1,8,1,8],"f":[0,0,0,[1,2],[1,[[2,[3]]]],[[]],[[]],[[]],[[]],[[],4],[[]],[[]],[1],0,[[]],[[]],[[5,6,7],[[2,[8,3]]]],0,0,[[9,8,[11,[10]]],[[2,[1,3]]]],0,[[],2],[[],2],[[],2],[[],2],[[],12],[[],12]],"p":[[3,"HttpResponse"],[4,"Result"],[15,"str"],[15,"bool"],[6,"NetworkInterfaceRef"],[3,"Set"],[3,"Handle"],[3,"ConnectedTcpSocket"],[6,"HttpRequest"],[15,"u64"],[4,"Option"],[3,"TypeId"]]},\
"intel_ethernet":{"doc":"Definitions of descriptor types and type aliases for NIC …","t":[0,3,3,3,3,17,17,8,17,17,17,17,17,17,17,17,17,17,17,8,11,11,11,11,11,11,11,11,12,12,12,12,12,12,10,11,11,12,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,10,11,11,11,11,11,11,11,11,10,11,11,12,12,12,12,12,12,12,10,11,11,10,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11],"n":["descriptors","AdvancedRxDescriptor","AdvancedTxDescriptor","LegacyRxDescriptor","LegacyTxDescriptor","RX_STATUS_DD","RX_STATUS_EOP","RxDescriptor","TX_CMD_DEXT","TX_CMD_EOP","TX_CMD_IC","TX_CMD_IDE","TX_CMD_IFCS","TX_CMD_RPS","TX_CMD_RS","TX_CMD_VLE","TX_DTYP_ADV","TX_PAYLEN_SHIFT","TX_STATUS_DD","TxDescriptor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum","cmd","cso","css","data_len","dcmd","descriptor_done","descriptor_done","descriptor_done","dtyp_mac_rsv","end_of_packet","end_of_packet","end_of_packet","errors","fmt","fmt","fmt","fmt","from","from","from","from","get_ext_error","get_ext_status","get_fdf_id","get_hdr_len","get_packet_type","get_pkt_len","get_rsccnt","get_rss_hash","get_rss_type","get_sph","get_vlan_tag","header_buffer_address","init","init","init","init","init","init","into","into","into","into","length","length","length","length","length","packet_buffer_address","packet_buffer_address","paylen_popts_cc_idx_sta","phys_addr","phys_addr","reset_status","reset_status","reset_status","send","send","send","set_packet_address","set_packet_address","set_packet_address","status","status","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vlan","vlan","wait_for_packet_tx","wait_for_packet_tx","wait_for_packet_tx"],"q":["intel_ethernet","intel_ethernet::descriptors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The different descriptor types used by Intel NICs. Usually …","Advanced Receive Descriptor used in the Ixgbe driver. It …","Advanced Transmit Descriptor used by the <code>ixgbe</code> NIC driver.","This struct is a Legacy Receive Descriptor.  The driver …","This struct is a Legacy Transmit Descriptor.  It’s the …","Rx Status: Descriptor Done","Rx Status: End of Packet","A trait for the minimum set of functions needed to receive …","Tx Command: Descriptor Extension (Advanced format)","Tx Command: End of Packet","Tx Command: Insert Checksum","Tx Command: Interrupt Delay Enable","Tx Command: Insert MAC FCS","Tx Command: Report Packet Sent","Tx Command: Report Status","Tx Command: VLAN Packet Enable","Tx Descriptor Type: advanced","Tx Descriptor paylen shift The paylen is located at bit 46 …","Tx Status: descriptor Done","A trait for the minimum set of functions needed to …","","","","","","","","","Checksum value of the packet after the IP header till the …","Command bits","Checksum offset: where to insert the checksum from the …","Checksum start: where to begin computing the checksum, if …","Length of data buffer","Command bits","Returns true if the descriptor has a received packet …","","","A multi-part field:","Returns true if the descriptor’s packet buffer is the …","","","Receive errors","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Write Back mode function for the Advanced Receive …","Starting physcal address of the receive buffer for the …","Initializes a receive descriptor by clearing its status  …","Initializes a transmit descriptor by clearing all of its …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The length of the packet in the descriptor’s packet …","","","Length of the transmit buffer in bytes","Length of the receive buffer in bytes","Starting physcal address of the receive buffer for the …","Starting physical address of the receive buffer for the …","A multi-part field:","The starting physical address of the transmit buffer","The starting physical address of the receive buffer","Clears the status bits of the descriptor.","","","Updates the transmit descriptor to send the packet. We …","","","Updates the descriptor’s physical address.","","","Status bits","Status bits which tell if the descriptor has been used","","","","","","","","","","","","","Vlan tags ","Vlan tags","Polls the Descriptor Done bit until the packet has been …","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,3,7,4,2,3,7,2,4,4,4,7,7,13,2,3,7,13,2,3,2,4,2,3,7,4,2,3,7,3,3,3,3,3,3,3,3,3,3,3,3,13,14,4,2,3,7,4,2,3,7,13,2,3,4,2,3,7,7,4,2,13,2,3,14,4,7,13,2,3,4,2,4,2,3,7,4,2,3,7,4,2,3,7,4,2,14,4,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],1],[2,1],[3,1],0,[[],1],[2,1],[3,1],0,[[4,5],6],[[2,5],6],[[3,5],6],[[7,5],6],[[]],[[]],[[]],[[]],[3,8],[3,8],[3,8],[3,8],[3,8],[3,8],[3,8],[3,8],[3,8],[3,1],[3,8],0,[9],[[]],[4],[[2,9]],[[3,9]],[7],[[]],[[]],[[]],[[]],[[],8],[2,8],[3,8],0,0,0,0,0,0,0,[[]],[2],[3],[[9,10]],[[4,9,10]],[[7,9,10]],[9],[[2,9]],[[3,9]],0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],0,0,[[]],[4],[7]],"p":[[15,"bool"],[3,"LegacyRxDescriptor"],[3,"AdvancedRxDescriptor"],[3,"LegacyTxDescriptor"],[3,"Formatter"],[6,"Result"],[3,"AdvancedTxDescriptor"],[15,"u64"],[3,"PhysicalAddress"],[15,"u16"],[4,"Result"],[3,"TypeId"],[8,"RxDescriptor"],[8,"TxDescriptor"]]},\
"interrupts":{"doc":"Basic interrupt handling structures and simple handler …","t":[7,7,17,5,5,5,5,5,5,5],"n":["APIC_TIMER_TICKS","IDT","IRQ_BASE_OFFSET","deregister_interrupt","eoi","init","init_ap","is_exception_handler_with_error_code","register_interrupt","register_msi_interrupt"],"q":["interrupts","","","","","","","","",""],"d":["","The single system-wide Interrupt Descriptor Table (IDT).","The offset added to the first IRQ: <code>0x20</code>.","Deregisters an interrupt handler, making it available to …","Send an end of interrupt signal, notifying the interrupt …","Initializes the interrupt subsystem and sets up an initial …","Similar to <code>init()</code>, but for APs to call after the BSP has …","Returns <code>true</code> if the given address is the exception handler …","Registers an interrupt handler at the given IRQ interrupt …","Allocates and returns an unused interrupt number and sets …"],"i":[0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,[[1,2],[[4,[3]]]],[[[5,[1]]]],[[6,6],[[4,[7,3]]]],[[1,6,6],[[4,[7,3]]]],[8,9],[[1,2],[[4,[8]]]],[2,[[4,[1,3]]]]],"p":[[15,"u8"],[6,"HandlerFunc"],[15,"str"],[4,"Result"],[4,"Option"],[3,"VirtualAddress"],[3,"LockedIdt"],[15,"u64"],[15,"bool"]]},\
"io":{"doc":"Traits and types for expressing I/O transfers of both …","t":[3,8,8,8,8,3,3,8,3,13,4,8,3,13,3,3,13,3,12,10,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12],"n":["BlockByteTransfer","BlockIo","BlockReader","BlockWriter","ByteReader","ByteReaderWrapper","ByteReaderWriterWrapper","ByteWriter","ByteWriterWrapper","InvalidInput","IoError","KnownLength","LockableIo","Other","Reader","ReaderWriter","TimedOut","Writer","block_range","block_size","block_size","block_size","block_size","block_size","block_size","block_size","block_size","blocks_from_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_range_absolute","bytes_in_block_range","clone","clone_into","deref","deref","deref_mut","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","len","len","len","len","len","len","len","len","new","new","new","read","read","read","read","read_at","read_at","read_at","read_at","read_at","read_at","read_at","read_blocks","read_blocks","read_blocks","read_blocks","read_blocks","read_blocks","read_blocks","round_down","round_up","seek","seek","seek","seek","seek","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write_at","write_at","write_at","write_at","write_at","write_at","write_at","write_blocks","write_blocks","write_blocks","write_blocks","write_blocks","write_blocks","write_blocks","write_str","write_str","0"],"q":["ioio::IoError"],"d":["Describes an operation for performing byte-wise I/O on a …","A parent trait used to specify the block size (in bytes) …","A trait that represents an I/O stream (e.g., an I/O …","A trait that represents an I/O stream (e.g., an I/O …","A trait that represents an I/O stream that can be read …","A wrapper struct that implements a byte-wise reader atop a …","A wrapper struct that implements a byte-wise reader and …","A trait that represents an I/O stream that can be written …","A wrapper struct that implements a byte-wise writer atop a …","An input parameter or argument was incorrect or invalid.","Errors that can be returned from I/O operations.","A trait that represents an I/O stream that has a known …","A struct that holds an IO object wrapped in a <code>Lockable</code> …","A miscellaneous error occurred.","A stateful reader that keeps track of its current offset …","A readable and writable “stateful” I/O stream that …","The I/O operation timed out and was canceled.","A stateful writer that keeps track of its current offset …","The range of blocks to transfer.","Returns the size in bytes of a single block (i.e., sector),","","","","","","","","Calculates block-wise bounds for an I/O transfer  based on …","","","","","","","","","","","","","","","","","","","The byte-wise range specified in absolute bytes from the …","The range of bytes relative to the blocks specified by …","","","","","","Flushes this entire writer’s output stream,  ensuring …","Flushes this writer’s output stream,  ensuring all …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length (size in bytes) of this I/O stream or …","","","","","","","","Creates a new <code>ReaderWriter</code> with an initial offset of 0.","Creates a new <code>Reader</code> with an initial offset of 0.","Creates a new <code>Writer</code> with an initial offset of 0.","","","","","Reads bytes of data from this reader into the given <code>buffer</code>.","","","","","","","Reads blocks of data from this reader into the given <code>buffer</code>…","","","","","","","Rounds the given <code>value</code> down to the nearest <code>multiple</code>.","Rounds the given <code>value</code> up to the nearest <code>multiple</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes bytes of data from the given <code>buffer</code> to this writer.","","","","","","","Writes blocks of data from the given <code>buffer</code> to this writer.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,10,0,0,0,10,0,0,10,0,16,23,2,3,4,5,6,7,8,0,2,3,4,5,6,7,10,8,16,2,3,4,5,6,7,10,8,16,16,16,8,8,5,8,5,24,19,3,3,4,4,5,5,5,7,7,7,8,8,8,8,8,8,10,8,16,2,2,2,3,3,3,4,4,4,5,6,7,10,10,8,8,8,16,2,3,4,5,6,7,10,8,16,25,2,3,4,5,6,7,8,5,6,7,5,6,8,8,26,2,3,5,6,8,8,27,2,3,5,6,8,8,0,0,5,6,7,8,8,8,2,3,4,5,6,7,10,8,16,2,3,4,5,6,7,10,8,16,2,3,4,5,6,7,10,8,16,5,7,8,8,19,3,4,5,7,8,8,24,3,4,5,7,8,8,8,8,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[[[9,[1]],1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[8,8],[[]],[5],[8],[5],[[],[[11,[10]]]],[[],[[11,[10]]]],[3,[[11,[10]]]],[3,[[11,[10]]]],[4,[[11,[10]]]],[4,[[11,[10]]]],[5,12],[5,[[11,[10]]]],[5,[[11,[10]]]],[7,12],[7,[[11,[10]]]],[7,[[11,[10]]]],[8,[[11,[10]]]],[8,12],[8,[[11,[10]]]],[8,[[11,[10]]]],[8,12],[8,[[11,[10]]]],[[10,13],14],[[[8,[15,15,15]],13],14],[[16,13],14],[[]],[17],[[],2],[[],3],[17],[[]],[17],[[],4],[[]],[[]],[[]],[[]],[[]],[18,10],[[]],[17],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[[],5],[[],6],[19,[[7,[19]]]],[5,[[12,[1]]]],[6,[[12,[1]]]],[8,[[12,[1]]]],[8,[[12,[1]]]],[1,[[11,[1,10]]]],[[2,1],[[11,[1,10]]]],[[3,1],[[11,[1,10]]]],[[5,1],[[11,[1,10]]]],[[6,1],[[11,[1,10]]]],[[8,1],[[11,[1,10]]]],[[8,1],[[11,[1,10]]]],[1,[[11,[1,10]]]],[[2,1],[[11,[1,10]]]],[[3,1],[[11,[1,10]]]],[[5,1],[[11,[1,10]]]],[[6,1],[[11,[1,10]]]],[[8,1],[[11,[1,10]]]],[[8,1],[[11,[1,10]]]],[[1,1],1],[[1,1],1],[[5,20],[[12,[21]]]],[[6,20],[[12,[21]]]],[[7,20],[[12,[21]]]],[[8,20],[[12,[21]]]],[[8,20],[[12,[21]]]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[5,[[12,[1]]]],[7,[[12,[1]]]],[8,[[12,[1]]]],[8,[[12,[1]]]],[1,[[11,[1,10]]]],[[3,1],[[11,[1,10]]]],[[4,1],[[11,[1,10]]]],[[5,1],[[11,[1,10]]]],[[7,1],[[11,[1,10]]]],[[8,1],[[11,[1,10]]]],[[8,1],[[11,[1,10]]]],[1,[[11,[1,10]]]],[[3,1],[[11,[1,10]]]],[[4,1],[[11,[1,10]]]],[[5,1],[[11,[1,10]]]],[[7,1],[[11,[1,10]]]],[[8,1],[[11,[1,10]]]],[[8,1],[[11,[1,10]]]],[[8,18],14],[[8,18],14],0],"p":[[15,"usize"],[3,"ByteReaderWrapper"],[3,"ByteReaderWriterWrapper"],[3,"ByteWriterWrapper"],[3,"ReaderWriter"],[3,"Reader"],[3,"Writer"],[3,"LockableIo"],[3,"Range"],[4,"IoError"],[4,"Result"],[6,"Result"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"BlockByteTransfer"],[15,"never"],[15,"str"],[8,"ByteWriter"],[4,"SeekFrom"],[15,"u64"],[3,"TypeId"],[8,"BlockIo"],[8,"BlockWriter"],[8,"KnownLength"],[8,"ByteReader"],[8,"BlockReader"],[13,"Other"]]},\
"ioapic":{"doc":"","t":[3,11,11,11,11,5,5,5,11,11,12,11,11,11,11,11,11,11,11],"n":["IoApic","arbitration_id","borrow","borrow_mut","from","get_first_ioapic","get_ioapic","get_ioapics","handles_irq","id","id","into","mask_irq","new","set_irq","try_from","try_into","type_id","version"],"q":["ioapic","","","","","","","","","","","","","","","","","",""],"d":["A representation of an IoApic (x86-specific interrupt chip …","gets this IoApic’s arbitration id.","","","Returns the argument unchanged.","Returns the first <code>IoApic</code> that was created, if any, after …","If an <code>IoApic</code> with the given <code>id</code> exists, then lock it …","Returns a reference to the list of IoApics.","Returns whether this IoApic handles the given <code>irq_num</code>, …","gets this IoApic’s id.","The ID of this IoApic.","Calls <code>U::from(self)</code>.","Masks (disables) the given IRQ line.  NOTE: this function …","Creates a new IoApic struct from the given <code>id</code>, …","Set IRQ to an interrupt vector.","","","","gets this IoApic’s version."],"i":[0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,2],[[]],[[]],[[]],[[],[[4,[[3,[1]]]]]],[5,[[4,[[3,[1]]]]]],[[],6],[[1,2],7],[1,2],0,[[]],[[1,5]],[[8,5,9,2],[[11,[10]]]],[[1,5,5,5]],[[],11],[[],11],[[],12],[1,2]],"p":[[3,"IoApic"],[15,"u32"],[3,"MutexGuard"],[4,"Option"],[15,"u8"],[3,"AtomicMap"],[15,"bool"],[3,"PageTable"],[3,"PhysicalAddress"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"iommu":{"doc":"Intel VT-d (IOMMU) implementation.","t":[3,11,11,11,5,11,5,11,11,11],"n":["IntelIommu","borrow","borrow_mut","from","init","into","iommu_present","try_from","try_into","type_id"],"q":["iommu","","","","","","","","",""],"d":["Struct representing IOMMU (TODO: rename since this is …","","","Returns the argument unchanged.","Initialize the IOMMU hardware.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if an IOMMU exists and has been initialized.","","",""],"i":[0,9,9,9,0,9,0,9,9,9],"f":[0,[[]],[[]],[[]],[[1,2,3,4],[[6,[5]]]],[[]],[[],7],[[],6],[[],6],[[],8]],"p":[[15,"u8"],[15,"u16"],[3,"PhysicalAddress"],[3,"PageTable"],[15,"str"],[4,"Result"],[15,"bool"],[3,"TypeId"],[3,"IntelIommu"]]},\
"ixgbe":{"doc":"An ixgbe driver for a 82599 10GbE Network Interface Card.","t":[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,17,17,7,17,17,3,13,13,13,13,4,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,0,11,11,11,11,11,11,11,11,11,5,11,11,11,11,0,5,5,5,5],"n":["Buffer10KiB","Buffer11KiB","Buffer12KiB","Buffer13KiB","Buffer14KiB","Buffer15KiB","Buffer16KiB","Buffer1KiB","Buffer2KiB","Buffer3KiB","Buffer4KiB","Buffer5KiB","Buffer6KiB","Buffer7KiB","Buffer8KiB","Buffer9KiB","FilterProtocol","INTEL_82599","INTEL_VEND","IXGBE_NICS","IXGBE_NUM_RX_QUEUES_ENABLED","IXGBE_NUM_TX_QUEUES_ENABLED","IxgbeNic","LS100","LS1000","LS10000","LSUnknown","LinkSpeedMbps","Other","RxBufferSizeKiB","Sctp","Tcp","Udp","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","device_id","enable_rss","eq","from","from","from","from","get_ixgbe_nic","get_ixgbe_nics_list","get_received_frame","get_stats","init","into","into","into","into","link_speed","link_status","mac_address","mem_map_msix","poll_receive","rx_poll_mq","send_packet","set_5_tuple_filter","spoof_mac","test_packets","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_send_mq","type_id","type_id","type_id","type_id","virtual_function","create_dhcp_test_packet","create_raw_packet","dhcp_request_packet","create_virtual_nic"],"q":["ixgbe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ixgbe::test_packets","","","ixgbe::virtual_function"],"d":["","","","","","","","","","","","","","","","","Options for the filter protocol used in the 5-tuple …","Device ID for the 82599ES, used to identify the device …","Vendor ID for Intel","All the 82599 NICs found in the PCI space are initialized …","The number of receive queues that are enabled.  Do NOT set …","The number of transmit queues that are enabled.  Do NOT …","A struct representing an ixgbe network interface card.","","","","","Possible link speeds of the 82599 NIC","","The set of receive buffer sizes that are accepted by the …","","","","","","","","","","","","","","Returns the device id of the PCI device.","Enable multiple receive queues with RSS. Part of queue …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the IxgbeNic wrapped in a …","Returns a reference to the list of all initialized ixgbe …","","Returns the Rx and Tx statistics in the form: (Good Rx …","Store required values from the device’s PCI config …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns link speed in Mb/s","Returns value of (links, links2) registers","","Returns the memory mapped msix vector table","","A helper function to poll the nic receive queues (only for …","","Sets the L3/L4 5-tuple filter which can do an exact match …","","A set of functions to create packets for testing the NIC …","","","","","","","","","","A helper function to send a test packet on a nic transmit …","","","","","Interface for an application to request a <code>VirtualNIC</code> from …","Creates a <code>TransmitBuffer</code> containing a dhcp packet.","Creates a <code>TransmitBuffer</code> that contains a packet with only …","Sends a dhcp request packet on the ixgbe NIC.","Create a virtual NIC from the ixgbe device."],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,6,6,6,6,0,19,0,19,19,19,2,19,6,1,2,19,6,1,1,1,2,2,6,2,19,6,1,0,0,2,2,2,2,19,6,1,2,2,2,2,2,0,2,2,2,0,1,2,19,6,1,2,19,6,1,0,2,19,6,1,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],[2,3],0,[[6,6],7],[[]],[[]],[[]],[[]],[3,[[5,[8,4]]]],[[],[[10,[9]]]],[2,[[10,[11]]]],[2],[[12,3,7,[10,[[9,[13]]]],7,1,14,14],[[5,[[8,[2]],4]]]],[[]],[[]],[[]],[[]],[2,6],[2],[2],[12,[[5,[[16,[15,0]],4]]]],[2,[[5,[4]]]],[[17,3],[[5,[11,4]]]],[[2,18],[[5,[4]]]],[[2,10,10,[10,[14]],[10,[14]],[10,[19]],20,20],[[5,[20,4]]]],[2],0,[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[17,3,[10,[18]]],[[5,[4]]]],[[],21],[[],21],[[],21],[[],21],0,[[],[[5,[18,4]]]],[[],[[5,[18,4]]]],[3,[[5,[4]]]],[[3,9,17,17],[[5,[[24,[0,22,0,23]],4]]]]],"p":[[4,"RxBufferSizeKiB"],[3,"IxgbeNic"],[3,"PciLocation"],[15,"str"],[4,"Result"],[4,"LinkSpeedMbps"],[15,"bool"],[3,"MutexIrqSafe"],[3,"Vec"],[4,"Option"],[3,"ReceivedFrame"],[3,"PciDevice"],[6,"HandlerFunc"],[15,"u16"],[3,"MappedPages"],[6,"BoxRefMut"],[15,"usize"],[3,"TransmitBuffer"],[4,"FilterProtocol"],[15,"u8"],[3,"TypeId"],[3,"AdvancedRxDescriptor"],[3,"AdvancedTxDescriptor"],[3,"VirtualNic"]]},\
"kernel_config":{"doc":"","t":[0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],"n":["display","memory","time","FRAMEBUFFER_MAX_RESOLUTION","ADDRESSABILITY_PER_P4_ENTRY","BYTES_PER_ADDR","ENTRIES_PER_PAGE_TABLE","KERNEL_HEAP_INITIAL_SIZE","KERNEL_HEAP_MAX_SIZE","KERNEL_HEAP_P4_INDEX","KERNEL_HEAP_START","KERNEL_OFFSET","KERNEL_STACK_ALLOCATOR_BOTTOM","KERNEL_STACK_ALLOCATOR_TOP_ADDR","KERNEL_STACK_P4_INDEX","KERNEL_STACK_SIZE_IN_PAGES","KERNEL_TEXT_MAX_SIZE","KERNEL_TEXT_P4_INDEX","KERNEL_TEXT_START","MAX_PAGE_NUMBER","MAX_VIRTUAL_ADDRESS","P1_INDEX_SHIFT","P2_INDEX_SHIFT","P3_INDEX_SHIFT","P4_INDEX_SHIFT","PAGE_SHIFT","PAGE_SIZE","RECURSIVE_P4_INDEX","TEMPORARY_PAGE_VIRT_ADDR","USER_STACK_ALLOCATOR_BOTTOM","USER_STACK_ALLOCATOR_TOP_ADDR","USER_STACK_P4_INDEX","CONFIG_HEARTBEAT_PERIOD_MS","CONFIG_PIT_FREQUENCY_HZ","CONFIG_RTC_FREQUENCY_HZ","CONFIG_TIMESLICE_PERIOD_MICROSECONDS"],"q":["kernel_config","","","kernel_config::display","kernel_config::memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","kernel_config::time","","",""],"d":["","WARNING: DO NOT USE ANY ADDRESS THAT MAPS TO THE SAME P4 …","","The maximum resolution <code>(width, height)</code> of the graphical …","Value: 512 GiB.","64-bit architecture results in 8 bytes per address.","Value: 512. ","","the kernel heap gets the whole 509th P4 entry.","Value: 509. The 509th entry is used for the kernel heap","The higher-half heap gets the 512GB address range starting …","The virtual address where the initial kernel (the …","the kernel stack allocator gets the 508th P4 entry of …","the highest actually usuable address in the kernel stack …","Value: 508. The 508th entry is used for all kernel stacks","","The size in bytes, not in pages.","Value: 511. The 511th entry is used for kernel text …","The kernel text region is where we load kernel modules.  …","","","Value: 0. Shift the Page number (not the address!) by this …","Value: 9. Shift the Page number (not the address!) by this …","Value: 18. Shift the Page number (not the address!) by …","Value: 27. Shift the Page number (not the address!) by …","The lower 12 bits of a virtual address correspond to the …","Page size is 4096 bytes, 4KiB pages.","Value: 510. The 510th entry is used for the recursive P4 …","","the userspace stack allocators (one per userspace task) …","the highest actually usuable address in each userspace …","Value: 507. The 507th entry is used for all userspace …","the heartbeat period in milliseconds","the chosen interrupt frequency (in Hertz) of the PIT clock ","the chosen interrupt frequency (in Hertz) of the RTC. …","The timeslice period, specified in microseconds."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[]},\
"keyboard":{"doc":"A basic driver for a keyboard connected to the legacy PS2 …","t":[5],"n":["init"],"q":["keyboard"],"d":["Initialize the PS2 keyboard driver and register its …"],"i":[0],"f":[[[[2,[1]]],[[4,[3]]]]],"p":[[4,"Event"],[3,"Queue"],[15,"str"],[4,"Result"]]},\
"keycodes_ascii":{"doc":"","t":[13,18,18,13,13,13,13,13,13,18,18,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,17,4,3,3,4,13,13,13,13,13,13,13,13,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,18,18,18,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["A","ALT","ALT_GR","Alt","B","Backslash","Backspace","Backtick","C","CAPS_LOCK","CONTROL_LEFT","CONTROL_RIGHT","CapsLock","Comma","Control","D","Delete","Down","E","End","Enter","Equals","Escape","F","F1","F10","F11","F12","F2","F3","F4","F5","F6","F7","F8","F9","G","H","Home","I","Insert","J","K","KEY_RELEASED_OFFSET","KeyAction","KeyEvent","KeyboardModifiers","Keycode","L","Left","LeftBracket","LeftShift","M","Menu","Minus","N","NUM_LOCK","NonUsBackslash","Num0","Num1","Num2","Num3","Num4","Num5","Num6","Num7","Num8","Num9","NumLock","O","OverflowError","P","Pad5","PadMinus","PadMultiply","PadPlus","PageDown","PageUp","Pause","Period","Pressed","Q","Quote","R","Released","Right","RightBracket","RightShift","S","SCROLL_LOCK","SHIFT_LEFT","SHIFT_RIGHT","SUPER_KEY_LEFT","SUPER_KEY_RIGHT","ScrollLock","Semicolon","Slash","Space","SuperKeyLeft","SuperKeyRight","T","Tab","U","Unknown1","Unknown2","Unknown3","Up","V","W","X","Y","Z","action","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","complement","contains","default","difference","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_scancode","hash","insert","intersection","intersects","into","into","into","into","is_all","is_alt","is_alt_gr","is_caps_lock","is_control","is_empty","is_letter","is_num_lock","is_scroll_lock","is_shift","is_super_key","keycode","modifiers","ne","new","new","not","partial_cmp","remove","scancode_to_ascii","set","sub","sub_assign","symmetric_difference","to_ascii","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union"],"q":["keycodes_asciid":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The offset that a keyboard adds to the scancode to …","Whether a keyboard event was a key press or a key released.","The KeyEvent that should be delivered to applications upon …","The set of modifier keys that can be held down while other …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if the <code>Alt</code> key is held down.","Returns <code>true</code> if the <code>AltGr</code> key is held down.","Returns <code>true</code> if the <code>Caps Lock</code> key is held down.","Returns <code>true</code> if a <code>Control</code> key is held down (either left or …","Returns <code>true</code> if no flags are currently stored.","returns true if this keycode was a letter from A-Z","Returns <code>true</code> if the <code>Num Lock</code> key is held down.","Returns <code>true</code> if the <code>Scroll Lock</code> key is held down.","Returns <code>true</code> if a <code>Shift</code> key is held down (either left or …","Returns <code>true</code> if a Super key is held down (either left or …","","","","Returns a new <code>KeyboardModifiers</code> struct with no keys …","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","convenience function for obtaining the ascii value for a …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Obtains the ascii value for a keycode under the given …","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>."],"i":[5,1,1,5,5,5,5,5,5,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,3,5,5,5,5,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,1,1,1,1,1,1,1,1,1,3,4,5,1,3,4,5,1,3,4,5,1,1,1,1,1,1,1,3,5,1,1,1,1,1,1,3,4,5,1,3,4,5,1,1,1,1,5,1,1,1,1,1,3,4,5,1,1,1,1,1,1,5,1,1,1,1,4,4,1,1,4,1,1,1,0,1,1,1,1,5,1,1,3,4,5,1,3,4,5,1,3,4,5,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,2],[[1,1],1],[[1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[3,3],[4,4],[5,5],[[1,1],6],[1,1],[[1,1],7],[[],1],[[1,1],1],[[],1],[[1,1],7],[[3,3],7],[[5,5],7],[[1,8]],[[1,9],10],[[1,9],10],[[1,9],10],[[1,9],10],[[1,9],10],[[3,9],10],[[4,9],10],[[5,9],10],[[]],[[]],[[]],[[]],[2,[[11,[1]]]],[2,1],[2,1],[8,1],[12,[[11,[5]]]],[1],[[1,1]],[[1,1],1],[[1,1],7],[[]],[[]],[[]],[[]],[1,7],[1,7],[1,7],[1,7],[1,7],[1,7],[5,7],[1,7],[1,7],[1,7],[1,7],0,0,[[1,1],7],[[],1],[[5,3,1],4],[1,1],[[1,1],[[11,[6]]]],[[1,1]],[[1,12],[[11,[13]]]],[[1,1,7]],[[1,1],1],[[1,1]],[[1,1],1],[[5,1],[[11,[13]]]],[[1,1]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[1,1],1]],"p":[[3,"KeyboardModifiers"],[15,"u16"],[4,"KeyAction"],[3,"KeyEvent"],[4,"Keycode"],[4,"Ordering"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"u8"],[15,"char"],[4,"Result"],[3,"TypeId"]]},\
"libterm":{"doc":"A basic terminal emulator library.","t":[17,17,13,4,3,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12],"n":["FONT_BACKGROUND_COLOR","FONT_FOREGROUND_COLOR","OffEndBound","ScrollError","Terminal","borrow","borrow","borrow_mut","borrow_mut","clear","cursor","cursor","display_cursor","from","from","get_cursor_offset_from_end","get_event","get_text_dimensions","insert_char","into","into","move_screen_line_down","move_screen_line_up","move_screen_page_down","move_screen_page_up","move_screen_to_begin","move_screen_to_end","new","print_to_terminal","refresh_display","remove_char","resize","try_from","try_from","try_into","try_into","type_id","type_id","update_cursor_pos","window","Cursor","blink","borrow","borrow_mut","default","disable","display","enable","from","into","offset_from_end","offset_from_end","reset","set_offset_from_end","set_underlying_char","show","try_from","try_into","type_id","underlying_char","underlying_char"],"q":["libterm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libterm::cursor","","","","","","","","","","","","","","","","","","","",""],"d":["","","Occurs when a index-calculation returns an index that is …","Error type for tracking different scroll errors that a …","An instance of a graphical terminal emulator.","","","","","Clear the scrollback buffer and reset the scroll positions.","","The cursor of the terminal.","Display the cursor of the terminal.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the position of the cursor relative to the end of …","Gets an event from the window’s event queue.","Gets the width and height of the text displayable in …","Insert a character to the terminal.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Scroll the screen a line down.","Scroll the screen a line up.","Scroll the screen a page down.","Scroll the screen a page up.","Scroll the screen to the very beginning.","Scroll the screen to the very end.","Creates a new terminal and adds it to the window manager …","Adds a string to be printed to the terminal to the …","Actually refresh the screen. Currently it’s expensive.","Remove a character from the terminal.","Resizes this terminal and its underlying text display and …","","","","","","","Updates the position of a cursor.","The terminal’s own window.","The cursor structure used in the terminal. A cursor is a …","Let a cursor blink. It is invoked in a loop.","","","","Disable a cursor","Display a cursor in a framebuffer","Enable a cursor","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Gets the position of the cursor relative to the end of the …","The position of the cursor relative to the end of terminal …","Reset the state of the cursor as unseen","Sets the position of the cursor relative to the end of the …","Sets the character at the position of the cursor","Whether a cursor is seen","","","","Gets the character at the position of the cursor","The underlying character at the position of the cursor. It …"],"i":[0,0,16,0,0,16,1,16,1,1,0,1,1,16,1,1,1,1,1,16,1,1,1,1,1,1,1,1,1,1,1,1,16,1,16,1,16,1,1,1,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[1],0,0,[1,[[3,[2]]]],[[]],[[]],[1,4],[1,[[6,[5]]]],[1],[[1,7,4],[[3,[2]]]],[[]],[[]],[1,[[3,[2]]]],[1,[[3,[2]]]],[1,[[3,[2]]]],[1,[[3,[2]]]],[1,[[3,[2]]]],[1,[[3,[2]]]],[[],[[3,[1,2]]]],[[1,8]],[1,[[3,[2]]]],[[1,4],[[3,[2]]]],[[1,9],[[3,[2]]]],[[],3],[[],3],[[],3],[[],3],[[],10],[[],10],[[1,4,11]],0,0,[12,13],[[]],[[]],[[],12],[12],[[12,14,4,4,15],[[3,[9,2]]]],[12],[[]],[[]],[12,4],0,[12],[[12,4]],[[12,11]],[12,13],[[],3],[[],3],[[],10],[12,11],0],"p":[[3,"Terminal"],[15,"str"],[4,"Result"],[15,"usize"],[4,"Event"],[4,"Option"],[15,"char"],[3,"String"],[3,"Rectangle"],[3,"TypeId"],[15,"u8"],[3,"Cursor"],[15,"bool"],[3,"Coord"],[3,"Framebuffer"],[4,"ScrollError"]]},\
"lockable":{"doc":"Traits for items that are “Lockable”, e.g., <code>Mutex</code>es.","t":[16,16,8,8,10,10,10,10,10,10,10],"n":["Guard","GuardMut","Lockable","LockableSized","get_mut","into_inner","is_locked","lock","lock_mut","try_lock","try_lock_mut"],"q":["lockable","","","","","","","","","",""],"d":["The immutable “guard” type returned by the <code>Self::lock()</code>…","The mutable “guard” type returned by the …","A trait representing types that can be locked, e.g., <code>Mutex</code>…","An extension of the <code>Lockable</code> trait that adds the …","Returns a mutable reference to the underlying data.","Consumes the lock, returning the underlying data.","Returns <code>true</code> if this lock is currently locked. ","Obtain the lock in a blocking fashion,  returning an …","Obtain the lock in a blocking fashion, returning a mutable …","Attempt to obtain the lock in a non-blocking fashion, …","Attempt to obtain the lock in a non-blocking fashion, …"],"i":[3,3,0,0,3,4,3,3,3,3,3],"f":[0,0,0,0,[[]],[[]],[[],1],[[]],[[]],[[],2],[[],2]],"p":[[15,"bool"],[4,"Option"],[8,"Lockable"],[8,"LockableSized"]]},\
"logger":{"doc":"A basic logger implementation for system-wide logging in …","t":[17,17,6,5,5,5,5,5,5,5],"n":["DEFAULT_LOG_LEVEL","LOG_MAX_WRITERS","LogOutputFunc","early_init","init","mirror_to_vga","set_log_level","take_early_log_writers","write_fmt","write_str"],"q":["logger","","","","","","","","",""],"d":["By default, Theseus will print all log levels, including …","The maximum number of output streams that a logger can …","The signature of a callback function that will optionally …","Initializes Theseus’s early system logger, which only …","Initialize the fully-featured Theseus system logger.","Call this to enable mirroring logging macros to the screen","Set the log level, which determines whether a given log …","Removes all of the writers (output streams) from the early …","Convenience function for writing formatted arguments to …","Convenience function for writing a simple string to the …"],"i":[0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,[[[2,[1]],3],[[5,[4]]]],[[[2,[1]],3],[[5,[4]]]],[6],[1],[[]],[7,8],[9,8]],"p":[[4,"Level"],[4,"Option"],[8,"IntoIterator"],[3,"SetLoggerError"],[4,"Result"],[6,"LogOutputFunc"],[3,"Arguments"],[6,"Result"],[15,"str"]]},\
"madt":{"doc":"Support for the MADT ACPI table,  which includes interrupt …","t":[13,13,13,13,17,3,4,3,3,3,3,3,3,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["IntSrcOverride","IoApic","LocalApic","LocalApicAddressOverride","MADT_SIGNATURE","Madt","MadtEntry","MadtIntSrcOverride","MadtIoApic","MadtIter","MadtLocalApic","MadtLocalApicAddressOverride","MadtNonMaskableInterrupt","NonMaskableInterrupt","UnknownOrCorrupt","address","apic_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bsp_init","bus_source","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","find_nmi_entry_for_processor","flags","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","gsi","gsi_base","handle","id","into","into","into","into","into","into","into","into","into_iter","irq_source","iter","lint","local_apic_phys_addr","next","phys_addr","processor","processor","sdt","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0"],"q":["madt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","madt::MadtEntry","","","","",""],"d":["A Interrupt Source Override MADT entry.","A IOAPIC MADT entry.","A Local APIC MADT entry.","A Local APIC Address Override MADT entry.","","A wrapper around the MADT ACPI table (Multiple APIC …","The set of possible MADT Entries.","MADT Interrupt Source Override","MADT I/O APIC","An <code>Iterator</code> over the dynamic entries of the MADT. Its …","MADT Local APIC","MADT Local APIC Address Override.  If this struct exists, …","MADT Non-maskable Interrupt. Use these to configure the …","A Non-Maskable Interrupt MADT entry.","The MADT table had an entry of an unknown type or …","I/O APIC address","Local APIC ID","","","","","","","","","","","","","","","","","Performs initialization functions of the IOAPIC and …","Bus Source","","","","","","","","","","","","","","","Finds the Non-Maskable Interrupt (NMI) entry in the MADT …","Returns the <code>flags</code> value in this MADT table.","Flags. 1 means that the processor is enabled","Flags","Flags","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Finds the MADT in the given <code>AcpiTables</code> and returns a …","Global system interrupt","Global system interrupt base","The handler for parsing the MADT table and adding it to …","I/O APIC ID","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","IRQ Source","Returns an <code>Iterator</code> over the MADT’s entries, which are …","LINT (either 0 or 1)","Returns the Local APIC physical address value in this MADT …","","Local APIC physical address","Processor ID","which processor this is for, 0xFF means all processors","Returns a reference to the <code>Sdt</code> header in this MADT table.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,8,7,1,5,6,7,8,9,10,11,1,5,6,7,8,9,10,11,1,9,5,6,7,8,9,10,11,5,6,7,8,9,10,11,0,1,7,9,10,6,7,8,9,10,11,1,5,6,7,8,9,10,11,1,9,8,0,8,1,5,6,7,8,9,10,11,5,9,1,10,1,5,11,7,10,1,5,6,7,8,9,10,11,1,5,6,7,8,9,10,11,1,5,6,7,8,9,10,11,1,5,6,7,8,9,10,11,23,24,25,26,27,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],[[4,[3]]]],0,[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,5]],[1,13],0,0,0,[[6,14],15],[[7,14],15],[[8,14],15],[[9,14],15],[[10,14],15],[[11,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,[[17,[1]]]],0,0,[[16,18,19,20],[[4,[3]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,5],0,[1,13],[5,17],0,0,0,[1,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0],"p":[[3,"Madt"],[3,"PageTable"],[15,"str"],[4,"Result"],[3,"MadtIter"],[4,"MadtEntry"],[3,"MadtLocalApic"],[3,"MadtIoApic"],[3,"MadtIntSrcOverride"],[3,"MadtNonMaskableInterrupt"],[3,"MadtLocalApicAddressOverride"],[15,"u8"],[15,"u32"],[3,"Formatter"],[6,"Result"],[3,"AcpiTables"],[4,"Option"],[6,"AcpiSignature"],[15,"usize"],[3,"PhysicalAddress"],[3,"Sdt"],[3,"TypeId"],[13,"LocalApic"],[13,"IoApic"],[13,"IntSrcOverride"],[13,"NonMaskableInterrupt"],[13,"LocalApicAddressOverride"],[13,"UnknownOrCorrupt"]]},\
"memfs":{"doc":"This crate contains an implementation of an in-memory …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MemFile","as_mapping","borrow","borrow_mut","flush","from","from_mapped_pages","get_name","get_parent_dir","into","len","new","read_at","set_parent_dir","try_from","try_into","type_id","write_at"],"q":["memfs","","","","","","","","","","","","","","","","",""],"d":["The struct that represents a file in memory that is backed …","","","","","Returns the argument unchanged.","Creates a new <code>MemFile</code> in the given <code>parent</code> directory with …","","","Calls <code>U::from(self)</code>.","","Allocates writable memory space for the given <code>contents</code> and …","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,[[4,[2,3]]]],[[]],[[]],[1,[[4,[5]]]],[[]],[[2,6,7,8],[[4,[9,3]]]],[1,6],[1,[[10,[8]]]],[[]],[1,7],[[6,8],[[4,[9,3]]]],[[1,7],[[4,[7,5]]]],[[1,11]],[[],4],[[],4],[[],12],[[1,7],[[4,[7,5]]]]],"p":[[3,"MemFile"],[3,"MappedPages"],[15,"str"],[4,"Result"],[4,"IoError"],[3,"String"],[15,"usize"],[6,"DirRef"],[6,"FileRef"],[4,"Option"],[6,"WeakDirRef"],[3,"TypeId"]]},\
"memory":{"doc":"This crate implements the virtual memory subsystem for …","t":[18,3,3,3,3,3,18,3,18,3,13,3,3,13,18,18,3,3,3,4,6,18,18,13,17,17,18,3,3,3,3,3,3,13,3,3,18,13,4,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["ACCESSED","AggregatedSectionMemoryBounds","AllocatedFrame","AllocatedFrames","AllocatedFramesIter","AllocatedPages","DIRTY","DeferredAllocAction","EXCLUSIVE","EntryFlags","Exclusive","Frame","FrameRange","Free","GLOBAL","HUGE_PAGE","MappedPages","Mapper","MemoryManagementInfo","MemoryRegionType","MmiRef","NO_CACHE","NO_EXECUTE","NonExclusive","PAGE_SIZE","PAGE_TABLE_ENTRY_FRAME_MASK","PRESENT","Page","PageRange","PageTable","PageTableEntry","PhysicalAddress","PhysicalMemoryRegion","Reserved","SectionMemoryBounds","TemporaryPage","USER_ACCESSIBLE","Unknown","UnmapResult","UnmappedFrames","VirtualAddress","WRITABLE","WRITE_THROUGH","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","address_at_offset","address_at_offset","all","allocate_frames","allocate_frames_at","allocate_frames_by_bytes","allocate_frames_by_bytes_at","allocate_frames_by_bytes_deferred","allocate_frames_deferred","allocate_pages","allocate_pages_at","allocate_pages_by_bytes","allocate_pages_by_bytes_at","allocate_pages_by_bytes_deferred","allocate_pages_deferred","as_allocated_frame","as_slice","as_slice_mut","as_type","as_type_mut","backward_checked","backward_checked","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","complement","containing_address","containing_address","contains","contains_address","contains_address","create_and_map_table_frame","create_contiguous_mapping","create_mapping","data","deep_copy","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","difference","drop","drop","drop","drop","dump_pte","empty","empty","empty","empty","empty","empty","end","eq","eq","eq","eq","eq","eq","eq","eq","extend","extra_mapped_pages","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","forward_checked","frame_offset","frames","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_elf_program_flags","from_elf_section_flags","from_iter","from_multiboot2_section_flags","from_phys_addr","from_virt_addr","get_current_p4","get_kernel_mmi_ref","hash","hash","hash","init","init_post_heap","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_exclusive","into_huge","into_iter","into_iter","into_iter","into_iter","into_non_exclusive","into_writable","is_all","is_empty","is_exclusive","is_executable","is_huge","is_unused","is_writable","map_allocated_pages","map_allocated_pages_to","merge","merge","merge","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new_canonical","new_canonical","new_table","next","not","number","number","offset_of_address","offset_of_address","overlap","overlap","p1_index","p2_index","p3_index","p4_index","page_offset","page_table","page_table","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","physical_address","pointed_frame","remap","remove","rodata","set","set_broadcast_tlb_shootdown_cb","set_entry","set_flags","set_unmapped","size_in_bytes","size_in_bytes","size_in_frames","size_in_pages","split","split","split","stack","start","start_address","start_address","start_address","start_address","steps_between","steps_between","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","switch","symmetric_difference","text","to_extended","to_extended","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","toggle","translate","translate_page","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unmap_into_parts","unmap_into_parts","value","value","value","with","with_table_and_frame","zero","zero","zero","zero","0","0"],"q":["memorymemory::UnmapResult",""],"d":["The hardware will set this bit when the page is accessed.","The address bounds and flags of the initial kernel …","A reference to a single frame within a range of …","Represents a range of allocated physical memory <code>Frame</code>s; …","An iterator over each <code>AllocatedFrame</code> in a range of …","Represents a range of allocated <code>VirtualAddress</code>es, …","The hardware will set this bit when the page has been …","A series of pending actions related to page allocator …","Set this bit to indicate that the frame pointed to by this …","Page table entry flags on the x86_64 architecture. ","","A <code>Frame</code> is a chunk of <strong>physical</strong> memory aligned to a …","A range of <code>Frame</code>s that are contiguous in physical memory.","Memory that is available for any general purpose.","Set this bit to indicate that this page is mapped across …","Set this bit if this page table entry represents a “huge…","Represents a contiguous range of virtual memory pages that …","","This holds all the information for a <code>Task</code>’s memory …","Types of physical memory. See each variant’s …","A shareable reference to a <code>MemoryManagementInfo</code> struct …","If set, this page’s content is never cached, neither for …","Set this bit to forbid execution of the mapped page. In …","","Page size is 4096 bytes, 4KiB pages.","A mask for the bits of a page table entry that contain the …","If set, this page is currently “present” in memory.  …","A <code>Page</code> is a chunk of <strong>virtual</strong> memory aligned to a <code>PAGE_SIZE</code> …","A range of <code>Page</code>s that are contiguous in virtual memory.","A top-level root (P4) page table.","A page table entry, which is a <code>u64</code> value under the hood.","A physical memory address, which is a <code>usize</code> under the hood.","A region of physical memory.","Memory that is reserved for special use and is only ever …","The address bounds and mapping flags of a section’s …","A page that can be temporarily mapped to the recursive …","If set, userspace (ring 3) can access this page. If not …","Memory of an unknown type. This is a default value that …","The frames returned from the action of unmapping a page …","A range of frames that have been unmapped from a …","A virtual memory address, which is a <code>usize</code> under the hood.","If set, writes to this page are allowed. If not set, this …","If set, writes to this page go directly through the cache …","","","","","","","","","","","","","Returns the <code>VirtualAddress</code> at the given <code>offset</code> into this …","Returns the <code>PhysicalAddress</code> at the given <code>offset</code> into this …","Returns the set containing all flags.","Allocates the given number of frames with no constraints …","Allocates the given number of frames starting at …","Allocates frames with no constraints on the starting …","Allocates frames starting at the given <code>PhysicalAddress</code> …","Similar to <code>allocated_frames_deferred()</code>, but accepts a size …","The core frame allocation routine that allocates the given …","Allocates the given number of pages with no constraints on …","Allocates the given number of pages starting at (inclusive …","Allocates pages with no constraints on the starting …","Allocates pages starting at the given <code>VirtualAddress</code> with …","Similar to <code>allocated_pages_deferred()</code>, but accepts a size …","The core page allocation routine that allocates the given …","Returns an <code>AllocatedFrame</code> if this <code>AllocatedFrames</code> object …","Reinterprets this <code>MappedPages</code>’s underlying memory region …","Same as <code>as_slice()</code>, but returns a <em>mutable</em> slice. ","Reinterprets this <code>MappedPages</code>’s underlying memory region …","Same as <code>as_type()</code>, but returns a <em>mutable</em> reference to the …","","","Returns the intersection between the two sets of flags.","","","Disables all flags disabled in the set.","","","Returns the union of the two sets of flags.","","","Adds the set of flags.","","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","","","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the <code>Page</code> containing the given <code>VirtualAddress</code>.","Returns the <code>Frame</code> containing the given <code>PhysicalAddress</code>.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if this <code>PageRange</code> contains the given …","Returns <code>true</code> if this <code>FrameRange</code> contains the given …","Creates a new <code>TemporaryPage</code> and maps it to the given page …","A convenience function that creates a new memory mapping …","A convenience function that creates a new memory mapping. …","","Creates a deep copy of this <code>MappedPages</code> memory region, by …","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","Dumps all page table entries at all four page table levels …","Returns an empty set of flags.","Returns an empty AllocatedPages object that performs no …","Returns an empty AllocatedFrames object that performs no …","Creates a <code>PageRange</code> that will always yield <code>None</code> when …","Creates a <code>FrameRange</code> that will always yield <code>None</code> when …","Returns an empty MappedPages object that performs no …","The ending virtual address and physical address.","","","","","","","","","","a list of additional virtual-mapped Pages that have the …","Returns this <code>PageTableEntry</code>’s flags.","Returns the flags that describe this <code>MappedPages</code> page …","The page table entry flags that should be used for mapping …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the offset from the frame boundary specified by …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Gets flags according to the properties of a program. ","Gets flags according to the properties of a section from …","","Gets flags according to the properties of a section from …","A convenience method for creating a new <code>FrameRange</code> that …","A convenience method for creating a new <code>PageRange</code> that …","Returns the current top-level (P4) root page table frame.","Returns a reference to the kernel’s <code>MemoryManagementInfo</code>…","","","","Initializes the virtual memory management system. Consumes …","Finishes initializing the virtual memory management system …","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the huge page …","","","","","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the writable …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if these flags are exclusive. ","Returns <code>true</code> if these flags are executable.","Returns <code>true</code> if the page the entry points to is a huge …","Returns <code>true</code> if this entry is unused, i.e., cleared/zeroed …","Returns <code>true</code> if the page is writable.","Maps the given <code>AllocatedPages</code> to randomly chosen …","Maps the given virtual <code>AllocatedPages</code> to the given …","Merges the given <code>AllocatedPages</code> object <code>ap</code> into this …","Merges the given <code>AllocatedFrames</code> object <code>other</code> into this …","Merges the given <code>MappedPages</code> object <code>mp</code> into this …","","","","","","","","Creates a new <code>VirtualAddress</code>, returning an error if the …","Creates a new <code>PhysicalAddress</code>, returning an error if the …","","Creates a new range of <code>Page</code>s that spans from <code>start</code> to <code>end</code>, …","Creates a new range of <code>Frame</code>s that spans from <code>start</code> to <code>end</code>…","Creates a new <code>VirtualAddress</code> that is guaranteed to be …","Creates a new <code>PhysicalAddress</code> that is guaranteed to be …","Initializes a new top-level P4 <code>PageTable</code> whose root is …","","Returns the complement of this set of flags.","Returns the number of this <code>Page</code>.","Returns the number of this <code>Frame</code>.","Returns the offset of the given <code>VirtualAddress</code> within this …","Returns the offset of the given <code>PhysicalAddress</code> within …","Returns an inclusive <code>PageRange</code> representing the <code>Page</code>s that …","Returns an inclusive <code>FrameRange</code> representing the <code>Frame</code>s …","Returns the 9-bit part of this <code>Page</code>’s <code>VirtualAddress</code> …","Returns the 9-bit part of this <code>Page</code>’s <code>VirtualAddress</code> …","Returns the 9-bit part of this <code>Page</code>’s <code>VirtualAddress</code> …","Returns the 9-bit part of this <code>Page</code>’s <code>VirtualAddress</code> …","Returns the offset from the page boundary specified by …","","the PageTable that should be switched to when this Task is …","","","","","","Returns the physical address of this page table’s …","Returns the physical <code>Frame</code> pointed to (mapped by) this …","Change the permissions (<code>new_flags</code>) of this <code>MappedPages</code>’s …","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Set the function callback that will be invoked every time …","Sets this <code>PageTableEntry</code> to map the given <code>frame</code> with the …","Sets the flags components of this <code>PageTableEntry</code> to …","Removes the mapping represented by this page table entry.","Returns the size of this range in number of bytes.","Returns the size of this range in number of bytes.","Returns the number of <code>Frame</code>s covered by this iterator.","Returns the number of <code>Page</code>s covered by this iterator.","Splits this <code>AllocatedPages</code> into two separate <code>AllocatedPages</code>…","Splits this <code>AllocatedFrames</code> into two separate …","Splits this <code>MappedPages</code> into two separate <code>MappedPages</code> …","","The starting virtual address and physical address.","Returns the <code>VirtualAddress</code> at the start of this <code>Page</code>.","Returns the <code>PhysicalAddress</code> at the start of this <code>Frame</code>.","Returns the <code>VirtualAddress</code> of the starting <code>Page</code> in this …","Returns the <code>PhysicalAddress</code> of the starting <code>Frame</code> in this …","","","Returns the set difference of the two sets of flags.","","","","","","","Disables all flags enabled in the set.","","","","","","","Switches from the currently-active page table (this …","Returns the symmetric difference between the flags in <code>self</code> …","","Returns a new separate <code>PageRange</code> that is extended to …","Returns a new separate <code>FrameRange</code> that is extended to …","","","","","","","","","","","","Toggles the specified flags in-place.","Translates a <code>VirtualAddress</code> to a <code>PhysicalAddress</code> by …","Translates a virtual memory <code>Page</code> to a physical memory <code>Frame</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Call this to clean up a <code>TemporaryPage</code> instead of just …","Consumes and unmaps this <code>MappedPages</code> object without …","","Returns the underlying <code>usize</code> value for this <code>VirtualAddress</code>.","Returns the underlying <code>usize</code> value for this <code>PhysicalAddress</code>…","Temporarily maps the given other <code>PageTable</code> to the …","Invokes the given closure <code>f</code> with a mutable reference to …","Returns a new, all-zero <code>EntryFlags</code> with no bits enabled.","Zeroes out this entry, setting it as “unused”.","Creates a new <code>VirtualAddress</code> with a value 0.","Creates a new <code>PhysicalAddress</code> with a value 0.","",""],"i":[9,0,0,0,0,0,9,0,9,0,39,0,0,18,9,9,0,0,0,0,0,9,9,39,0,0,9,0,0,0,0,0,0,18,0,0,9,18,0,0,0,9,9,1,1,3,3,4,5,1,1,3,3,4,5,6,8,9,0,0,0,0,0,0,0,0,0,0,0,0,10,15,15,15,15,4,5,9,1,3,9,1,3,9,1,3,9,1,3,9,9,1,3,9,1,3,9,39,24,22,28,1,23,13,26,3,10,38,4,21,17,5,18,6,14,8,15,31,32,33,9,39,24,22,28,1,23,13,26,3,10,38,4,21,17,5,18,6,14,8,15,31,32,33,9,1,3,4,17,5,18,6,8,9,1,3,4,17,5,18,6,8,9,1,3,4,5,9,4,5,9,6,8,22,0,0,32,15,9,1,3,24,13,10,21,17,6,14,8,15,21,6,8,9,13,26,10,15,23,9,13,10,6,8,15,31,9,1,3,4,5,18,6,8,9,33,28,15,31,9,9,9,9,9,1,1,1,1,1,1,1,13,3,3,3,3,3,3,3,10,4,21,17,5,18,6,14,8,15,31,32,33,4,5,3,17,9,39,24,22,28,1,23,13,26,3,10,38,4,21,17,5,18,6,14,8,15,31,32,33,9,9,9,9,9,9,9,8,6,0,0,9,1,3,0,0,9,9,9,9,39,24,22,28,1,1,23,13,26,3,3,10,38,4,21,17,5,18,6,14,8,15,31,32,33,9,9,10,38,6,8,9,9,9,9,9,9,9,28,9,23,23,13,10,15,9,1,3,4,5,6,8,1,3,17,6,8,1,3,21,38,9,4,5,6,8,6,8,4,4,4,4,1,32,33,9,1,3,4,5,21,28,15,9,32,9,0,28,28,28,6,8,8,6,13,10,15,32,31,4,5,6,8,4,5,9,1,1,3,3,4,5,9,1,1,3,3,4,5,21,9,32,6,8,9,1,3,4,17,5,18,6,8,1,3,9,23,23,9,39,24,22,28,1,23,13,26,3,10,38,4,21,17,5,18,6,14,8,15,31,32,33,9,39,24,22,28,1,23,13,26,3,10,38,4,21,17,5,18,6,14,8,15,31,32,33,17,9,39,24,22,28,1,23,13,26,3,10,38,4,21,17,5,18,6,14,8,15,31,32,33,9,22,15,28,1,3,21,22,9,28,1,3,42,43],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[1,2],1],[[3,3],3],[[3,2],3],[[4,2],4],[[5,2],5],[[1,2]],[[1,1]],[[3,3]],[[3,2]],[[4,2]],[[5,2]],[[6,2],[[7,[1]]]],[[8,2],[[7,[3]]]],[[],9],[2,[[7,[10]]]],[[3,2],[[12,[10,11]]]],[2,[[7,[10]]]],[[3,2],[[12,[10,11]]]],[[[7,[3]],2],[[12,[11]]]],[[[7,[3]],2],[[12,[11]]]],[2,[[7,[13]]]],[[1,2],[[12,[13,11]]]],[2,[[7,[13]]]],[[1,2],[[12,[13,11]]]],[[[7,[1]],2],[[12,[11]]]],[[[7,[1]],2],[[12,[11]]]],[10,14],[[15,2,2],[[12,[11]]]],[[15,2,2],[[12,[11]]]],[[15,2],[[12,[11]]]],[[15,2],[[12,[11]]]],[[4,2],[[7,[4]]]],[[5,2],[[7,[5]]]],[[9,9],9],[[1,1],1],[[3,3],3],[[9,9]],[[1,1]],[[3,3]],[[9,9],9],[[1,1],1],[[3,3],3],[[9,9]],[[1,1]],[[3,3]],[9,16],[[9,9],9],[[1,1],1],[[3,3],3],[[9,9]],[[1,1]],[[3,3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[1,1],[3,3],[4,4],[17,17],[5,5],[18,18],[6,6],[8,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],19],[[1,1],19],[[3,3],19],[[4,4],19],[[5,5],19],[9,9],[1,4],[3,5],[[9,9],20],[[6,1],20],[[8,3],20],[[[7,[13]],10,21],[[12,[22,11]]]],[[2,9],[[12,[11]]]],[[2,9],[[12,[15,11]]]],0,[[15,[7,[9]],23],[[12,[15,11]]]],[[],9],[[],1],[[],3],[24,8],[13,6],[10,8],[21,23],[17,8],[6,25],[14],[8,25],[15,6],[21,23],[6,25],[8,25],[[9,9],9],[13],[26],[10],[15],[[23,1],27],[[],9],[[],13],[[],10],[[],6],[[],8],[[],15],0,[[9,9],20],[[1,1],20],[[3,3],20],[[4,4],20],[[5,5],20],[[18,18],20],[[6,6],20],[[8,8],20],[9],0,[28,9],[15,9],0,[[9,29],[[12,[30]]]],[[9,29],[[12,[30]]]],[[9,29],[[12,[30]]]],[[9,29],[[12,[30]]]],[[9,29],[[12,[30]]]],[[1,29],[[12,[30]]]],[[1,29],[[12,[30]]]],[[1,29],[[12,[30]]]],[[1,29],[[12,[30]]]],[[1,29],[[12,[30]]]],[[1,29],[[12,[30]]]],[[1,29],[[12,[30]]]],[[13,29],[[12,[30]]]],[[3,29],[[12,[30]]]],[[3,29],[[12,[30]]]],[[3,29],[[12,[30]]]],[[3,29],[[12,[30]]]],[[3,29],[[12,[30]]]],[[3,29],[[12,[30]]]],[[3,29],[[12,[30]]]],[[10,29],[[12,[30]]]],[[4,29],[[12,[30]]]],[[21,29],27],[[17,29],[[12,[30]]]],[[5,29],[[12,[30]]]],[[18,29],[[12,[30]]]],[[6,29],[[12,[30]]]],[[14,29],[[12,[30]]]],[[8,29],[[12,[30]]]],[[15,29],27],[[31,29],[[12,[30]]]],[[32,29],[[12,[30]]]],[[33,29],27],[[4,2],[[7,[4]]]],[[5,2],[[7,[5]]]],[3,2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,[[7,[9]]]],[16,9],[16,9],[34,9],[16,9],[[],9],[35,9],[[3,2],8],[[1,2],6],[[],5],[[],[[7,[36]]]],[9],[1],[3],[37,[[12,[11]]]],[[21,15],[[12,[11]]]],[[9,9]],[[9,9],9],[[9,9],20],[[]],[[]],[[]],[[]],[[]],[1,2],[[]],[[]],[[]],[[]],[[]],[3,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[9,9],[10],[[]],[6],[8],[9,9],[9,9],[9,20],[9,20],[9,20],[9,20],[9,20],[28,20],[9,20],[[23,13,9],[[12,[15,11]]]],[[23,13,10,9],[[12,[15,11]]]],[[13,13],[[12,[13]]]],[[10,10],[[12,[10]]]],[[15,15],12],[[9,9],20],[[1,1],20],[[3,3],20],[[4,4],20],[[5,5],20],[[6,6],20],[[8,8],20],[2,[[7,[1]]]],[2,[[7,[3]]]],[[8,18],17],[[4,4],6],[[5,5],8],[2,1],[2,3],[[21,10,[7,[13]]],[[12,[21,11]]]],[38,7],[9,9],[4,2],[5,2],[[6,1],[[7,[2]]]],[[8,3],[[7,[2]]]],[[6,6],[[7,[6]]]],[[8,8],[[7,[8]]]],[4,2],[4,2],[4,2],[4,2],[1,2],0,0,[[9,9],[[7,[19]]]],[[1,1],[[7,[19]]]],[[3,3],[[7,[19]]]],[[4,4],[[7,[19]]]],[[5,5],[[7,[19]]]],[21,3],[28,[[7,[5]]]],[[15,23,9],[[12,[11]]]],[[9,9]],0,[[9,9,20]],[[]],[[28,14,9]],[[28,9]],[28,39],[6,2],[8,2],[8,2],[6,2],[[13,4],[[12,[13]]]],[[10,5],[[12,[10]]]],[[15,4],[[12,[15]]]],0,0,[4,1],[5,3],[6,1],[8,3],[[4,4],[[7,[2]]]],[[5,5],[[7,[2]]]],[[9,9],9],[[1,1],1],[[1,2],1],[[3,3],3],[[3,2],3],[[4,2],4],[[5,2],5],[[9,9]],[[1,1]],[[1,2]],[[3,2]],[[3,3]],[[4,2]],[[5,2]],[[21,21]],[[9,9],9],0,[[6,4],6],[[8,5],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],40],[[],40],[[9,9]],[[23,1],[[7,[3]]]],[[23,4],[[7,[5]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[9,9],9],[[22,21],[[12,[11]]]],[[15,23],[[12,[15]]]],[28,16],[1,2],[3,2],[[21,21],[[12,[11]]]],[22,[[12,[11]]]],[[],9],[28],[[],1],[[],3],0,0],"p":[[3,"VirtualAddress"],[15,"usize"],[3,"PhysicalAddress"],[3,"Page"],[3,"Frame"],[3,"PageRange"],[4,"Option"],[3,"FrameRange"],[3,"EntryFlags"],[3,"AllocatedFrames"],[15,"str"],[4,"Result"],[3,"AllocatedPages"],[3,"AllocatedFrame"],[3,"MappedPages"],[15,"u64"],[3,"PhysicalMemoryRegion"],[4,"MemoryRegionType"],[4,"Ordering"],[15,"bool"],[3,"PageTable"],[3,"TemporaryPage"],[3,"Mapper"],[3,"UnmappedFrames"],[3,"RangeInclusive"],[3,"DeferredAllocAction"],[6,"Result"],[3,"PageTableEntry"],[3,"Formatter"],[3,"Error"],[3,"SectionMemoryBounds"],[3,"AggregatedSectionMemoryBounds"],[3,"MemoryManagementInfo"],[3,"Flags"],[3,"ElfSection"],[6,"MmiRef"],[3,"BootInformation"],[3,"AllocatedFramesIter"],[4,"UnmapResult"],[3,"String"],[3,"TypeId"],[13,"Exclusive"],[13,"NonExclusive"]]},\
"memory_initialization":{"doc":"","t":[5],"n":["init_memory_management"],"q":["memory_initialization"],"d":["Initializes the virtual memory management system and …"],"i":[0],"f":[[1,[[3,[2]]]]],"p":[[3,"BootInformation"],[15,"str"],[4,"Result"]]},\
"memory_structs":{"doc":"This crate contains common types used for memory mapping. ","t":[18,3,18,18,3,3,3,18,18,18,18,17,18,3,3,3,3,18,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ACCESSED","AggregatedSectionMemoryBounds","DIRTY","EXCLUSIVE","EntryFlags","Frame","FrameRange","GLOBAL","HUGE_PAGE","NO_CACHE","NO_EXECUTE","PAGE_TABLE_ENTRY_FRAME_MASK","PRESENT","Page","PageRange","PhysicalAddress","SectionMemoryBounds","USER_ACCESSIBLE","VirtualAddress","WRITABLE","WRITE_THROUGH","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","address_at_offset","address_at_offset","all","backward_checked","backward_checked","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","complement","containing_address","containing_address","contains","contains_address","contains_address","data","default","default","default","deref","deref","deref_mut","deref_mut","difference","empty","empty","empty","end","eq","eq","eq","eq","eq","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","forward_checked","frame_offset","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_elf_program_flags","from_elf_section_flags","from_iter","from_multiboot2_section_flags","from_phys_addr","from_virt_addr","hash","hash","hash","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into_exclusive","into_huge","into_iter","into_iter","into_non_exclusive","into_writable","is_all","is_empty","is_exclusive","is_executable","is_huge","is_writable","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new_canonical","new_canonical","not","number","number","offset_of_address","offset_of_address","overlap","overlap","p1_index","p2_index","p3_index","p4_index","page_offset","page_table","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","rodata","set","size_in_bytes","size_in_bytes","size_in_frames","size_in_pages","stack","start","start_address","start_address","start_address","start_address","steps_between","steps_between","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","text","to_extended","to_extended","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","value","value","zero","zero","zero"],"q":["memory_structsd":["The hardware will set this bit when the page is accessed.","The address bounds and flags of the initial kernel …","The hardware will set this bit when the page has been …","Set this bit to indicate that the frame pointed to by this …","Page table entry flags on the x86_64 architecture. ","A <code>Frame</code> is a chunk of <strong>physical</strong> memory aligned to a …","A range of <code>Frame</code>s that are contiguous in physical memory.","Set this bit to indicate that this page is mapped across …","Set this bit if this page table entry represents a “huge…","If set, this page’s content is never cached, neither for …","Set this bit to forbid execution of the mapped page. In …","A mask for the bits of a page table entry that contain the …","If set, this page is currently “present” in memory.  …","A <code>Page</code> is a chunk of <strong>virtual</strong> memory aligned to a <code>PAGE_SIZE</code> …","A range of <code>Page</code>s that are contiguous in virtual memory.","A physical memory address, which is a <code>usize</code> under the hood.","The address bounds and mapping flags of a section’s …","If set, userspace (ring 3) can access this page. If not …","A virtual memory address, which is a <code>usize</code> under the hood.","If set, writes to this page are allowed. If not set, this …","If set, writes to this page go directly through the cache …","","","","","","","","","","","","","Returns the <code>VirtualAddress</code> at the given <code>offset</code> into this …","Returns the <code>PhysicalAddress</code> at the given <code>offset</code> into this …","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","","","Disables all flags disabled in the set.","","","Returns the union of the two sets of flags.","","","Adds the set of flags.","","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","","","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the <code>Page</code> containing the given <code>VirtualAddress</code>.","Returns the <code>Frame</code> containing the given <code>PhysicalAddress</code>.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if this <code>PageRange</code> contains the given …","Returns <code>true</code> if this <code>FrameRange</code> contains the given …","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Creates a <code>PageRange</code> that will always yield <code>None</code> when …","Creates a <code>FrameRange</code> that will always yield <code>None</code> when …","The ending virtual address and physical address.","","","","","","","","","The page table entry flags that should be used for mapping …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the offset from the frame boundary specified by …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Gets flags according to the properties of a program. ","Gets flags according to the properties of a section from …","","Gets flags according to the properties of a section from …","A convenience method for creating a new <code>FrameRange</code> that …","A convenience method for creating a new <code>PageRange</code> that …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the huge page …","","","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the writable …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if these flags are exclusive. ","Returns <code>true</code> if these flags are executable.","Returns <code>true</code> if the page the entry points to is a huge …","Returns <code>true</code> if the page is writable.","","","","","","","","Creates a new <code>VirtualAddress</code>, returning an error if the …","Creates a new <code>PhysicalAddress</code>, returning an error if the …","Creates a new range of <code>Page</code>s that spans from <code>start</code> to <code>end</code>, …","Creates a new range of <code>Frame</code>s that spans from <code>start</code> to <code>end</code>…","Creates a new <code>VirtualAddress</code> that is guaranteed to be …","Creates a new <code>PhysicalAddress</code> that is guaranteed to be …","Returns the complement of this set of flags.","Returns the number of this <code>Page</code>.","Returns the number of this <code>Frame</code>.","Returns the offset of the given <code>VirtualAddress</code> within this …","Returns the offset of the given <code>PhysicalAddress</code> within …","Returns an inclusive <code>PageRange</code> representing the <code>Page</code>s that …","Returns an inclusive <code>FrameRange</code> representing the <code>Frame</code>s …","Returns the 9-bit part of this <code>Page</code>’s <code>VirtualAddress</code> …","Returns the 9-bit part of this <code>Page</code>’s <code>VirtualAddress</code> …","Returns the 9-bit part of this <code>Page</code>’s <code>VirtualAddress</code> …","Returns the 9-bit part of this <code>Page</code>’s <code>VirtualAddress</code> …","Returns the offset from the page boundary specified by …","","","","","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Returns the size of this range in number of bytes.","Returns the size of this range in number of bytes.","Returns the number of <code>Frame</code>s covered by this iterator.","Returns the number of <code>Page</code>s covered by this iterator.","","The starting virtual address and physical address.","Returns the <code>VirtualAddress</code> at the start of this <code>Page</code>.","Returns the <code>PhysicalAddress</code> at the start of this <code>Frame</code>.","Returns the <code>VirtualAddress</code> of the starting <code>Page</code> in this …","Returns the <code>PhysicalAddress</code> of the starting <code>Frame</code> in this …","","","Returns the set difference of the two sets of flags.","","","","","","","Disables all flags enabled in the set.","","","","","","","Returns the symmetric difference between the flags in <code>self</code> …","","Returns a new separate <code>PageRange</code> that is extended to …","Returns a new separate <code>FrameRange</code> that is extended to …","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the underlying <code>usize</code> value for this <code>VirtualAddress</code>.","Returns the underlying <code>usize</code> value for this <code>PhysicalAddress</code>…","Returns a new, all-zero <code>EntryFlags</code> with no bits enabled.","Creates a new <code>VirtualAddress</code> with a value 0.","Creates a new <code>PhysicalAddress</code> with a value 0."],"i":[9,0,9,9,0,0,0,9,9,9,9,0,9,0,0,0,0,9,0,9,9,1,1,3,3,4,5,1,1,3,3,4,5,6,8,9,4,5,9,1,3,9,1,3,9,1,3,9,1,3,9,9,1,3,9,1,3,9,1,3,4,5,6,8,18,19,9,1,3,4,5,6,8,18,19,9,1,3,4,5,6,8,9,1,3,4,5,9,4,5,9,6,8,19,9,1,3,6,8,6,8,9,9,6,8,18,9,1,3,4,5,6,8,9,18,9,9,9,9,9,1,1,1,1,1,1,1,3,3,3,3,3,3,3,4,5,6,8,18,19,4,5,3,9,1,3,4,5,6,8,18,19,9,9,9,9,9,9,9,8,6,9,1,3,9,9,9,9,1,1,3,3,4,5,6,8,18,19,9,9,6,8,9,9,9,9,9,9,9,9,9,1,3,4,5,6,8,1,3,6,8,1,3,9,4,5,6,8,6,8,4,4,4,4,1,19,9,1,3,4,5,9,19,9,6,8,8,6,19,18,4,5,6,8,4,5,9,1,1,3,3,4,5,9,1,1,3,3,4,5,9,19,6,8,9,9,1,3,4,5,6,8,18,19,9,1,3,4,5,6,8,18,19,9,1,3,4,5,6,8,18,19,9,1,3,9,1,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[1,2],1],[[3,3],3],[[3,2],3],[[4,2],4],[[5,2],5],[[1,2]],[[1,1]],[[3,3]],[[3,2]],[[4,2]],[[5,2]],[[6,2],[[7,[1]]]],[[8,2],[[7,[3]]]],[[],9],[[4,2],[[7,[4]]]],[[5,2],[[7,[5]]]],[[9,9],9],[[1,1],1],[[3,3],3],[[9,9]],[[1,1]],[[3,3]],[[9,9],9],[[1,1],1],[[3,3],3],[[9,9]],[[1,1]],[[3,3]],[9,10],[[9,9],9],[[1,1],1],[[3,3],3],[[9,9]],[[1,1]],[[3,3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[1,1],[3,3],[4,4],[5,5],[6,6],[8,8],[[9,9],11],[[1,1],11],[[3,3],11],[[4,4],11],[[5,5],11],[9,9],[1,4],[3,5],[[9,9],12],[[6,1],12],[[8,3],12],0,[[],9],[[],1],[[],3],[6,13],[8,13],[6,13],[8,13],[[9,9],9],[[],9],[[],6],[[],8],0,[[9,9],12],[[1,1],12],[[3,3],12],[[4,4],12],[[5,5],12],[[6,6],12],[[8,8],12],[9],0,[[9,14],[[16,[15]]]],[[9,14],[[16,[15]]]],[[9,14],[[16,[15]]]],[[9,14],[[16,[15]]]],[[9,14],[[16,[15]]]],[[1,14],17],[[1,14],17],[[1,14],17],[[1,14],17],[[1,14],17],[[1,14],17],[[1,14],17],[[3,14],17],[[3,14],17],[[3,14],17],[[3,14],17],[[3,14],17],[[3,14],17],[[3,14],17],[[4,14],17],[[5,14],17],[[6,14],17],[[8,14],17],[[18,14],17],[[19,14],17],[[4,2],[[7,[4]]]],[[5,2],[[7,[5]]]],[3,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,[[7,[9]]]],[10,9],[10,9],[20,9],[10,9],[[],9],[21,9],[[3,2],8],[[1,2],6],[9],[1],[3],[[9,9]],[[9,9],9],[[9,9],12],[[]],[1,2],[[]],[[]],[3,2],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[9,9],[6],[8],[9,9],[9,9],[9,12],[9,12],[9,12],[9,12],[9,12],[9,12],[[9,9],12],[[1,1],12],[[3,3],12],[[4,4],12],[[5,5],12],[[6,6],12],[[8,8],12],[2,[[7,[1]]]],[2,[[7,[3]]]],[[4,4],6],[[5,5],8],[2,1],[2,3],[9,9],[4,2],[5,2],[[6,1],[[7,[2]]]],[[8,3],[[7,[2]]]],[[6,6],[[7,[6]]]],[[8,8],[[7,[8]]]],[4,2],[4,2],[4,2],[4,2],[1,2],0,[[9,9],[[7,[11]]]],[[1,1],[[7,[11]]]],[[3,3],[[7,[11]]]],[[4,4],[[7,[11]]]],[[5,5],[[7,[11]]]],[[9,9]],0,[[9,9,12]],[6,2],[8,2],[8,2],[6,2],0,0,[4,1],[5,3],[6,1],[8,3],[[4,4],[[7,[2]]]],[[5,5],[[7,[2]]]],[[9,9],9],[[1,2],1],[[1,1],1],[[3,2],3],[[3,3],3],[[4,2],4],[[5,2],5],[[9,9]],[[1,1]],[[1,2]],[[3,2]],[[3,3]],[[4,2]],[[5,2]],[[9,9],9],0,[[6,4],6],[[8,5],8],[[9,9]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[9,9],9],[1,2],[3,2],[[],9],[[],1],[[],3]],"p":[[3,"VirtualAddress"],[15,"usize"],[3,"PhysicalAddress"],[3,"Page"],[3,"Frame"],[3,"PageRange"],[4,"Option"],[3,"FrameRange"],[3,"EntryFlags"],[15,"u64"],[4,"Ordering"],[15,"bool"],[3,"RangeInclusive"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"SectionMemoryBounds"],[3,"AggregatedSectionMemoryBounds"],[3,"Flags"],[3,"ElfSection"],[3,"TypeId"]]},\
"memory_x86_64":{"doc":"This crate implements the virtual memory subsystem …","t":[18,3,18,18,3,18,18,18,18,17,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11],"n":["ACCESSED","BootInformation","DIRTY","EXCLUSIVE","EntryFlags","GLOBAL","HUGE_PAGE","NO_CACHE","NO_EXECUTE","PAGE_TABLE_ENTRY_FRAME_MASK","PRESENT","USER_ACCESSIBLE","WRITABLE","WRITE_THROUGH","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","boot_loader_name_tag","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","command_line_tag","complement","contains","default","difference","efi_32_ih","efi_64_ih","efi_memory_map_tag","efi_sdt_32_tag","efi_sdt_64_tag","elf_sections_tag","empty","end_address","eq","extend","find_section_memory_bounds","fmt","fmt","fmt","fmt","fmt","fmt","framebuffer_tag","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_elf_program_flags","from_elf_section_flags","from_iter","from_multiboot2_section_flags","get_boot_info_mem_area","get_kernel_address","get_modules_address","get_p4","get_vga_mem_addr","hash","insert","intersection","intersects","into","into","into_exclusive","into_huge","into_non_exclusive","into_writable","is_all","is_empty","is_exclusive","is_executable","is_huge","is_writable","load_base_addr","memory_map_tag","module_tags","ne","not","partial_cmp","remove","rsdp_v1_tag","rsdp_v2_tag","set","start_address","sub","sub_assign","symmetric_difference","tlb_flush_all","tlb_flush_virt_addr","toggle","total_size","try_from","try_from","try_into","try_into","type_id","type_id","union","vbe_info_tag","zero"],"q":["memory_x86_64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The hardware will set this bit when the page is accessed.","A Multiboot 2 Boot Information struct.","The hardware will set this bit when the page has been …","Set this bit to indicate that the frame pointed to by this …","Page table entry flags on the x86_64 architecture. ","Set this bit to indicate that this page is mapped across …","Set this bit if this page table entry represents a “huge…","If set, this page’s content is never cached, neither for …","Set this bit to forbid execution of the mapped page. In …","A mask for the bits of a page table entry that contain the …","If set, this page is currently “present” in memory.  …","If set, userspace (ring 3) can access this page. If not …","If set, writes to this page are allowed. If not set, this …","If set, writes to this page go directly through the cache …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Search for the BootLoader name tag.","","","","","","","Search for the Command line tag.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Search for the EFI 32-bit image handle pointer.","Search for the EFI 64-bit image handle pointer.","Search for the EFI Memory map tag.","Search for the EFI 32-bit SDT tag.","Search for the EFI 64-bit SDT tag.","Search for the ELF Sections tag.","Returns an empty set of flags.","Get the end address of the boot info.","","","Finds the addresses in memory of the main kernel sections, …","","","","","","","Search for the VBE framebuffer tag.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Gets flags according to the properties of a program. ","Gets flags according to the properties of a section from …","","Gets flags according to the properties of a section from …","Gets the physical memory area occupied by the bootloader …","Finds and returns the relevant addresses for the kernel …","Gets the address bounds of physical memory occupied by all …","Returns the current top-level page table address.","Gets the physical memory occupied by vga.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the huge page …","Copies this <code>EntryFlags</code> into a new one with the exclusive …","Copies this new <code>EntryFlags</code> object and sets the writable …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if these flags are exclusive. ","Returns <code>true</code> if these flags are executable.","Returns <code>true</code> if the page the entry points to is a huge …","Returns <code>true</code> if the page is writable.","Search for the Image Load Base Physical Address.","Search for the Memory map tag.","Get an iterator of all module tags.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Search for the (ACPI 1.0) RSDP tag.","Search for the (ACPI 2.0 or later) RSDP tag.","Inserts or removes the specified flags depending on the …","Get the start address of the boot info.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Flushes the whole TLB. ","Flushes the specific virtual address in TLB. ","Toggles the specified flags in-place.","Get the total size of the boot info struct.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Search for the VBE information tag.","Returns a new, all-zero <code>EntryFlags</code> with no bits enabled."],"i":[1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,3,1,1,3,1,1,1,1,3,3,3,3,3,3,1,3,1,1,0,1,1,1,1,1,3,3,1,3,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,3,3,3,1,1,1,1,3,3,1,3,1,1,1,0,0,1,3,1,3,1,3,1,3,1,3,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,2],[[1,1],1],[[1,1]],[3,[[5,[4]]]],[[]],[[]],[[]],[[]],[1,1],[[1,1],6],[3,[[5,[7]]]],[1,1],[[1,1],8],[[],1],[[1,1],1],[3,[[5,[9]]]],[3,[[5,[10]]]],[3,[[5,[11]]]],[3,[[5,[12]]]],[3,[[5,[13]]]],[3,[[5,[14]]]],[[],1],[3,15],[[1,1],8],[1],[3,[[17,[16]]]],[[1,18],[[17,[19]]]],[[1,18],[[17,[19]]]],[[1,18],[[17,[19]]]],[[1,18],[[17,[19]]]],[[1,18],[[17,[19]]]],[[3,18],[[17,[19]]]],[3,[[5,[20]]]],[[]],[[]],[2,[[5,[1]]]],[2,1],[2,1],[21,1],[2,1],[[],1],[22,1],[3,[[17,[16]]]],[3,[[17,[16]]]],[3],[[],23],[[],[[17,[16]]]],[1],[[1,1]],[[1,1],1],[[1,1],8],[[]],[[]],[1,1],[1,1],[1,1],[1,1],[1,8],[1,8],[1,8],[1,8],[1,8],[1,8],[3,[[5,[24]]]],[3,[[5,[25]]]],[3,26],[[1,1],8],[1,1],[[1,1],[[5,[6]]]],[[1,1]],[3,[[5,[27]]]],[3,[[5,[28]]]],[[1,1,8]],[3,15],[[1,1],1],[[1,1]],[[1,1],1],[[]],[29],[[1,1]],[3,15],[[],17],[[],17],[[],17],[[],17],[[],30],[[],30],[[1,1],1],[3,[[5,[31]]]],[[],1]],"p":[[3,"EntryFlags"],[15,"u64"],[3,"BootInformation"],[3,"BootLoaderNameTag"],[4,"Option"],[4,"Ordering"],[3,"CommandLineTag"],[15,"bool"],[3,"EFIImageHandle32"],[3,"EFIImageHandle64"],[3,"EFIMemoryMapTag"],[3,"EFISdt32"],[3,"EFISdt64"],[3,"ElfSectionsTag"],[15,"usize"],[15,"str"],[4,"Result"],[3,"Formatter"],[3,"Error"],[3,"FramebufferTag"],[3,"Flags"],[3,"ElfSection"],[3,"PhysicalAddress"],[3,"ImageLoadPhysAddr"],[3,"MemoryMapTag"],[3,"ModuleIter"],[3,"RsdpV1Tag"],[3,"RsdpV2Tag"],[3,"VirtualAddress"],[3,"TypeId"],[3,"VBEInfoTag"]]},\
"mlx5":{"doc":"A mlx5 driver for a ConnectX-5 100GbE Network Interface …","t":[17,17,3,17,11,11,11,5,11,11,11,11,11,11,11,11],"n":["CONNECTX5_DEV","CONNECTX5_EX_DEV","ConnectX5Nic","MLX_VEND","borrow","borrow_mut","from","get_mlx5_nic","init","into","mac_address","send","send_fastpath","try_from","try_into","type_id"],"q":["mlx5","","","","","","","","","","","","","","",""],"d":["Device ID for the ConnectX-5 NIC","Device ID for the ConnectX-5-EX NIC","Struct representing a ConnectX-5 network interface card.","Vendor ID for Mellanox","","","Returns the argument unchanged.","Returns a reference to the NIC wrapped in a MutexIrqSafe, …","Initializes the new ConnectX-5 network interface card that …","Calls <code>U::from(self)</code>.","Returns the MAC address of the physical function ","Adds a packet to be sent to the transmit queue and returns …","Adds a packet to be sent to the transmit queue.","","",""],"i":[0,0,0,0,8,8,8,0,8,8,8,8,8,8,8,8],"f":[0,0,0,0,[[]],[[]],[[]],[[],[[2,[1]]]],[[3,4,4,5],[[7,[1,6]]]],[[]],[8],[[8,9],[[7,[6]]]],[[8,10]],[[],7],[[],7],[[],11]],"p":[[3,"MutexIrqSafe"],[4,"Option"],[3,"PciDevice"],[15,"usize"],[15,"u16"],[15,"str"],[4,"Result"],[3,"ConnectX5Nic"],[3,"TransmitBuffer"],[3,"PhysicalAddress"],[3,"TypeId"]]},\
"mlx_ethernet":{"doc":"This crate defines the layout of memory objects that make …","tn":["Cqn","Eqn","FgId","FtId","Lkey","Pd","Rqn","Sqn","Td","Tirn","Tisn","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","command_queue","completion_queue","event_queue","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","initialization_segment","into","into","into","into","into","into","into","into","into","into","into","log_page_size","receive_queue","send_queue","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","work_queue","AccessRegister","AccessRegisterOpMod","AllocPd","AllocTransportDomain","AllocUar","AllocationFail","AllocationSuccess","BadBlockNumber","BadCommandType","BadIndex","BadInputLen","BadInputPointer","BadOp","BadOutputLen","BadOutputPointer","BadParam","BadPkt","BadResState","BadResource","BadResourceState","BadSize","BadSysState","BootPages","CmdState","Command","CommandBuilder","CommandCompletionStatus","CommandDeliveryStatus","CommandNotCompleted","CommandOpcode","CommandQueue","CommandQueueEntry","CommandQueueError","CommandReturnStatus","CommandTransportType","Completed","CreateCq","CreateEq","CreateFlowGroup","CreateFlowTable","CreateRq","CreateSq","CreateTir","CreateTis","EnableHca","EswVport","Ethernet","EthernetOffloadCapabilities","EthernetOffloadCapabilities","ExceedLim","GeneralDeviceCapabilities","GeneralDeviceCapabilities","HCACapabilities","HcaPortType","HcaReturnPages","IB","IncorrectCommandOpcode","InitHca","InitPages","Initialized","InputLenErr","InternalErr","InternalError","InvalidCommandDeliveryStatus","InvalidCommandOpcode","InvalidCommandReturnStatus","InvalidMailboxOffset","InvalidPortType","InvalidSQState","ManagePages","ManagePagesOpMod","MissingInput","MissingInputPages","ModifyNicVportContext","ModifyRq","ModifySq","NoCommandEntryAvailable","NoResources","NotImplemented","OK","OutputLenErr","PCIe","PageAllocationFailed","Posted","QueryHcaCap","QueryHcaCapCurrentOpMod","QueryHcaCapMaxOpMod","QueryIssi","QueryNicVportContext","QueryPages","QueryPagesOpMod","QueryRq","QuerySpecialContexts","QuerySq","QueryVportState","QueryVportStateOpMod","Read","RegularPages","ReservedNotZero","ResourceBusy","SetDriverVersion","SetFlowTableEntry","SetFlowTableRoot","SetIssi","SignatureErr","Success","TokenErr","UnimplementedOpcode","Uplink","VnicVport","Write","allocated_pages","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","collapsed_cq","complete","cqn","create","create_and_execute_command","db_page","default","eq","eq","eqn","flow_group_id","flow_table_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_command_status","get_cq_number","get_delivery_status","get_device_capabilities","get_eq_number","get_flow_group_id","get_flow_table_id","get_max_mtu","get_port_type","get_protection_domain","get_query_issi_command_output","get_query_pages_command_output","get_receive_queue_number","get_reserved_lkey","get_return_status","get_send_queue_number","get_sq_state","get_tir_context_number","get_tis_context_number","get_transport_domain","get_uar","get_vport_mac_address","get_vport_state","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mtu","new","opmod","owned_by_hw","pd","post","queue_size","rqn","sqn","td","tirn","tisn","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_from_primitive","try_from_primitive","try_from_primitive","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uar","wait_for_command_completion","CompletionQueue","CompletionQueueDoorbellRecord","CompletionQueueEntry","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_packet_transmission","default","default","dump","dump","fmt","from","from","from","init","init","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","EventQueue","EventQueueEntry","borrow","borrow","borrow_mut","borrow_mut","default","dump","dump","fmt","from","from","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Abort","InitializationSegment","InitializingState","NotAllowed","WaitingPermetion","WaitingResources","borrow","borrow","borrow_mut","borrow_mut","cmdq_entry_stride","device_is_initializing","fmt","from","from","into","into","num_cmdq_entries","set_physical_address_of_cmdq","try_from","try_from","try_into","try_into","type_id","type_id","Error","Ready","ReceiveQueue","ReceiveQueueState","Reset","borrow","borrow","borrow_mut","borrow_mut","create","fmt","from","from","into","into","refill","try_from","try_from","try_from","try_from_primitive","try_into","try_into","type_id","type_id","Error","Ready","Reset","SendQueue","SendQueueState","borrow","borrow","borrow_mut","borrow_mut","create","dump","fmt","from","from","into","into","nop","send","try_from","try_from","try_from","try_from_primitive","try_into","try_into","type_id","type_id","DoorbellRecord","WorkQueueEntryReceive","WorkQueueEntrySend","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","dump","dump","from","from","from","init","init","into","into","into","nop","send","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_buffer_info"],"q":["mlx_ethernet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mlx_ethernet::command_queuemlx_ethernet::completion_queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mlx_ethernet::event_queue","","","","","","","","","","","","","","","","","","","","","","mlx_ethernet::initialization_segment","","","","","","","","","","","","","","","","","","","","","","","","","mlx_ethernet::receive_queue","","","","","","","","","","","","","","","","","","","","","","","","mlx_ethernet::send_queue","","","","","","","","","","","","","","","","","","","","","","","","","","mlx_ethernet::work_queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["completion queue number","event queue number","flow group id","flow table id","","protection domain","receive queue number","send queue number","transport domain","transport interface receive number","transport interface send number","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines the Command Queue that is used to pass commands …","Completion Queues (CQ) are circular buffers used by the …","Event Queues (EQ) are circular buffers used by the HCA to …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This module defines the layout of the initialization …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Find the page size of the given <code>num_bytes</code> in units of 4KiB …","The Receive Queue (RQ) object holds the descriptor ring …","The Send Queue (SQ) object holds the descriptor ring used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Work Queue (WQ) contains a contiguous memory buffer …","","Possible values of the opcode modifer when the opcode is …","","","","","","","","","","","","","","","","","","","","","","The possible states a command can be in as it is updated …","A struct representing a Command Queue Entry in the Command …","Struct that makes it easier to pass the variety of …","","Return codes written by HW in the delivery status field of …","Trying to access the command entry before HW is done …","Command opcode written by SW in opcode field of the input …","A buffer of fixed-size entries that is used to pass …","Layout of a command passed to the NIC. The fields include …","Possible reasons for failure when executing a command","Command status written by HW in status field of the output …","Type of transport that carries the command.","The command has been processed by HW and output is ready …","","","","","","","","","","","","","","","","","The HCA capabilities are stored in this struct after being …","Possible values of the port type field returned when …","","Infiniband","Opcode value in the command entry is not what was expected","","","Command entries have been filled, but it is still owned by …","","","","Delivery status in the command entry is not a valid value","Opcode in the command entry is not a valid value","Return status in the command entry is not a valid value","Offset in a page is too large to map a …","The returned port type is not a valid value","The returned state of the SQ is invalid","","Possible values of the opcode modifer when the opcode is …","Any other input is not passed to a command that requires …","Allocated pages are not passed to a command that requires …","","","","All command entries are currently being used","","Some function has not been implemented for the given opcode","","","","A call to create a <code>MappedPages</code> failed","The command has been issued to the HW by ringing the …","","Possible values of the opcode modifer when the opcode is …","Possible values of the opcode modifer when the opcode is …","","","","Possible values of the opcode modifer when the opcode is …","","","","","Possible values of the opcode modifer when the opcode is …","","","","","","","","","","","","Initializing a comand entry for the given opcode has not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Polls a completion bit until the command has been …","","Create a command queue object.","Find an command queue entry that is not in use","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the status of command delivery. This only informs …","Get the device capabilities, which is the output of the …","","","","Get the maximum value the MTU can be set to, which is the …","Get the number of pages requested by the NIC, which is the …","Get the protection domain number, which is the output of …","Get the current ISSI version and the supported ISSI …","Get the number of pages requested by the NIC, which is the …","","Get the value of the reserved Lkey for Base Memory …","Returns the status of command execution. A <code>None</code> returned …","","","","","Get the transport domain number, which is the output of …","Get the User Access Region (UAR) number, which is the …","Get the port mac address, which is the output of the …","Get the Vport state in the format (max_tx_speed, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true if the command is currently under the …","","Posts an initialized command by ringing the doorbell in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Waits for ownership bit to be cleared, and then returns …","A data structure that contains the CQ buffer  and is used …","A structure containing information of recently-posted CQ …","The layout of an entry in the CQ buffer.","","","","","","","Checks if a packet is transmitted by comparing the …","","","Prints out all entries in the CQ","Prints out the fields of a CQE in the format used by other …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a completion queue by mapping the buffer as a …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","A data structure that contains the EQ buffer  and is used …","The layout of an entry in the EQ buffer.","","","","","","Prints out all entries in the EQ","Prints out the fields of an EQE in the format used by …","","Returns the argument unchanged.","Returns the argument unchanged.","Creates an event queue by mapping the buffer as a slice of …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","The initialization segment is located at offset 0 of PCI …","The possible values of the initialization state of the …","","","","","","","","Returns the required stride of command queue entries …","Returns true if the device is still initializing, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the maximum number of entries that can be in the …","Sets the physical address of the command queue within the …","","","","","","","","","A data structure that contains the RQ ring of descriptors  …","The possible states the RQ can be in.","","","","","","Creates a RQ by mapping the buffer as a slice of …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Refills the receive queue by updating WQEs with new packet …","","","","","","","","","","","","A data structure that contains the SQ ring of descriptors  …","The possible states the SQ can be in.","","","","","Creates a SQ by mapping the buffer as a slice of …","Prints out all entries in the SQ","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform all the steps to complete a NOP: initialize the …","Perform all the steps to send a packet: initialize the …","","","","","","","","","The layout of a doorbell record in memory. A doorbell …","WQEs are built from multiple segments. In the case of …","WQEs are built from multiple segments. In the case of Send …","","","","","","","","","","Prints out the fields of a WQE in the format used by other …","Prints out the fields of a WQE in the format used by other …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","set a WQE to an initial state","set a WQE to an initial state","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Fill the control segment of the WQE to execute a NOP.","Fill the control, ethernet and data segments of the WQE to …","","","","","","","","","","Fill the data segment of the WQE to receive packets."],"i":[0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,0,0,0,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,0,1,2,3,4,5,6,7,8,9,10,11,0,0,0,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,0,20,0,20,20,20,56,56,35,35,36,36,35,36,36,35,36,36,36,36,36,36,36,57,0,0,0,0,0,31,0,0,0,0,0,0,34,20,20,20,20,20,20,20,20,20,58,37,21,22,36,21,22,0,0,56,37,31,20,57,34,35,35,36,31,31,31,31,31,31,20,0,31,31,20,20,20,31,36,31,36,35,59,31,34,20,0,0,20,20,20,0,20,20,20,20,0,23,57,35,36,20,20,20,20,35,35,35,31,58,58,23,17,59,31,56,57,58,24,17,25,35,20,36,21,22,23,37,34,38,32,39,59,31,56,57,58,24,17,25,35,20,36,21,22,23,37,34,38,32,39,20,21,22,23,20,21,22,23,17,24,17,25,25,17,32,20,34,17,17,17,35,20,36,37,38,32,39,59,31,56,57,58,24,17,25,35,20,36,21,22,23,37,34,38,32,39,25,25,32,25,25,25,25,25,25,25,25,25,25,25,32,25,25,25,25,25,25,25,25,59,31,56,57,58,24,17,25,35,20,36,21,22,23,37,34,38,32,39,17,17,17,32,17,24,17,17,17,17,17,17,20,21,22,23,59,31,56,57,58,24,17,25,35,35,20,20,36,36,21,22,23,37,37,34,38,32,39,35,20,36,37,59,31,56,57,58,24,17,25,35,20,36,21,22,23,37,34,38,32,39,59,31,56,57,58,24,17,25,35,20,36,21,22,23,37,34,38,32,39,17,25,0,0,0,43,44,45,43,44,45,43,44,45,43,44,44,43,44,45,43,44,43,44,45,43,44,45,43,44,45,43,44,45,0,0,47,46,47,46,46,47,46,46,47,46,47,46,47,46,47,46,47,46,47,46,60,0,0,60,60,60,60,30,60,30,30,30,30,60,30,60,30,30,30,60,30,60,30,60,30,50,50,0,0,50,49,50,49,50,49,50,49,50,49,50,49,49,50,50,50,49,50,49,50,52,52,52,0,0,51,52,51,52,51,51,52,51,52,51,52,51,51,51,52,52,52,51,52,51,52,0,0,0,53,54,55,53,54,55,53,54,55,54,55,53,54,55,54,55,53,54,55,54,54,53,54,55,53,54,55,53,54,55,55],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[1,12],13],[[2,12],13],[[3,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[[8,12],13],[[9,12],13],[[10,12],13],[[11,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[17,[19,[18]]],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,20],[21,21],[22,22],[23,23],[[]],[[]],[[]],[[]],[17,17],[[24,25],24],[[17,3],17],[[[27,[26]],28],[[15,[25,29]]]],[[25,17,30],[[15,[24,31]]]],[[17,18],17],[[],32],[[20,20],33],[[34,34],33],[[17,7],17],[[17,11],17],[[17,10],17],[[35,12],13],[[20,12],13],[[36,12],13],[[37,12],13],[[38,12],13],[[32,12],13],[[39,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,24],[[15,[38,31]]]],[[25,24],[[15,[31]]]],[32,[[15,[35,31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[32,[[15,[36,31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[25,24],[[15,[31]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[17,40],17],[20,17],[[17,40],17],[32,33],[[17,4],17],[[24,30],24],[[17,14],17],[[17,1],17],[[17,2],17],[[17,5],17],[[17,8],17],[[17,9],17],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[14,[[15,[35,[41,[35]]]]]],[14,[[15,[20,[41,[20]]]]]],[[],15],[[],15],[42,[[15,[36,[41,[36]]]]]],[[],15],[[],15],[[],15],[[],15],[42,[[15,[37,[41,[37]]]]]],[[],15],[[],15],[[],15],[[],15],[[],[[15,[35,[41,[35]]]]]],[[],[[15,[20,[41,[20]]]]]],[[],[[15,[36,[41,[36]]]]]],[[],[[15,[37,[41,[37]]]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[17,14],17],[[25,24]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[43,28,40]],[[],44],[[],45],[43],[[44,28]],[[44,12],13],[[]],[[]],[[]],[[26,28,26,3],[[15,[43,29]]]],[44],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],0,0,[[]],[[]],[[]],[[]],[[],46],[47],[[46,28]],[[46,12],13],[[]],[[]],[[26,28,7],[[15,[47,29]]]],[46],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[30,42],[30,33],[[30,12],13],[[]],[[]],[[]],[[]],[30,42],[[30,18],[[15,[29]]]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,0,0,0,[[]],[[]],[[]],[[]],[[26,28,14,48,1,6,43],[[15,[49,29]]]],[[50,12],13],[[]],[[]],[[]],[[]],[49,[[15,[29]]]],[[],15],[42,[[15,[50,[41,[50]]]]]],[[],15],[[],[[15,[50,[41,[50]]]]]],[[],15],[[],15],[[],16],[[],16],0,0,0,0,0,[[]],[[]],[[]],[[]],[[26,28,26,26,2,9,6],[[15,[51,29]]]],[51],[[52,12],13],[[]],[[]],[[]],[[]],[51,40],[[51,18],40],[[],15],[[],15],[42,[[15,[52,[41,[52]]]]]],[[],[[15,[52,[41,[52]]]]]],[[],15],[[],15],[[],16],[[],16],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],53],[[],54],[[],55],[[54,28]],[[55,28]],[[]],[[]],[[]],[54],[55],[[]],[[]],[[]],[[54,14,14]],[[54,14,14,14,18]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[55,14,18,14]]],"p":[[3,"Rqn"],[3,"Sqn"],[3,"Cqn"],[3,"Pd"],[3,"Td"],[3,"Lkey"],[3,"Eqn"],[3,"Tirn"],[3,"Tisn"],[3,"FtId"],[3,"FgId"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[3,"TypeId"],[3,"CommandBuilder"],[3,"PhysicalAddress"],[3,"Vec"],[4,"CommandOpcode"],[4,"QueryHcaCapMaxOpMod"],[4,"QueryHcaCapCurrentOpMod"],[4,"AccessRegisterOpMod"],[3,"Command"],[3,"CommandQueue"],[3,"MappedPages"],[6,"BoxRefMut"],[15,"usize"],[15,"str"],[3,"InitializationSegment"],[4,"CommandQueueError"],[3,"CommandQueueEntry"],[15,"bool"],[4,"CmdState"],[4,"CommandDeliveryStatus"],[4,"CommandReturnStatus"],[4,"HcaPortType"],[3,"CommandCompletionStatus"],[3,"HCACapabilities"],[15,"u16"],[3,"TryFromPrimitiveError"],[15,"u8"],[3,"CompletionQueue"],[3,"CompletionQueueEntry"],[3,"CompletionQueueDoorbellRecord"],[3,"EventQueueEntry"],[3,"EventQueue"],[3,"Queue"],[3,"ReceiveQueue"],[4,"ReceiveQueueState"],[3,"SendQueue"],[4,"SendQueueState"],[3,"DoorbellRecord"],[3,"WorkQueueEntrySend"],[3,"WorkQueueEntryReceive"],[4,"ManagePagesOpMod"],[4,"QueryPagesOpMod"],[4,"QueryVportStateOpMod"],[4,"CommandTransportType"],[4,"InitializingState"]]},\
"mod_mgmt":{"doc":"","t":[13,3,13,17,13,17,3,4,17,17,13,17,17,13,13,13,17,13,4,13,3,3,3,17,17,3,13,17,17,3,13,17,4,6,3,6,3,6,6,17,17,17,17,13,13,13,3,13,6,3,6,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,5,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,12,12,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,12,12,12,0,11,11,11,12,12,12,5,0,11,12,12,12,5,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,5,5],"n":["AbsolutePath","AppCrateRef","Application","BSS_SECTION_NAME","Bss","CRATE_HASH_DELIMITER","CrateNamespace","CrateType","DATA_BSS_SECTION_FLAGS","DATA_SECTION_NAME","Data","EH_FRAME_SECTION_NAME","EXTRA_FILES_DIRECTORY_NAME","EhFrame","Executable","File","GCC_EXCEPT_TABLE_SECTION_NAME","GccExceptTable","IntoCrateObjectFile","Kernel","LoadedCrate","LoadedSection","LoadedSectionInner","MODULE_PREFIX_DELIMITER","NAMESPACES_DIRECTORY_NAME","NamespaceDir","Prefix","RODATA_SECTION_FLAGS","RODATA_SECTION_NAME","RelocationEntry","Rodata","SECTION_HASH_DELIMITER","SectionType","Shndx","StrRef","StrongCrateRef","StrongDependency","StrongSectionRef","SymbolMap","TEXT_SECTION_FLAGS","TEXT_SECTION_NAME","TLS_BSS_SECTION_NAME","TLS_DATA_SECTION_NAME","Text","TlsBss","TlsData","TlsDataImage","Userspace","WeakCrateRef","WeakDependent","WeakSectionRef","add_symbols","addend","address_range","as_func","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_on_write","cmp","copy_section_data_to","crate_name","crate_name_as_prefix","crate_name_from_path","crate_name_without_hash","crate_names","crates_dependent_on_me","crates_i_depend_on","create_application_namespace","data_pages","data_sections","data_sections_iter","debug_symbols_file","default","default_namespace_name","deref","deref","deref","deserialize","dir","drop","drop","dump_symbol_map","dump_symbol_map_recursive","eq","eq","eq","eq","find_section","find_symbol_table","find_symbols_starting_with","find_symbols_starting_with_and_namespace","find_weak_dependent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_crate","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_elf_relocation","from_module_name","get_containing_crate_name","get_containing_crate_name_ranges","get_crate","get_crate_and_namespace","get_crate_containing_address","get_crate_object_file","get_crate_object_file_starting_with","get_crate_object_files_starting_with","get_crate_starting_with","get_crates_starting_with","get_file_and_dir_names_starting_with","get_file_starting_with","get_files_starting_with","get_function_section","get_hash","get_initial_kernel_namespace","get_namespaces_directory","get_section_containing_address","get_symbol","get_symbol_and_namespace","get_symbol_or_load","get_symbol_starting_with","get_tls_initializer_data","get_type","global","global_sections","global_sections_iter","hash","init","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_absolute","is_data_or_bss","is_valid_crate_name_char","load_crate","load_crate_as_application","load_crates","mapped_pages","mapped_pages_offset","method_get_crate_object_file_starting_with","method_get_crate_object_files_starting_with","name","name","name","name_without_hash","ne","ne","new","new","new","object_file","offset","parent_crate","parse_nano_core","partial_cmp","pointer_value","recursive_namespace","reexported_symbols","relocation","relocation","replace_containing_crate_name","replace_nano_core_crates","rewrite_section_dependents","rodata_pages","section","section","section_name_str_ref","section_name_without_hash","sections","sections_dependent_on_me","sections_i_depend_on","serialize","size","start_address","text_pages","tls_sections","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_dependencies","write_crate_object_file","write_relocation","0","0","0","parse_nano_core","replace_nano_core_crates"],"q":["mod_mgmtmod_mgmt::IntoCrateObjectFile","","","mod_mgmt::parse_nano_core","mod_mgmt::replace_nano_core_crates"],"d":["An absolute path that points to the crate object file. ","An application crate that has been loaded into a …","","","A <code>bss</code> section is just like a data section, but is …","A crate’s name and its hash are separated by “-”, …","This struct represents a namespace of crates and their “…","The type of a crate, based on its object file naming …","<code>.data</code> and <code>.bss</code> sections are read-write and non-executable.","","A <code>data</code> section contains data that is both readable and …","","The name of the directory that contains all other “…","The <code>.eh_frame</code> section contains information about stack …","","A direct reference to the crate object file. This will be …","","A <code>.gcc_except_table</code> section contains landing pads for …","A type that can be converted into a crate object file.","","Represents a single crate whose object file has been  …","Represents a section that has been loaded and is part of a …","The parts of a <code>LoadedSection</code> that may be mutable, i.e.,  …","The Theseus Makefile appends prefixes onto bootloader …","The name of the directory that contains all of the …","A wrapper around a <code>Directory</code> reference that offers special …","A string prefix that will be used to search for the crate …","<code>.rodata</code> sections are read-only and non-executable.","","The information necessary to calculate and write a …","An <code>rodata</code> section contains read-only data, i.e., constants.","A section’s demangled name and its hash are separated by …","The possible types of sections that can be loaded from a …","A Section Header iNDeX (SHNDX), as specified by the ELF …","A wrapper around an <code>Arc&lt;str&gt;</code>: an immutable shared …","A Strong reference to a <code>LoadedCrate</code>.","A representation that the owner <code>A</code> of (a <code>LoadedSection</code> …","A Strong reference (<code>Arc</code>) to a <code>LoadedSection</code>.","A “symbol map” from a fully-qualified demangled symbol …","<code>.text</code> sections are read-only and executable.","","","","A <code>text</code> section contains executable code, i.e., functions. ","A <code>.tbss</code> section is a read-only section that holds all-zero …","A <code>.tdata</code> section is a read-only section that holds the …","An initialized TLS area data image ready to be used by a …","","A Weak reference to a <code>LoadedCrate</code>.","A representation that the <code>section</code> <code>A</code> in this struct depends …","A Weak reference (<code>Weak</code>) to a <code>LoadedSection</code>.","Adds only <em>global</em> symbols in the given <code>sections</code> iterator to …","The value that is added to the source section’s address  …","The range of <code>VirtualAddress</code>es covered by this section, …","Reinterprets this section’s underlying <code>MappedPages</code> …","","Obtain a reference to the inner <code>str</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Duplicates this <code>CrateNamespace</code> into a new <code>CrateNamespace</code>,  …","","Copies the actual data contents of this <code>LoadedSection</code> to …","The name of this crate.","Returns this crate name as a symbol prefix, including a …","Returns the crate name that is derived from a crate object …","Returns the substring of this crate’s name that excludes …","Returns a list of all of the crate names currently loaded …","Currently may contain duplicates!","Returns the set of crates that this crate depends on.  …","Create a new application <code>CrateNamespace</code> that uses the …","A tuple of:","The set of <code>.data</code> and <code>.bss</code> sections in this crate. The <code>Shndx</code>…","A convenience function to iterate over only the data …","The file that contains debug symbols for this crate.  …","","Returns the string suffix for use as the name  of the …","","","","","Returns the directory that this <code>CrateNamespace</code> is based on.","","","Simple debugging function that returns the entire symbol …","Same as <code>dump_symbol_map()</code>,  but includes symbols from …","","","","","Returns the <strong>first</strong> <code>LoadedSection</code> that matches the given …","Returns a reference to the symbol table in the given …","Returns a copied list of the corresponding <code>LoadedSection</code>s  …","Similar to <code>find_symbols_starting_with</code>, but also includes a …","Returns the index of the first <code>WeakDependent</code> object in …","","","","","","","","","","","","","","Iterates over all crates in this namespace and calls the …","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a tuple of (CrateType, &amp;str, &amp;str) based on the …","Parses the given symbol string to try to find the name of …","Same as <code>get_containing_crate_name()</code>, but returns the …","Acquires the lock on this <code>CrateNamespace</code>’s crate list …","Acquires the lock on this <code>CrateNamespace</code>’s crate list …","Finds the crate that contains the given <code>VirtualAddress</code> in …","Gets the given object file based on its crate name prefix. ","Like <code>get_crate_starting_with()</code>, but for crate <em>object file</em>s …","Like <code>get_crates_starting_with()</code>, but for crate <em>object file</em>…","Finds the <code>LoadedCrate</code> whose name starts with the given …","Finds the <code>LoadedCrate</code>s whose names start with the given …","Returns the list of file and directory names in this …","Finds the single file in this directory whose name starts …","Returns the list of files in this Directory whose name …","Returns the <code>LoadedSection</code> of type <code>SectionType::Text</code> that …","","Returns a reference to the default kernel namespace,  …","Returns the top-level directory that contains all of the …","Finds the section that contains the given <code>VirtualAddress</code> …","Finds the corresponding <code>LoadedSection</code> reference for the …","Like <code>get_symbol()</code>, but also returns the exact …","Finds the corresponding <code>LoadedSection</code> reference for the …","Returns a weak reference to the <code>LoadedSection</code> whose name …","Returns a new copy of this namespace’s initial TLS area, …","Returns the type of this section.","Whether or not this section’s symbol was exported …","The set of global symbols in this crate, including regular …","A convenience function to iterate over only the global …","","Initializes the module management system based on the …","The inner contents of a section that could possibly change …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the relocation type results in a …","Returns <code>true</code> if <code>Data</code> or <code>Bss</code>, otherwise <code>false</code>.","Crate names must be only alphanumeric characters, an …","Loads the specified crate into memory, allowing it to be …","Loads the specified application crate into this …","This function first loads all of the given crates’ …","The <code>MappedPages</code> that cover this section.","The offset into the <code>mapped_pages</code> where this section starts","Same as <code>get_crate_object_file_starting_with()</code>, but is a …","Same as <code>get_crate_object_files_starting_with()</code>, but is a …","Returns the const <code>&amp;str</code> name of this <code>SectionType</code>.","Returns the name of this <code>CrateNamespace</code>, which is just …","The full string name of this section, a fully-qualified …","Returns the substring of this section’s name that …","","","Create a new <code>LoadedSection</code>, with an empty <code>dependencies</code> …","Creates a new <code>CrateNamespace</code> that is completely empty (no …","Creates a new <code>NamespaceDir</code> that wraps the given <code>DirRef</code>.","The object file that this crate was loaded from.","The offset from the starting virtual address of the target …","The <code>LoadedCrate</code> object that contains/owns this section","Routines for parsing the <code>nano_core</code>, the fully-linked, …","","Returns the value of the TLS selft pointer for this TLS …","Returns the recursive namespace that this <code>CrateNamespace</code> …","The set of symbols that this crate’s global symbols are …","The details of the relocation action that was performed.","The details of the relocation action that was performed.","Replaces the <code>old_crate_name</code> substring in the given …","Routines for replacing the crates that comprise the …","Finds all of the weak dependents (sections that depend on …","A tuple of:","A strong reference to the <code>LoadedSection</code> <code>B</code> that the owner …","A weak reference to the <code>LoadedSection</code> <code>A</code> that depends on …","Returns the default name for the given <code>SectionType</code> as a …","Returns the substring of the given section’s name that …","A map containing all the sections in this crate. In …","The list of sections in foreign crates that depend on this …","The list of sections in foreign crates that this section …","","Returns the size in bytes of this section.","Returns the starting <code>VirtualAddress</code> of where this section …","A tuple of:","The set of thread-local storage (TLS) symbols in this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of this section, e.g., <code>.text</code>, <code>.rodata</code>, <code>.data</code>, <code>.bss</code>…","The type of relocation calculation that is performed  to …","","","","","","","","","","","","","","","Same as [new()<code>](#method.new), but uses the given </code>…","Insert the given crate object file based on its crate type …","Write an actual relocation entry.","","","","Parses and/or deserializes the file containing details …","See the module-level documentation for how this works. "],"i":[31,0,24,0,8,0,0,0,0,0,8,0,0,8,24,31,0,8,0,24,0,0,0,0,0,0,31,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,24,0,0,0,1,11,4,4,7,7,7,7,7,14,8,4,24,23,9,10,11,31,25,1,12,33,7,14,8,4,24,23,9,10,11,31,25,1,12,33,7,8,9,10,11,12,7,8,9,10,11,12,1,7,4,14,14,0,14,1,14,14,0,14,14,14,14,23,24,7,25,12,8,1,14,25,1,1,7,8,24,11,14,0,1,1,4,7,7,14,8,4,4,24,9,10,11,31,12,33,1,7,7,14,8,4,24,23,9,10,11,31,25,1,12,33,11,24,0,0,1,1,1,12,1,1,1,1,12,12,12,14,7,0,0,1,1,1,1,1,1,4,4,14,14,7,0,4,7,14,8,4,24,23,9,10,11,31,25,1,12,33,11,8,0,1,1,1,4,4,1,1,8,1,4,4,7,11,4,1,12,14,11,4,0,7,33,1,14,9,10,0,0,1,14,9,10,0,4,14,23,23,8,4,4,14,14,7,8,9,10,11,12,7,4,7,14,8,4,24,23,9,10,11,31,25,1,12,33,7,14,8,4,24,23,9,10,11,31,25,1,12,33,4,11,7,14,8,4,24,23,9,10,11,31,25,1,12,33,4,12,0,49,50,51,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],0,0,[4,[[6,[5]]]],[7,5],[7,5],[[]],[7],[7,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[7,7],13],[[4,4],[[6,[5]]]],0,[14,15],[16,5],[14,5],[[1,2],[[17,[7]]]],[14,[[17,[[18,[14]],19]]]],[14,[[17,[[18,[14]],19]]]],[[[21,[[20,[1]]]]],[[6,[[20,[1]],5]]]],0,0,[14,22],0,[[],23],[24,5],[7],[25,26],[12,27],[[],[[6,[8]]]],[1,12],[14],[25],[1,15],[1,15],[[7,7],2],[[8,8],2],[[24,24],2],[[11,11],2],[14,[[21,[20]]]],[28,[[6,[5]]]],[[1,5],17],[[1,5],17],[[4,20],[[21,[3]]]],[[7,29],[[6,[30]]]],[[7,29],[[6,[30]]]],[[14,29],[[6,[30]]]],[[8,29],[[6,[30]]]],[[4,29],[[6,[30]]]],[[4,29],[[6,[30]]]],[[24,29],[[6,[30]]]],[[9,29],[[6,[30]]]],[[10,29],[[6,[30]]]],[[11,29],[[6,[30]]]],[[31,29],32],[[12,29],32],[[33,29],32],[[1,2]],[[]],[5,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,11],[5,[[6,[5]]]],[5,[[17,[5,19]]]],[5,[[17,[[35,[3]],19]]]],[[1,5],[[21,[26]]]],[[20,5],21],[[1,36,2],[[21,[26]]]],[[12,5],[[21,[37]]]],[[20,5],21],[[20,5],17],[[20,5],21],[[20,5],17],[[12,5],[[17,[15]]]],[[12,5],[[21,[37]]]],[[12,5],[[17,[37]]]],[[14,5],[[21,[20]]]],[[],38],[[],[[21,[20]]]],[[],[[21,[27]]]],[[1,36,2],21],[[1,5],39],[[1,5],21],[[1,5,[21,[1]],40,2],39],[[1,5],39],[1,33],[4,8],0,0,[14,22],[7],[[[17,[41]],42],[[6,[20,5]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,2],[8,2],[43,2],[[1,37,[21,[1]],40,2],[[6,[5]]]],[[20,37,40,2],[[6,[25,5]]]],[[1,[21,[1]],40,2],[[6,[5]]]],0,0,[[1,5],21],[[1,5],17],[8,5],[1,5],0,[4,5],[[7,7],2],[[11,11],2],[[8,7,[20,[[46,[44,45]]]],3,36,3,2,[18,[14]]],4],[[15,12,[21,[[20,[1]]]]],1],[27,12],0,0,0,0,[[7,7],[[21,[13]]]],[33,3],[1,[[21,[20]]]],0,0,0,[[5,5,5],[[21,[15]]]],0,[[47,47,40],[[6,[5]]]],0,0,0,[8,7],[5,5],0,0,0,[8,6],[4,3],[4,36],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,0,[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[8,7,[20,[[46,[44,45]]]],3,36,3,2,[18,[14]],[17,[9,19]],[17,[10,19]]],4],[[12,5],[[6,[37,5]]]],[[11,44,3,36,2],[[6,[5]]]],0,0,0,[[20,44,44,44,2],6],[[20,26,40],[[6,[5]]]]],"p":[[3,"CrateNamespace"],[15,"bool"],[15,"usize"],[3,"LoadedSection"],[15,"str"],[4,"Result"],[3,"StrRef"],[4,"SectionType"],[3,"StrongDependency"],[3,"WeakDependent"],[3,"RelocationEntry"],[3,"NamespaceDir"],[4,"Ordering"],[3,"LoadedCrate"],[3,"String"],[3,"Path"],[3,"Vec"],[3,"CowWeak"],[3,"Global"],[3,"Arc"],[4,"Option"],[8,"Iterator"],[3,"LoadedSectionInner"],[4,"CrateType"],[3,"AppCrateRef"],[6,"StrongCrateRef"],[6,"DirRef"],[3,"ElfFile"],[3,"Formatter"],[3,"Error"],[4,"IntoCrateObjectFile"],[6,"Result"],[3,"TlsDataImage"],[3,"Rela"],[3,"Range"],[3,"VirtualAddress"],[6,"FileRef"],[15,"u64"],[6,"WeakSectionRef"],[6,"MmiRef"],[3,"BootloaderModule"],[3,"MemoryManagementInfo"],[15,"char"],[3,"MappedPages"],[3,"Spin"],[3,"Mutex"],[6,"StrongSectionRef"],[3,"TypeId"],[13,"File"],[13,"AbsolutePath"],[13,"Prefix"]]},\
"mouse":{"doc":"A basic driver for a mouse connected to the legacy PS2 …","t":[5],"n":["init"],"q":["mouse"],"d":["Initialize the PS2 mouse driver and register its interrupt …"],"i":[0],"f":[[[[2,[1]]],[[4,[3]]]]],"p":[[4,"Event"],[3,"Queue"],[15,"str"],[4,"Result"]]},\
"mouse_data":{"doc":"","t":[3,3,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["ButtonAction","Displacement","MouseEvent","MouseMovement","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buttonact","clone","clone","clone","clone","default","default","default","displacement","down","fifth_button_hold","fmt","fmt","fmt","fmt","fourth_button_hold","from","from","from","from","into","into","into","into","left","left_button_hold","mousemove","new","read_from_data","read_from_data","read_from_data","right","right_button_hold","scrolling_down","scrolling_up","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","up","x","y"],"q":["mouse_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,4,1,2,3,4,4,1,2,3,4,1,2,3,4,3,2,1,2,3,4,2,1,2,3,4,1,2,3,4,3,2,4,4,1,2,3,3,2,3,3,1,2,3,4,1,2,3,4,1,2,3,4,3,1,1],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[3,3],[4,4],[[],1],[[],2],[[],3],0,0,0,[[1,5],6],[[2,5],6],[[3,5],6],[[4,5],6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[2,3,1],4],[[1,7]],[[2,7]],[[3,7]],0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],0,0,0],"p":[[3,"Displacement"],[3,"ButtonAction"],[3,"MouseMovement"],[3,"MouseEvent"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"multicore_bringup":{"doc":"Functions for initializing and bringing up other CPU …","t":[7,3,11,11,11,11,11,11,5,12,11,12,11,11,11,11,12],"n":["GRAPHIC_INFO","GraphicInfo","borrow","borrow_mut","clone","clone_into","fmt","from","handle_ap_cores","height","into","physical_address","to_owned","try_from","try_into","type_id","width"],"q":["multicore_bringup","","","","","","","","","","","","","","","",""],"d":["Graphic mode information that will be updated after …","A structure to access information about the graphical …","","","","","","Returns the argument unchanged.","Starts up and sets up AP cores based on system information …","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[]],[[1,2],3],[[]],[[4,5,5,6],[[9,[7,8]]]],0,[[]],0,[[]],[[],9],[[],9],[[],10],0],"p":[[3,"GraphicInfo"],[3,"Formatter"],[6,"Result"],[6,"MmiRef"],[3,"VirtualAddress"],[4,"Option"],[15,"u8"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"multiple_heaps":{"doc":"An implementation of an allocator that uses multiple …","t":[3,17,11,11,11,11,11,11,5,11,5,11,11,11],"n":["MultipleHeaps","PER_CORE_HEAP_INITIAL_SIZE_PAGES","alloc","borrow","borrow_mut","dealloc","empty","from","init_individual_heap","into","switch_to_multiple_heaps","try_from","try_into","type_id"],"q":["multiple_heaps","","","","","","","","","","","","",""],"d":["An allocator that contains multiple heaps. The heap that …","Starting size of each per-core heap. ","Allocates the given <code>layout</code> from the heap of the core the …","","","Deallocates the memory at the address given by <code>ptr</code>. Memory …","","Returns the argument unchanged.","Initializes the heap given by <code>key</code>. There are 11 size …","Calls <code>U::from(self)</code>.","The setup routine for multiple heaps. It creates and …","","",""],"i":[0,0,1,1,1,1,1,1,0,1,0,1,1,1],"f":[0,0,[[1,2],3],[[]],[[]],[[1,3,2]],[[],1],[[]],[[4,1],[[6,[5]]]],[[]],[[],[[6,[5]]]],[[],6],[[],6],[[],7]],"p":[[3,"MultipleHeaps"],[3,"Layout"],[15,"u8"],[15,"usize"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"mutex_preemption":{"doc":"Offers preemption-safe <code>Mutex</code> and <code>RwLock</code> types that …","t":[3,3,6,6,3,3,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MutexPreempt","MutexPreemptGuard","MutexPreemptGuardRef","MutexPreemptGuardRefMut","RwLockPreempt","RwLockPreemptReadGuard","RwLockPreemptReadGuardRef","RwLockPreemptWriteGuard","RwLockPreemptWriteGuardRefMut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","deref","deref","deref","deref_mut","deref_mut","fmt","fmt","force_read_decrement","force_unlock","force_write_unlock","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","is_locked","lock","lock","lock","lock_mut","lock_mut","new","new","read","reader_count","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock_mut","try_lock_mut","try_read","try_write","type_id","type_id","type_id","type_id","type_id","write","writer_count"],"q":["mutex_preemption","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A mutual exclusion wrapper based on <code>spin::Mutex</code> that …","A guard that allows the locked data to be accessed, during …","Typedef of a owning reference that uses a <code>MutexPreemptGuard</code>…","Typedef of a mutable owning reference that uses a …","A multi-reader, single-writer mutual exclusion wrapper …","A guard that allows the locked data to be immutably …","Typedef of a owning reference that uses a …","A guard that allows the locked data to be mutably accessed,","Typedef of a mutable owning reference that uses a …","","","","","","","","","","","","","","","","","","","","Force decrement the reader count.","Force unlock the spinlock.","Force unlock exclusive write access.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a mutable reference to the underlying data.","","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this MutexPreempt, returning the underlying data.","","","Consumes this <code>RwLockPreempt</code>, returning the underlying data.","Returns <code>true</code> if the lock is currently held.","","Returns <code>true</code> if the lock is currently held.","","Spins until the lock can be acquired, upon which …","","","","","Creates a new lock wrapping the supplied data.","Creates a new lock wrapping the supplied data.","Locks this <code>RwLockPreempt</code> with shared read (immutable) …","Return the number of readers that currently hold the lock …","","","","","","","","","","","Tries to lock the MutexPreempt. If it is already locked, …","","","","","Attempt to acquire this lock with shared read (immutable) …","Attempt to acquire this lock with exclusive write …","","","","","","Lock this <code>RwLockPreempt</code> with exclusive write access, …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,3,5,4,6,7,3,5,4,6,7,3,4,5,6,7,5,7,3,4,4,3,4,3,5,4,6,7,3,3,4,4,3,5,4,6,7,3,3,4,4,3,3,4,4,3,3,4,3,4,3,4,4,4,3,5,4,6,7,3,5,4,6,7,3,3,4,3,4,4,4,3,5,4,6,7,4,4],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[3,[[0,[1,2]]]]]],[[],[[4,[[0,[1,2]]]]]],[[[5,[1]]]],[[[6,[1]]]],[[[7,[1]]]],[[[5,[1]]]],[[[7,[1]]]],[[[3,[[0,[1,8]]]],9],10],[[[4,[[0,[1,8]]]],9],10],[[[4,[1]]]],[[[3,[1]]]],[[[4,[1]]]],[[]],[[]],[[]],[[]],[[]],[3],[[[3,[1]]]],[4],[[[4,[1]]]],[[]],[[]],[[]],[[]],[[]],[3],[3],[4],[4],[[[3,[1]]],11],[3,11],[[[4,[1]]],11],[4,11],[[[3,[1]]],[[5,[1]]]],[3],[4],[3],[4],[[],3],[[],4],[[[4,[1]]],[[6,[1]]]],[[[4,[1]]],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[[3,[1]]],[[14,[[5,[1]]]]]],[3,14],[4,14],[3,14],[4,14],[[[4,[1]]],[[14,[[6,[1]]]]]],[[[4,[1]]],[[14,[[7,[1]]]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[[4,[1]]],[[7,[1]]]],[[[4,[1]]],12]],"p":[[8,"Sized"],[8,"Default"],[3,"MutexPreempt"],[3,"RwLockPreempt"],[3,"MutexPreemptGuard"],[3,"RwLockPreemptReadGuard"],[3,"RwLockPreemptWriteGuard"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[15,"usize"],[4,"Result"],[4,"Option"],[3,"TypeId"]]},\
"mutex_sleep":{"doc":"Locking types that put a task to sleep while it waits for …","t":[3,3,6,6,3,3,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MutexSleep","MutexSleepGuard","MutexSleepGuardRef","MutexSleepGuardRefMut","RwLockSleep","RwLockSleepReadGuard","RwLockSleepReadGuardRef","RwLockSleepWriteGuard","RwLockSleepWriteGuardRefMut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","deref","deref","deref","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","force_read_decrement","force_write_unlock","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","is_locked","lock","lock","lock","lock_mut","lock_mut","new","new","read","reader_count","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock_mut","try_lock_mut","try_read","try_write","type_id","type_id","type_id","type_id","type_id","write","writer_count"],"q":["mutex_sleep","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A mutual exclusion wrapper that puts a <code>Task</code> to sleep while …","A guard that allows the locked data to be accessed, during …","Typedef of a owning reference that uses a <code>MutexSleepGuard</code> …","Typedef of a mutable owning reference that uses a …","A multi-reader, single-writer mutual exclusion wrapper …","A guard that allows the locked data to be immutably …","Typedef of a owning reference that uses a …","A guard that allows the locked data to be mutably accessed,","Typedef of a mutable owning reference that uses a …","","","","","","","","","","","","","","","","","","","","","","","Force decrement the reader count.","Force unlock exclusive write access.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Consumes this <code>MutexSleep</code>, returning the underlying data.","Consumes this <code>RwLockSleep</code>, returning the underlying data.","","","Returns <code>true</code> if the lock is currently held.","Returns <code>true</code> if the lock is currently held.","","","Blocks until the lock is acquired by putting this <code>Task</code> to …","","","","Creates a new lock wrapping the supplied data.","Creates a new lock wrapping the supplied data.","Locks this <code>RwLockSleep</code> with shared read (immutable) access.","Return the number of readers that currently hold the lock …","","","","","","","","","","","","Tries to lock the MutexSleep. If it is already locked, it …","","","","Attempt to acquire this lock with shared read (immutable) …","Attempt to acquire this lock with exclusive write …","","","","","","Locks this <code>RwLockSleep</code> with exclusive write (mutable) …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,3,5,4,6,7,3,5,4,6,7,3,4,5,6,7,5,7,5,6,7,3,4,4,4,3,5,4,6,7,3,3,4,4,3,5,4,6,7,3,3,4,4,3,3,4,4,3,3,4,3,4,3,4,4,4,3,5,4,6,7,3,5,4,6,7,3,3,4,3,4,4,4,3,5,4,6,7,4,4],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[3,[[0,[1,2]]]]]],[[],[[4,[[0,[1,2]]]]]],[[[5,[1]]]],[[[6,[1]]]],[[[7,[1]]]],[[[5,[1]]]],[[[7,[1]]]],[[[5,[1]]]],[[[6,[1]]]],[[[7,[1]]]],[[[3,[[0,[1,8]]]],9],10],[[[4,[[0,[1,8]]]],9],10],[[[4,[1]]]],[[[4,[1]]]],[[]],[[]],[[]],[[]],[[]],[3],[[[3,[1]]]],[[[4,[1]]]],[4],[[]],[[]],[[]],[[]],[[]],[3],[3],[4],[4],[3,11],[[[3,[1]]],11],[[[4,[1]]],11],[4,11],[3],[[[3,[1]]],[[13,[[5,[1]],12]]]],[4],[3],[4],[[],3],[[],4],[[[4,[1]]],[[13,[[6,[1]],12]]]],[[[4,[1]]],14],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[3,15],[[[3,[1]]],[[15,[[5,[1]]]]]],[4,15],[3,15],[4,15],[[[4,[1]]],[[15,[[6,[1]]]]]],[[[4,[1]]],[[15,[[7,[1]]]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[[4,[1]]],[[13,[[7,[1]],12]]]],[[[4,[1]]],14]],"p":[[8,"Sized"],[8,"Default"],[3,"MutexSleep"],[3,"RwLockSleep"],[3,"MutexSleepGuard"],[3,"RwLockSleepReadGuard"],[3,"RwLockSleepWriteGuard"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[15,"str"],[4,"Result"],[15,"usize"],[4,"Option"],[3,"TypeId"]]},\
"nano_core":{"doc":"The aptly-named tiny crate containing the first OS code to …","t":[5],"n":["nano_core_start"],"q":["nano_core"],"d":["The main entry point into Theseus, that is, the first Rust …"],"i":[0],"f":[[[1,1]]],"p":[[15,"usize"]]},\
"network_interface_card":{"doc":"","t":[8,10,10,10,10],"n":["NetworkInterfaceCard","get_received_frame","mac_address","poll_receive","send_packet"],"q":["network_interface_card","","","",""],"d":["A trait that defines the necessary minimum functions that …","Returns the earliest <code>ReceivedFrame</code>, which is essentially a …","Returns the MAC address that this NIC is configured with. …","Poll the NIC for received frames.  Can be used as an …","Sends a packet contained in the given <code>transmit_buffer</code> out …"],"i":[0,6,6,6,6],"f":[0,[[],[[2,[1]]]],[[]],[[],[[4,[3]]]],[5,[[4,[3]]]]],"p":[[3,"ReceivedFrame"],[4,"Option"],[15,"str"],[4,"Result"],[3,"TransmitBuffer"],[8,"NetworkInterfaceCard"]]},\
"network_manager":{"doc":"","t":[7,8,6,5,10,10,10,10,10,10,10],"n":["NETWORK_INTERFACES","NetworkInterface","NetworkInterfaceRef","add_to_network_interfaces","ethernet_addr","has_ip_addr","ip_addrs","poll","routes","routes_mut","set_ethernet_addr"],"q":["network_manager","","","","","","","","","",""],"d":["A list of all of the available and initialized network …","A trait that represents a Network Interface within …","A trait object wrapped in an Arc and Mutex that allows  …","Add a Nic to the global list of network interfaces. The …","Get the Ethernet address of the interface.","Check whether the interface has the given IP address …","Get the IP addresses of the interface.","Polls (or flushes) the network interface, which should be …","","","Set the Ethernet address of the interface."],"i":[0,0,0,0,1,1,1,1,1,1,1],"f":[0,0,0,[[[0,[1,2]]]],[[],3],[4,5],[[]],[[6,7],[[8,[5]]]],[[],9],[[],9],[3]],"p":[[8,"NetworkInterface"],[8,"Send"],[3,"Address"],[4,"Address"],[15,"bool"],[3,"Set"],[3,"Instant"],[6,"Result"],[3,"Routes"]]},\
"nic_buffers":{"doc":"Defines buffers that are used to send and receive packets.","t":[12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11],"n":["0","ReceiveBuffer","ReceivedFrame","TransmitBuffer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","from","from","from","into","into","into","length","length","mp","mp","new","new","phys_addr","phys_addr","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["nic_buffers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A buffer that stores a packet (a piece of an Ethernet …","A network (e.g., Ethernet) frame that has been received by …","A buffer that stores a packet to be transmitted through …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates a new TransmitBuffer with the specified size in …","Creates a new ReceiveBuffer with the given <code>MappedPages</code>, …","","","","","","","","","","",""],"i":[10,0,0,0,1,3,10,1,3,10,1,3,1,3,3,1,3,10,1,3,10,1,3,1,3,1,3,1,3,1,3,10,1,3,10,1,3,10],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[3,2],[1,2],[3,2],[3],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[4,[[6,[1,5]]]],[[2,7,4,8],3],0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],9],[[],9],[[],9]],"p":[[3,"TransmitBuffer"],[3,"MappedPages"],[3,"ReceiveBuffer"],[15,"u16"],[15,"str"],[4,"Result"],[3,"PhysicalAddress"],[3,"Queue"],[3,"TypeId"],[3,"ReceivedFrame"]]},\
"nic_initialization":{"doc":"Functions that are used in a NIC initialization procedure.","t":[17,5,5,5,5,5],"n":["NIC_MAPPING_FLAGS","allocate_device_register_memory","allocate_memory","init_rx_buf_pool","init_rx_queue","init_tx_queue"],"q":["nic_initialization","","","","",""],"d":["The mapping flags used for pages that the NIC will map.","Allocates memory for the NIC registers","Helper function to allocate memory at required address","Initialize the receive buffer pool from where receive …","Steps to create and initialize a receive descriptor queue","Steps to create and initialize a transmit descriptor queue"],"i":[0,0,0,0,0,0],"f":[0,[[1,2],[[5,[3,4]]]],[[2,6],[[5,[3,4]]]],[[6,7,8],[[5,[4]]]],[[6,8,6],[[5,[4]]]],[6,[[5,[[9,[3]],4]]]]],"p":[[3,"PciDevice"],[3,"PhysicalAddress"],[3,"MappedPages"],[15,"str"],[4,"Result"],[15,"usize"],[15,"u16"],[3,"Queue"],[6,"BoxRefMut"]]},\
"nic_queues":{"doc":"Defines the receive and transmit queues that store a ring …","t":[17,3,8,3,8,11,11,11,11,12,12,12,11,11,12,12,11,11,12,12,11,12,12,12,11,12,12,12,12,12,11,10,10,10,10,10,10,10,10,10,10,11,11,11,11,12,12,11,11],"n":["NIC_MAPPING_FLAGS","RxQueue","RxQueueRegisters","TxQueue","TxQueueRegisters","borrow","borrow","borrow_mut","borrow_mut","cpu_id","cpu_id","filter_num","from","from","id","id","into","into","num_rx_descs","num_tx_descs","poll_queue_and_store_received_packets","received_frames","regs","regs","return_frame","rx_buffer_pool","rx_buffer_size_bytes","rx_bufs_in_use","rx_cur","rx_descs","send_on_queue","set_rdbah","set_rdbal","set_rdh","set_rdlen","set_rdt","set_tdbah","set_tdbal","set_tdh","set_tdlen","set_tdt","try_from","try_from","try_into","try_into","tx_cur","tx_descs","type_id","type_id"],"q":["nic_queues","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The mapping flags used for pages that the NIC will map.","A struct that holds all information for one receive queue. …","The register trait that gives access to only those …","A struct that holds all information for a transmit queue.  …","The register trait that gives access to only those …","","","","","The cpu which this queue is mapped to.  This in itself …","The cpu which this queue is mapped to.  This in itself …","The filter id for the physical NIC filter that is set for …","Returns the argument unchanged.","Returns the argument unchanged.","The number of the queue, stored here for our convenience.","The number of the queue, stored here for our convenience.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The number of receive descriptors in the descriptor ring","The number of transmit descriptors in the descriptor ring","Polls the queue and removes all received packets from it. …","The queue of received Ethernet frames, ready for …","Registers for this receive queue","Registers for this transmit queue","Returns the earliest received ethernet frame.","Pool where <code>ReceiveBuffer</code>s are stored.","","The list of rx buffers, in which the index in the vector …","Current receive descriptor index","Receive descriptors","Sends a packet on the transmit queue","","","","","","","","","","","","","","","Current transmit descriptor index","Transmit descriptors ","",""],"i":[0,0,0,0,0,3,10,3,10,3,10,3,3,10,3,10,3,10,3,10,3,3,3,10,3,3,3,3,3,3,10,1,1,1,1,1,8,8,8,8,8,3,10,3,10,10,10,3,10],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],0,0,[[]],[[]],0,0,[[[3,[1,2]]],[[5,[4]]]],0,0,0,[[[3,[1,2]]],[[7,[6]]]],0,0,0,0,0,[[[10,[8,9]],11]],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[],5],[[],5],[[],5],[[],5],0,0,[[],13],[[],13]],"p":[[8,"RxQueueRegisters"],[8,"RxDescriptor"],[3,"RxQueue"],[15,"str"],[4,"Result"],[3,"ReceivedFrame"],[4,"Option"],[8,"TxQueueRegisters"],[8,"TxDescriptor"],[3,"TxQueue"],[3,"TransmitBuffer"],[15,"u32"],[3,"TypeId"]]},\
"ota_update_client":{"doc":"Functions to communicate with a network server that …","t":[4,17,3,3,13,13,5,11,11,11,11,11,11,12,5,5,5,5,5,11,11,11,11,11,11,11,12,12,5,12,11,11,11,11,11,11,11,11,11,12,12],"n":["CrateSet","DIFF_FILE_NAME","Diff","DownloadedFile","Exclude","Include","as_lines","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","content","default_remote_endpoint","download_available_update_builds","download_crates","download_diff","download_listing","from","from","from","includes","into","into","into","name","pairs","parse_diff_lines","state_transfer_functions","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0"],"q":["ota_update_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ota_update_client::CrateSet",""],"d":["An enum used for specifying which crate files to download …","The name (and relative path) of the diff file inside each …","A representation of an diff file used to define an …","A file that has been downloaded over the network,  …","The set of crates to exclude, i.e., all crates except for …","The set of crates to include, i.e., only these crates will …","Convenience function for converting a byte stream that is …","","","","","","","","The default remote endpoint, server IP and port, of the …","Connects to the update server over the given network …","Connects to the update server over the given network …","Connects to the update server over the given network …","Connects to the update server over the given network …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns true if this <code>CrateSet</code> specifies that the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","A list of tuples in which the first element is the old …","Parses a series of diff lines into a representation of an …","The list of state transfer functions which should be …","","","","","","","","","","",""],"i":[0,0,0,0,9,9,0,8,9,11,8,9,11,8,0,0,0,0,0,8,9,11,9,8,9,11,8,11,0,11,8,9,11,8,9,11,8,9,11,13,14],"f":[0,0,0,0,0,0,[[],[[4,[[2,[1]],3]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],5],[[6,5],[[4,[[2,[1]],3]]]],[[6,5,3,[7,[1]]],[[4,[[2,[8]],3]]]],[[6,5,3],[[4,[[2,[1]],3]]]],[[6,5,3],[[4,[[2,[1]],3]]]],[[]],[[]],[[]],[[9,3],10],[[]],[[]],[[]],0,0,[2,[[4,[11,3]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12],[[],12],0,0],"p":[[3,"String"],[3,"Vec"],[15,"str"],[4,"Result"],[3,"Endpoint"],[6,"NetworkInterfaceRef"],[3,"BTreeSet"],[3,"DownloadedFile"],[4,"CrateSet"],[15,"bool"],[3,"Diff"],[3,"TypeId"],[13,"Include"],[13,"Exclude"]]},\
"page_allocator":{"doc":"Provides an allocator for virtual memory pages. The …","t":[3,3,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11],"n":["AllocatedPages","DeferredAllocAction","allocate_pages","allocate_pages_at","allocate_pages_by_bytes","allocate_pages_by_bytes_at","allocate_pages_by_bytes_deferred","allocate_pages_deferred","borrow","borrow","borrow_mut","borrow_mut","deref","drop","drop","empty","fmt","from","from","init","into","into","merge","split","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["page_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents a range of allocated <code>VirtualAddress</code>es, …","A series of pending actions related to page allocator …","Allocates the given number of pages with no constraints on …","Allocates the given number of pages starting at (inclusive …","Allocates pages with no constraints on the starting …","Allocates pages starting at the given <code>VirtualAddress</code> with …","Similar to <code>allocated_pages_deferred()</code>, but accepts a size …","The core page allocation routine that allocates the given …","","","","","","","","Returns an empty AllocatedPages object that performs no …","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize the page allocator.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Merges the given <code>AllocatedPages</code> object <code>ap</code> into this …","Splits this <code>AllocatedPages</code> into two separate <code>AllocatedPages</code>…","","","","","",""],"i":[0,0,0,0,0,0,0,0,2,8,2,8,2,2,8,2,2,2,8,0,2,8,2,2,2,8,2,8,2,8],"f":[0,0,[1,[[3,[2]]]],[[4,1],[[6,[2,5]]]],[1,[[3,[2]]]],[[4,1],[[6,[2,5]]]],[[[3,[4]],1],[[6,[5]]]],[[[3,[4]],1],[[6,[5]]]],[[]],[[]],[[]],[[]],[2,7],[2],[8],[[],2],[[2,9],10],[[]],[[]],[4,[[6,[5]]]],[[]],[[]],[[2,2],[[6,[2]]]],[[2,11],[[6,[2]]]],[[],6],[[],6],[[],6],[[],6],[[],12],[[],12]],"p":[[15,"usize"],[3,"AllocatedPages"],[4,"Option"],[3,"VirtualAddress"],[15,"str"],[4,"Result"],[3,"PageRange"],[3,"DeferredAllocAction"],[3,"Formatter"],[6,"Result"],[3,"Page"],[3,"TypeId"]]},\
"page_table_entry":{"doc":"Defines the structure of Page Table Entries (PTEs) on …","t":[13,13,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Exclusive","NonExclusive","PageTableEntry","UnmapResult","UnmappedFrames","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","flags","from","from","from","into","into","into","is_unused","pointed_frame","set_entry","set_flags","set_unmapped","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","zero","0","0"],"q":["page_table_entry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","page_table_entry::UnmapResult",""],"d":["","","A page table entry, which is a <code>u64</code> value under the hood.","The frames returned from the action of unmapping a page …","A range of frames that have been unmapped from a …","","","","","","","","Returns this <code>PageTableEntry</code>’s flags.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this entry is unused, i.e., cleared/zeroed …","Returns the physical <code>Frame</code> pointed to (mapped by) this …","Sets this <code>PageTableEntry</code> to map the given <code>frame</code> with the …","Sets the flags components of this <code>PageTableEntry</code> to …","Removes the mapping represented by this page table entry.","","","","","","","","","","","Zeroes out this entry, setting it as “unused”.","",""],"i":[9,9,0,0,0,9,1,3,9,1,3,1,3,9,1,3,9,1,3,3,3,3,3,3,9,1,3,9,1,3,9,1,3,3,3,13,14],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[3,5],[3,[[7,[6]]]],[[3,8,4]],[[3,4]],[3,9],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[3,12],[3],0,0],"p":[[3,"UnmappedFrames"],[3,"FrameRange"],[3,"PageTableEntry"],[3,"EntryFlags"],[15,"bool"],[3,"Frame"],[4,"Option"],[3,"AllocatedFrame"],[4,"UnmapResult"],[4,"Result"],[3,"TypeId"],[15,"u64"],[13,"Exclusive"],[13,"NonExclusive"]]},\
"panic_entry":{"doc":"Provides the default entry points and lang items for …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"panic_wrapper":{"doc":"Provides types and simple routines for handling panics. …","t":[5],"n":["panic_wrapper"],"q":["panic_wrapper"],"d":["Performs the standard panic handling routine, which …"],"i":[0],"f":[[1,[[3,[2]]]]],"p":[[3,"PanicInfo"],[15,"str"],[4,"Result"]]},\
"path":{"doc":"","t":[13,17,17,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CurrentDir","EXTENSION_DELIMITER","PATH_DELIMITER","ParentDir","Path","PathComponent","RootDir","as_string","basename","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","components","deref","deref_mut","eq","extension","file_stem","fmt","fmt","from","from","from","get","get_absolute","get_dir","get_file","hash","into","into","is_absolute","ne","new","rcomponents","relative","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","A structure that represents a relative or absolute path to …","","","","Returns just the file name, i.e., the trailling component …","","","","","","","Returns an iterator over the components of this <code>Path</code>, …","","","","Returns the file extension, if present.  If there are …","Like <code>basename()</code>, but excludes the file extension, if …","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the file or directory specified by the given path, ","Returns the file or directory specified by the given …","Returns the file specified by the given path, which can be …","Returns the file specified by the given path, which can be …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a boolean indicating whether this Path is absolute,","","Creates a new <code>Path</code> from the given String.","Returns a reverse iterator over the components of this <code>Path</code>…","Returns a <code>Path</code> that expresses a relative path from this …","","","","","","","",""],"i":[1,0,0,1,0,0,1,1,3,1,3,1,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,1,3,1,3,1,3],"f":[0,0,0,0,0,0,0,[1,2],[3,4],[[]],[[]],[[]],[[]],[3,3],[[]],[3,5],[3,2],[3,2],[[3,3],6],[3,[[7,[4]]]],[3,4],[[3,8],[[10,[9]]]],[[3,8],11],[[]],[2,3],[[]],[[3,12],[[7,[13]]]],[3,[[7,[13]]]],[[3,12],[[7,[12]]]],[[3,12],[[7,[14]]]],[3],[[]],[[]],[3,6],[[3,3],6],[2,3],[3,5],[[3,3],[[7,[3]]]],[[]],[[],2],[[],10],[[],10],[[],10],[[],10],[[],15],[[],15]],"p":[[4,"PathComponent"],[3,"String"],[3,"Path"],[15,"str"],[8,"Iterator"],[15,"bool"],[4,"Option"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[6,"DirRef"],[4,"FileOrDir"],[6,"FileRef"],[3,"TypeId"]]},\
"pause":{"doc":"Offers the <code>pause</code> instruction, which rustc used to use for  …","t":[5],"n":["spin_loop_hint"],"q":["pause"],"d":["A wrapper around the <code>pause</code> x86 ASM function.  On …"],"i":[0],"f":[[[]]],"p":[]},\
"pci":{"doc":"","t":[13,17,17,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,4,3,3,12,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,11,12,12,12,11,11,11,11,12,12,11,5,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["IoPort","MSIX_CAPABILITY","MSI_CAPABILITY","MemoryMapped","PCI_BAR0","PCI_BAR1","PCI_BAR2","PCI_BAR3","PCI_BAR4","PCI_BAR5","PCI_BIST","PCI_CACHE_LINE_SIZE","PCI_CAPABILITIES","PCI_CARDBUS_CIS","PCI_CLASS","PCI_COMMAND","PCI_DEVICE_ID","PCI_EXPANSION_ROM_BASE","PCI_HEADER_TYPE","PCI_INTERRUPT_LINE","PCI_INTERRUPT_PIN","PCI_LATENCY_TIMER","PCI_MAX_LATENCY","PCI_MIN_GRANT","PCI_PROG_IF","PCI_REVISION_ID","PCI_STATUS","PCI_SUBCLASS","PCI_SUBSYSTEM_ID","PCI_SUBSYSTEM_VENDOR_ID","PCI_VENDOR_ID","PciBus","PciConfigSpaceAccessMechanism","PciDevice","PciLocation","bars","bist","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus","bus_number","cache_line_size","class","clone","clone_into","command","deref","deref_mut","determine_mem_base","determine_mem_size","device_id","devices","eq","find_pci_capability","fmt","fmt","fmt","fmt","from","from","from","from","function","get_pci_buses","get_pci_device_bsf","hash","header_type","int_line","int_pin","into","into","into","into","latency_timer","location","ne","pci_device_iter","pci_enable_msi","pci_enable_msix","pci_read_16","pci_read_32","pci_read_8","pci_set_command_bus_master_bit","pci_set_interrupt_disable_bit","pci_write","prog_if","revision_id","slot","status","subclass","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vendor_id"],"q":["pci","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A PCI bus, which contains a list of PCI devices on that …","Lists the 2 possible PCI configuration space access …","Contains information common to every type of PCI Device, …","The bus, slot, and function number of a given PCI device. …","The six Base Address Registers (BARs)","","","","","","","","","","","The number identifier of this PCI bus.","","The class code, used to determine device type.","","","","","","Returns the base address of the memory region specified by …","Returns the size in bytes of the memory region specified …","","The list of devices attached to this PCI bus.","","Explores the PCI config space and returns address of …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a list of all PCI buses in this system. If the PCI …","Returns a reference to the <code>PciDevice</code> with the given bus, …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","the bus, slot, and function number that locates this PCI …","","Returns an iterator that iterates over all <code>PciDevice</code>s, in …","Enable MSI interrupts for a PCI device. We assume the …","Enable MSI-X interrupts for a PCI device. Only the enable …","Read 16-bit data at the specified <code>offset</code> from this PCI …","read 32-bit data at the specified <code>offset</code> from the PCI …","Read 8-bit data at the specified <code>offset</code> from the PCI …","Sets the PCI device’s bit 3 in the command portion, …","Sets the PCI device’s command bit 10 to disable legacy …","Write 32-bit data to the specified <code>offset</code> for the PCI …","The programming interface of this PCI device, also used to …","","","","The subclass code, used to determine device type.","","","","","","","","","","","","","","",""],"i":[20,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,20,11,1,3,20,11,1,3,1,11,3,3,1,1,3,3,3,3,3,3,11,1,1,11,1,1,3,20,11,1,3,1,0,0,1,3,3,3,20,11,1,3,3,3,1,0,3,3,1,1,1,1,1,1,3,3,1,3,3,1,1,20,11,1,3,20,11,1,3,20,11,1,3,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],0,0,0,[1,1],[[]],0,[3,1],[3,1],[[3,4],[[7,[5,6]]]],[[3,4],8],0,0,[[1,1],9],[[1,2],[[10,[2]]]],[[11,12],13],[[1,12],[[7,[14]]]],[[1,12],[[7,[14]]]],[[3,12],13],[[]],[[]],[[]],[[]],[1,2],[[],15],[[2,2,2],[[10,[3]]]],[1],0,0,0,[[]],[[]],[[]],[[]],0,0,[[1,1],9],[[],16],[[3,17,17],[[7,[6]]]],[3,[[7,[6]]]],[[1,2],2],[[1,2],8],[[1,2],17],[1],[1],[[1,2,8]],0,0,[1,2],0,0,[[]],[[],18],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],19],[[],19],[[],19],[[],19],0],"p":[[3,"PciLocation"],[15,"u16"],[3,"PciDevice"],[15,"usize"],[3,"PhysicalAddress"],[15,"str"],[4,"Result"],[15,"u32"],[15,"bool"],[4,"Option"],[3,"PciBus"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"Vec"],[8,"Iterator"],[15,"u8"],[3,"String"],[3,"TypeId"],[4,"PciConfigSpaceAccessMechanism"]]},\
"percent_encoding":{"doc":"URLs use special chacters to indicate the parts of the …","t":[3,8,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["DEFAULT_ENCODE_SET","EncodeSet","PATH_SEGMENT_ENCODE_SET","PercentDecode","PercentEncode","QUERY_ENCODE_SET","SIMPLE_ENCODE_SET","USERINFO_ENCODE_SET","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","contains","contains","contains","contains","contains","decode_utf8","decode_utf8_lossy","define_encode_set","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","if_any","into","into","into","into","into","into","into","into_iter","into_iter","next","next","percent_decode","percent_encode","percent_encode_byte","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8_percent_encode"],"q":["percent_encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This encode set is used for path components.","Represents a set of characters / bytes that should be …","This encode set is used for on ‘/’-separated path …","The return type of <code>percent_decode()</code>.","The return type of <code>percent_encode()</code> and …","This encode set is used in the URL parser for query …","This encode set is used for the path of cannot-be-a-base …","This encode set is used for username and password.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Called with UTF-8 bytes rather than code points. Should …","","","","","","Decode the result of percent-decoding as UTF-8.","Decode the result of percent-decoding as UTF-8, lossily.","Define a new struct that implements the <code>EncodeSet</code> trait, …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If the percent-decoding is different from the input, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Percent-decode the given bytes.","Percent-encode the given bytes with the given encode set.","Return the percent-encoding of the given bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Percent-encode the UTF-8 encoding of the given string."],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,8,9,1,2,3,4,5,8,9,1,2,3,4,5,8,9,1,2,3,4,5,8,9,7,1,2,3,4,5,9,9,0,1,2,3,4,5,8,8,9,1,2,3,4,5,8,9,9,1,2,3,4,5,8,9,8,9,8,9,0,0,0,8,9,1,2,3,4,5,8,9,8,1,2,3,4,5,8,9,1,2,3,4,5,8,9,1,2,3,4,5,8,9,0],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[[[8,[[0,[6,7]]]]],[[8,[[0,[6,7]]]]]],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,11],[[1,10],11],[[2,10],11],[[3,10],11],[[4,10],11],[[5,10],11],[9,[[15,[[13,[12]],14]]]],[9,[[13,[12]]]],0,[[1,16],17],[[2,16],17],[[3,16],17],[[4,16],17],[[5,16],17],[[[8,[[0,[18,7]]]],16],17],[[[8,[7]],16],17],[[9,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,[[20,[[19,[10]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[20,[12]]]],[9,[[20,[10]]]],[[],9],[7,[[8,[7]]]],[10,12],[[[8,[7]]]],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[12,7],[[8,[7]]]]],"p":[[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[8,"Clone"],[8,"EncodeSet"],[3,"PercentEncode"],[3,"PercentDecode"],[15,"u8"],[15,"bool"],[15,"str"],[4,"Cow"],[3,"Utf8Error"],[4,"Result"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"Vec"],[4,"Option"],[3,"String"],[3,"TypeId"]]},\
"physical_nic":{"doc":"Defines a trait <code>PhysicalNic</code> that must be implemented by …","t":[8,10,10],"n":["PhysicalNic","return_rx_queues","return_tx_queues"],"q":["physical_nic","",""],"d":["This trait must be implemented by any NIC driver that …","Returns the <code>RxQueue</code>s owned by a virtual NIC back to the …","Returns the <code>TxQueue</code>s owned by a virtual NIC back to the …"],"i":[0,4,4],"f":[0,[[[2,[1]]]],[[[2,[3]]]]],"p":[[3,"RxQueue"],[3,"Vec"],[3,"TxQueue"],[8,"PhysicalNic"]]},\
"pic":{"doc":"Support for the x86 PIC (8259 Programmable Interrupt …","t":[3,17,3,17,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11],"n":["ChainedPics","IRQ_BASE_OFFSET","IrqStatusRegisters","PIC_SPURIOUS_INTERRUPT_IRQ","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","init","into","into","mask_irqs","master_irr","master_isr","notify_end_of_interrupt","read_isr_irr","slave_irr","slave_isr","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["pic","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A pair of chained PIC chips, which represents the standard …","The offset added to the first IRQ: <code>0x20</code>.","The set of status registers for both PIC chips.","The IRQ number reserved for spurious PIC interrupts (as …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new interface for the standard PIC1 and PIC2 …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Each mask is a bitwise mask for each IRQ line, with the …","","","Figure out which (if any) PICs in our chain need to know …","Reads the ISR and IRR registers of both the master and …","","","","","","","",""],"i":[0,0,0,0,1,5,1,5,1,1,1,5,5,1,5,5,1,1,5,5,1,1,1,5,1,5,1,5],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[1,2],3],[[1,2],3],[[]],[[]],[[4,4],5],[[]],[[]],[[5,4,4]],0,0,[[5,4]],[5,1],0,0,[[],6],[[],6],[[],6],[[],6],[[],7],[[],7]],"p":[[3,"IrqStatusRegisters"],[3,"Formatter"],[6,"Result"],[15,"u8"],[3,"ChainedPics"],[4,"Result"],[3,"TypeId"]]},\
"pit_clock":{"doc":"Full support for the Programmable Interval Timer (PIT) …","t":[5,5],"n":["enable_interrupts","pit_wait"],"q":["pit_clock",""],"d":["Configures the PIT to fire an interrupt at the given …","Waits (blocking) for the given number of <code>microseconds</code> …"],"i":[0,0],"f":[[1,[[3,[2]]]],[1,[[3,[2]]]]],"p":[[15,"u32"],[15,"str"],[4,"Result"]]},\
"pit_clock_basic":{"doc":"Basic support for waiting using the Programmable Interval …","t":[17,7,7,17,17,5],"n":["CHANNEL0","PIT_CHANNEL_0","PIT_COMMAND","PIT_DEFAULT_DIVIDEND_HZ","PIT_MINIMUM_FREQ","pit_wait"],"q":["pit_clock_basic","","","","",""],"d":["Port for Channel 0; used for PIT interrupts.","","","the timer’s default frequency is 1.19 MHz","","Waits (blocking) for the given number of <code>microseconds</code> …"],"i":[0,0,0,0,0,0],"f":[0,0,0,0,0,[1,[[3,[2]]]]],"p":[[15,"u32"],[15,"str"],[4,"Result"]]},\
"pmu_x86":{"doc":"Support for the Performance Monitoring Unit ","t":[13,13,3,4,13,13,13,3,13,13,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,5,12,11,11,11,11,5,5,5,11,5,0,12,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BranchInstructionsRetired","BranchMissesRetired","Counter","EventType","InstructionsRetired","LastLevelCacheMisses","LastLevelCacheReferences","SampleResults","UnhaltedCoreCycles","UnhaltedReferenceCycles","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","diff","drop","end","find_function_names_from_samples","from","from","from","get_count_since_start","handle_sample","init","instruction_pointers","into","into","into","new","print_samples","reset_pmu","retrieve_samples","start","start_samples","stat","task_ids","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","PMUResults","PerformanceCounters","borrow","borrow","borrow_mut","borrow_mut","end","fmt","from","from","into","into","new","start","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["pmu_x86","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pmu_x86::stat","","","","","","","","","","","","","","","","","","",""],"d":["This event counts branch instructions at retirement. It …","This event counts mispredicted branch instructions at …","A logical counter object to correspond to a physical PMC","Used to select the event type to count. Event types are …","This event counts the number of instructions at …","This event counts each cache miss condition for references …","This event counts requests originating from the core that …","Stores the instruction pointers and corresponding task IDs …","This event counts core clock cycles when the clock signal …","This event counts reference clock cycles at a fixed …","","","","","","","lightweight function with no checks to get the counter …","","Stops counting, releases the counter, and returns the …","Finds the corresponding function for each instruction …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Allows user to get count since start without …","This function is designed to be invoked from an interrupt …","Initialization function that enables the PMU if one is …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a Counter object and assigns a physical counter …","Simple function to print values from SampleResults in a …","Frees all counters and make them available to be used. …","Returns the samples that were stored during sampling in …","Starts the count.","Start interrupt process in order to take samples using the …","This module implements the equivalent of “perf stat”. …","","","","","","","","","","","","","","","","","Stop the counters and return the counter values. The …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initialize seven performance monitoring counters. They …","Start running all the counters ","","","","","",""],"i":[8,8,0,0,8,8,8,0,8,8,8,1,5,8,1,5,1,1,1,0,8,1,5,1,0,0,5,8,1,5,1,0,0,0,1,0,0,5,8,1,5,8,1,5,8,1,5,0,0,13,14,13,14,13,14,13,14,13,14,13,13,13,14,13,14,13,14],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[1],[1,[[4,[2,3]]]],[5,[[4,[3]]]],[[]],[[]],[[]],[1,[[4,[2,3]]]],[6,[[4,[7,3]]]],[[],[[4,[3]]]],0,[[]],[[]],[[]],[8,[[4,[1,3]]]],[5],[[],[[4,[3]]]],[[],[[4,[5,3]]]],[1,[[4,[3]]]],[[8,9,[11,[10]],9],[[4,[3]]]],0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12],[[],12],0,0,[[]],[[]],[[]],[[]],[13,[[4,[14,3]]]],[[14,15],16],[[]],[[]],[[]],[[]],[[],[[4,[13,3]]]],[13,[[4,[3]]]],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12]],"p":[[3,"Counter"],[15,"u64"],[15,"str"],[4,"Result"],[3,"SampleResults"],[3,"InterruptStackFrame"],[15,"bool"],[4,"EventType"],[15,"u32"],[15,"usize"],[4,"Option"],[3,"TypeId"],[3,"PerformanceCounters"],[3,"PMUResults"],[3,"Formatter"],[6,"Result"]]},\
"port_io":{"doc":"CPU-level input/output instructions, including <code>inb</code>, <code>outb</code>, …","t":[3,8,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,11,11,11,5,5,5,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Port","PortIn","PortOut","PortReadOnly","PortWriteOnly","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","from","from","from","inb","inl","into","into","into","inw","new","new","new","outb","outl","outw","port_address","port_address","port_address","port_in","port_out","read","read","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write"],"q":["port_io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A readable and writable I/O port over an arbitrary type …","This trait is defined for any type which can be read from …","This trait is defined for any type which can be read from …","A read-only I/O port over an arbitrary type supporting the …","A write-only I/O port over an arbitrary type supporting …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Read a <code>u8</code>-sized value from <code>port</code>.","Read a <code>u32</code>-sized value from <code>port</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Read a <code>u16</code>-sized value from <code>port</code>.","Create a new I/O port.","Create a new read-only I/O port.","Create a new read-only I/O port.","Write a <code>u8</code>-sized <code>value</code> to <code>port</code>.","Write a <code>u32</code>-sized <code>value</code> to <code>port</code>.","Write a <code>u8</code>-sized <code>value</code> to <code>port</code>.","Returns the address of this port.","Returns the address of this port.","Returns the address of this port.","Read a value from the specified port.","Write a value to the specified port.","Read data of size <code>T</code> from the port.","Read data of size <code>T</code> from the port.","","","","","","","","","","Write data of size <code>T</code> to the port. This is unsafe because …","Write data of size <code>T</code> to the port. This is unsafe because …"],"i":[0,0,0,0,0,4,7,8,4,7,8,4,7,8,4,7,8,0,0,4,7,8,0,4,7,8,0,0,0,4,7,8,2,3,4,7,4,7,8,4,7,8,4,7,8,4,8],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2,3]]]],5],6],[[[7,[[0,[1,2]]]],5],6],[[[8,[[0,[1,3]]]],5],6],[[]],[[]],[[]],[9,10],[9,11],[[]],[[]],[[]],[9,9],[9,[[4,[[0,[2,3]]]]]],[9,[[7,[2]]]],[9,[[8,[3]]]],[[10,9]],[[11,9]],[[9,9]],[[[4,[[0,[2,3]]]]],9],[[[7,[2]]],9],[[[8,[3]]],9],[9],[9],[[[4,[[0,[2,3]]]]],[[0,[2,3]]]],[[[7,[2]]],2],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[[4,[[0,[2,3]]]],[0,[2,3]]]],[[[8,[3]],3]]],"p":[[8,"Debug"],[8,"PortIn"],[8,"PortOut"],[3,"Port"],[3,"Formatter"],[6,"Result"],[3,"PortReadOnly"],[3,"PortWriteOnly"],[15,"u16"],[15,"u8"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"preemption":{"doc":"Manages preemption on a per-CPU core basis.","t":[3,11,11,11,11,5,11,5,11,11,11,11],"n":["PreemptionGuard","borrow","borrow_mut","drop","from","hold_preemption","into","preemption_enabled","preemption_was_enabled","try_from","try_into","type_id"],"q":["preemption","","","","","","","","","","",""],"d":["A guard type that ensures preemption is disabled as long …","","","","Returns the argument unchanged.","Prevents preemption (preemptive task switching) from …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if preemption is currently enabled on this …","Returns whether preemption was originally enabled when …","","",""],"i":[0,1,1,1,1,0,1,0,1,1,1,1],"f":[0,[[]],[[]],[1],[[]],[[],1],[[]],[[],2],[1,2],[[],3],[[],3],[[],4]],"p":[[3,"PreemptionGuard"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"print":{"doc":"Allows crates in the kernel to log messages to the default …","t":[14,5,14,5],"n":["print","print_to_default_output","println","set_default_print_output"],"q":["print","","",""],"d":["The main printing macro, which simply pushes an output …","Enqueues the given <code>fmt_args</code> as a String onto the default …","Calls <code>print!()</code> with an extra newilne <code>\\\\n</code> appended to the …","Gives the kernel an endpoint (queue producer) to which it …"],"i":[0,0,0,0],"f":[0,[1],0,[[[3,[2]]]]],"p":[[3,"Arguments"],[4,"Event"],[3,"DFQueueProducer"]]},\
"ps2":{"doc":"","t":[13,4,13,13,11,11,5,5,5,5,5,11,5,5,5,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,5],"n":["AncientATKeyboard","KeyboardType","MF2Keyboard","MF2KeyboardWithPSControllerTranslator","borrow","borrow_mut","check_mouse_id","command_to_keyboard","command_to_mouse","data_to_port1","data_to_port2","from","handle_mouse_packet","init_ps2_port1","init_ps2_port2","into","keyboard_detect","keyboard_led","keyboard_scancode_set","mouse_packet_streaming","mouse_resend","mouse_resolution","ps2_clean_buffer","ps2_read_config","ps2_read_data","ps2_status_register","ps2_write_command","ps2_write_config","reset_mouse","set_mouse_id","set_sampling_rate","test_ps2_port1","test_ps2_port2","try_from","try_into","type_id","write_to_second_output_buffer"],"q":["ps2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","check the mouse’s id","write command to the keyboard and return the result","write command to the mouse and return the result","write data to the first ps2 data port and return the …","write data to the second ps2 data port and return the …","Returns the argument unchanged.","read mouse data packet","initialize the first ps2 data port","initialize the second ps2 data port","Calls <code>U::from(self)</code>.","detect the keyboard’s type","set LED status of the keyboard parameter : 0: ScrollLock; …","set the scancode set of the keyboard 0: get the current …","enable or disable the packet streaming also return the vec …","resend the most recent packet again","set the resolution of the mouse parameter : 0x00: 1 …","clean the PS2 data port (0x60) output buffer also return …","read the config of the ps2 port","read dat from ps2 data port (0x60)","read the ps2 status register","write command to the command ps2 port (0x64)","write the new config to the ps2 command port (0x64)","reset the mouse","set the mouse ID (3 or 4 ) by magic sequence 3 means that …","set ps2 mouse’s sampling rate","test the first ps2 data port","test the second ps2 data port","","","","write data to the second ps2 output buffer"],"i":[5,0,5,5,5,5,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0],"f":[0,0,0,0,[[]],[[]],[[],[[3,[1,2]]]],[1,[[3,[2]]]],[1,[[3,[2]]]],[1,1],[1,1],[[]],[[],4],[[]],[[]],[[]],[[],[[3,[5,2]]]],[1],[1,[[3,[2]]]],[6,[[3,[[7,[1]],2]]]],[[],[[3,[2]]]],[1,[[3,[2]]]],[[],[[7,[1]]]],[[],1],[[],1],[[],1],[1],[1],[[],[[3,[2]]]],[1,[[3,[2]]]],[1,[[3,[2]]]],[[]],[[]],[[],3],[[],3],[[],8],[1]],"p":[[15,"u8"],[15,"str"],[4,"Result"],[15,"u32"],[4,"KeyboardType"],[15,"bool"],[3,"Vec"],[3,"TypeId"]]},\
"random":{"doc":"A cryptographically secure source of randomness.","t":[5,5,5,5],"n":["fill_bytes","init_rng","next_u32","next_u64"],"q":["random","","",""],"d":["Fills <code>dest</code> with random data.","Initialises a <code>T</code> RNG.","Returns a random <code>u32</code>.","Returns a random <code>u64</code>."],"i":[0,0,0,0],"f":[[[]],[[],1],[[],2],[[],3]],"p":[[4,"Result"],[15,"u32"],[15,"u64"]]},\
"rendezvous":{"doc":"A rendezvous-based channel for synchronous Inter-Task …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","from","from","into","into","new_channel","receive","send","to_owned","to_owned","try_from","try_from","try_into","try_into","try_receive","try_send","type_id","type_id"],"q":["rendezvous","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The receiver side of a channel.","The sender (transmit) side of a channel.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new channel that requires a sender a receiver to …","Receive a message, blocking until a sender is ready. ","Send a message, blocking until a receiver is ready.","","","","","","","Tries to receive a message, only succeeding if a sender is …","Tries to send the message, only succeeding if a receiver …","",""],"i":[0,0,3,4,3,4,3,4,3,4,3,4,3,4,0,4,3,3,4,3,4,3,4,4,3,3,4],"f":[0,0,[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[2]]],[[6,[2,5]]]],[[[3,[2]],2],[[6,[5]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[[4,[2]]],[[6,[2,5]]]],[[[3,[2]],2],[[6,[2]]]],[[],7],[[],7]],"p":[[8,"Clone"],[8,"Send"],[3,"Sender"],[3,"Receiver"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"root":{"doc":"This crate contains the implementation of the special root …","t":[3,17,3,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ROOT","ROOT_DIRECTORY_NAME","RootDirectory","borrow","borrow","borrow_mut","borrow_mut","deref","from","from","get","get_absolute_path","get_name","get_parent_dir","get_root","insert","into","into","list","remove","set_parent_dir","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["root","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The root directory Returns a tuple for easy access to the …","","A struct that represents a node in the VFS ","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Recursively gets the absolute pathname as a String","","we just return the root itself because it is the top of …","Returns a reference to the root directory.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,2,1,2,1,1,2,1,2,2,2,2,0,2,2,1,2,2,2,2,1,2,1,2,1],"f":[0,0,0,[[]],[[]],[[]],[[]],[1],[[]],[[]],[[2,3],[[5,[4]]]],[2,6],[2,6],[2,[[5,[7]]]],[[],7],[[2,4],[[8,[[5,[4]],3]]]],[[]],[[]],[2,[[9,[6]]]],[[2,4],[[5,[4]]]],[[2,10]],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11]],"p":[[3,"ROOT"],[3,"RootDirectory"],[15,"str"],[4,"FileOrDir"],[4,"Option"],[3,"String"],[6,"DirRef"],[4,"Result"],[3,"Vec"],[6,"WeakDirRef"],[3,"TypeId"]]},\
"rsdp":{"doc":"Support for ACPI RSDP (Root System Descriptor Pointer).","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Rsdp","borrow","borrow_mut","clone","clone_into","fmt","from","get_rsdp","into","sdt_address","to_owned","try_from","try_into","type_id"],"q":["rsdp","","","","","","","","","","","","",""],"d":["The Root System Descriptor Pointer,  which contains the …","","","","","","Returns the argument unchanged.","Search for the RSDP in the BIOS memory area from 0xE_0000 …","Calls <code>U::from(self)</code>.","Returns the <code>PhysicalAddress</code> of the RSDT or XSDT.","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[1,2],3],[[]],[4,[[8,[[6,[5,1]],7]]]],[[]],[1,9],[[]],[[],8],[[],8],[[],10]],"p":[[3,"Rsdp"],[3,"Formatter"],[6,"Result"],[3,"PageTable"],[3,"MappedPages"],[6,"BoxRef"],[15,"str"],[4,"Result"],[3,"PhysicalAddress"],[3,"TypeId"]]},\
"rsdt":{"doc":"Definitions for the ACPI RSDT and XSDT system tables.","t":[17,3,17,11,11,11,11,11,5,11,11,11,11,11],"n":["RSDT_SIGNATURE","RsdtXsdt","XSDT_SIGNATURE","addresses","borrow","borrow_mut","from","get","handle","into","sdt","try_from","try_into","type_id"],"q":["rsdt","","","","","","","","","","","","",""],"d":["","The Root/Extended System Descriptor Table, RSDT or XSDT.  …","","Returns an <code>Iterator</code> over the <code>PhysicalAddress</code>es of the SDT …","","","Returns the argument unchanged.","Finds the RSDT or XSDT in the given <code>AcpiTables</code> and returns …","The handler for parsing RSDT/XSDT tables and adding them …","Calls <code>U::from(self)</code>.","Returns a reference to the SDT header of this RSDT or XSDT.","","",""],"i":[0,0,0,1,1,1,1,1,0,1,1,1,1,1],"f":[0,0,0,[1,2],[[]],[[]],[[]],[3,[[4,[1]]]],[[3,5,6,7],[[9,[8]]]],[[]],[1,10],[[],9],[[],9],[[],11]],"p":[[3,"RsdtXsdt"],[8,"Iterator"],[3,"AcpiTables"],[4,"Option"],[6,"AcpiSignature"],[15,"usize"],[3,"PhysicalAddress"],[15,"str"],[4,"Result"],[3,"Sdt"],[3,"TypeId"]]},\
"rtc":{"doc":"","t":[6,3,11,11,12,5,11,11,11,5,12,11,12,12,5,12,5,11,11,11,11,12],"n":["RtcInterruptFunction","RtcTime","borrow","borrow_mut","days","enable_rtc_interrupt","fmt","fmt","from","get_rtc_ticks","hours","into","minutes","months","read_rtc","seconds","set_rtc_frequency","to_string","try_from","try_into","type_id","years"],"q":["rtc","","","","","","","","","","","","","","","","","","","","",""],"d":["","A timestamp obtained from the real-time clock.","","","","turn on IRQ 8 (mapped to 0x28), rtc begins sending …","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","sets the period of the RTC interrupt.  <code>rate</code> must be a …","","","","",""],"i":[0,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1],"f":[0,0,[[]],[[]],0,[[]],[[1,2],3],[[1,2],[[5,[4]]]],[[]],[[],[[5,[6]]]],0,[[]],0,0,[[],1],0,[6,5],[[],7],[[],5],[[],5],[[],8],0],"p":[[3,"RtcTime"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[15,"usize"],[3,"String"],[3,"TypeId"]]},\
"runqueue":{"doc":"This crate contains the API of the <code>RunQueue</code> structure, …","t":[5,5,5,5,5,5],"n":["add_task_to_any_runqueue","add_task_to_specific_runqueue","get_least_busy_core","get_runqueue","init","remove_task_from_all"],"q":["runqueue","","","","",""],"d":["Chooses the “least busy” core’s runqueue and adds …","Adds the given <code>Task</code> reference to given core’s runqueue.","Returns the “least busy” core","Returns the <code>RunQueue</code> of the given core, which is an <code>apic_id</code>…","Creates a new <code>RunQueue</code> for the given core, which is an …","Removes a <code>TaskRef</code> from all <code>RunQueue</code>s that exist on the …"],"i":[0,0,0,0,0,0],"f":[[1,[[3,[2]]]],[[4,1],[[3,[2]]]],[[],[[5,[4]]]],[4,[[5,[6]]]],[4,[[3,[2]]]],[1,[[3,[2]]]]],"p":[[3,"TaskRef"],[15,"str"],[4,"Result"],[15,"u8"],[4,"Option"],[3,"RwLockPreempt"]]},\
"runqueue_priority":{"doc":"This crate contains the <code>RunQueue</code> structure, for priority …","t":[17,17,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11],"n":["DEFAULT_PRIORITY","INITIAL_TOKENS","MAX_PRIORITY","PriorityTaskRef","RunQueue","add_task_to_any_runqueue","add_task_to_specific_runqueue","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","fmt","fmt","from","from","get_least_busy_core","get_priority","get_runqueue","increment_context_switches","init","into","into","new","priority","remove_task","remove_task_from_all","set_priority","to_owned","tokens_remaining","try_from","try_from","try_into","try_into","type_id","type_id","update_and_move_to_end"],"q":["runqueue_priority","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","A cloneable reference to a <code>Taskref</code> that exposes more …","A list of references to <code>Task</code>s (<code>PriorityTaskRef</code>s)  that is …","Chooses the “least busy” core’s runqueue (based on …","Convenience method that adds the given <code>Task</code> reference to …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the “least busy” core, which is currently very …","Output the priority of the given task. Outputs None if the …","Returns <code>RunQueue</code> for the given core, which is an <code>apic_id</code>.","Increment the number of times the task is picked","Creates a new <code>RunQueue</code> for the given core, which is an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>PriorityTaskRef</code> that wraps the given <code>TaskRef</code>.","Priority assigned for the task. Max priority = 40, Min …","Removes a <code>TaskRef</code> from this RunQueue.","Removes a <code>TaskRef</code> from all <code>RunQueue</code>s that exist on the …","Sets the priority of the given <code>Task</code> in all the <code>RunQueue</code> …","","Remaining tokens in this epoch. A task will be scheduled …","","","","","","","Moves the <code>TaskRef</code> at the given index in this <code>RunQueue</code> to …"],"i":[0,0,0,0,0,6,6,5,6,5,6,5,5,5,6,5,6,5,6,5,6,6,6,6,5,6,5,6,5,5,6,6,6,5,5,5,6,5,6,5,6,6],"f":[0,0,0,0,0,[1,[[3,[2]]]],[[4,1],[[3,[2]]]],[[]],[[]],[[]],[[]],[5,5],[[]],[5,1],[6,7],[5,1],[6,7],[[5,8],9],[[6,8],9],[[]],[[]],[[],[[10,[4]]]],[1,[[10,[4]]]],[4,[[10,[11]]]],[5],[4,[[3,[2]]]],[[]],[[]],[1,5],0,[[6,1],[[3,[2]]]],[1,[[3,[2]]]],[[1,4],[[3,[2]]]],[[]],0,[[],3],[[],3],[[],3],[[],3],[[],12],[[],12],[[6,13,13],[[10,[1]]]]],"p":[[3,"TaskRef"],[15,"str"],[4,"Result"],[15,"u8"],[3,"PriorityTaskRef"],[3,"RunQueue"],[3,"VecDeque"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"RwLockPreempt"],[3,"TypeId"],[15,"usize"]]},\
"runqueue_realtime":{"doc":"Runqueue structures for a realtime scheduler using rate …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11],"n":["RealtimeTaskRef","RunQueue","add_task_to_any_runqueue","add_task_to_specific_runqueue","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","fmt","fmt","from","from","get_least_busy_core","get_runqueue","has_smaller_period","increment_context_switches","init","into","into","is_periodic","new","remove_task","remove_task_from_all","set_periodicity","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_and_reinsert"],"q":["runqueue_realtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A reference to a task with its period for realtime …","A list of <code>Task</code>s and their associated realtime scheduler …","Chooses the “least busy” core’s runqueue (based on …","Convenience method that adds the given <code>Task</code> reference to …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the “least busy” core, which is currently very …","Returns <code>RunQueue</code> for the given core, which is an <code>apic_id</code>.","Returns <code>true</code> if the period of this <code>RealtimeTaskRef</code> is …","Increment the number of times the task is picked","Creates a new <code>RunQueue</code> for the given core, which is an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the <code>RealtimeTaskRef</code> refers to a task that …","Creates a new <code>RealtimeTaskRef</code> that wraps the given <code>TaskRef</code>","Removes a <code>TaskRef</code> from this RunQueue.","Removes a <code>TaskRef</code> from all <code>RunQueue</code>s that exist on the …","Set the periodicity of a given <code>Task</code> in all the <code>RunQueue</code> …","","","","","","","","Moves the <code>RealtimeTaskRef</code> at the given <code>index</code> in this …"],"i":[0,0,6,6,5,6,5,6,5,5,5,6,5,6,5,6,5,6,6,6,5,5,6,5,6,5,5,6,6,0,5,5,6,5,6,5,6,6],"f":[0,0,[1,[[3,[2]]]],[[4,1],[[3,[2]]]],[[]],[[]],[[]],[[]],[5,5],[[]],[5,1],[6,7],[5,1],[6,7],[[5,8],9],[[6,8],9],[[]],[[]],[[],[[10,[4]]]],[4,[[10,[11]]]],[[5,5],12],[5],[4,[[3,[2]]]],[[]],[[]],[5,12],[[1,[10,[13]]],5],[[6,1],[[3,[2]]]],[1,[[3,[2]]]],[[1,13],[[3,[2]]]],[[]],[[],3],[[],3],[[],3],[[],3],[[],14],[[],14],[[6,13],[[10,[1]]]]],"p":[[3,"TaskRef"],[15,"str"],[4,"Result"],[15,"u8"],[3,"RealtimeTaskRef"],[3,"RunQueue"],[3,"VecDeque"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"RwLockPreempt"],[15,"bool"],[15,"usize"],[3,"TypeId"]]},\
"runqueue_round_robin":{"doc":"This crate contains the <code>RunQueue</code> structure, for round …","t":[7,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["RUNQUEUES","RoundRobinTaskRef","RunQueue","add_task_to_any_runqueue","add_task_to_specific_runqueue","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","fmt","fmt","from","from","get_least_busy_core","get_runqueue","increment_context_switches","init","into","into","move_to_end","new","remove_task","remove_task_from_all","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["runqueue_round_robin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["There is one runqueue per core, each core only accesses …","A cloneable reference to a <code>Taskref</code> that exposes more …","A list of references to <code>Task</code>s (<code>RoundRobinTaskRef</code>s).  This …","Chooses the “least busy” core’s runqueue (based on …","Convenience method that adds the given <code>Task</code> reference to …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the “least busy” core, which is currently very …","Returns the <code>RunQueue</code> for the given core, which is an …","Increment the number of times the task is picked","Creates a new <code>RunQueue</code> for the given core, which is an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Moves the <code>TaskRef</code> at the given index into this <code>RunQueue</code> to …","Creates a new <code>RoundRobinTaskRef</code> that wraps the given …","Removes a <code>TaskRef</code> from this RunQueue.","Removes a <code>TaskRef</code> from all <code>RunQueue</code>s that exist on the …","","","","","","",""],"i":[0,0,0,6,6,5,6,5,6,5,5,5,6,5,6,5,6,5,6,6,6,5,6,5,6,6,5,6,6,5,5,6,5,6,5,6],"f":[0,0,0,[1,[[3,[2]]]],[[4,1],[[3,[2]]]],[[]],[[]],[[]],[[]],[5,5],[[]],[5,1],[6,7],[5,1],[6,7],[[5,8],9],[[6,8],9],[[]],[[]],[[],[[10,[4]]]],[4,[[10,[11]]]],[5],[4,[[3,[2]]]],[[]],[[]],[[6,12],[[10,[1]]]],[1,5],[[6,1],[[3,[2]]]],[1,[[3,[2]]]],[[]],[[],3],[[],3],[[],3],[[],3],[[],13],[[],13]],"p":[[3,"TaskRef"],[15,"str"],[4,"Result"],[15,"u8"],[3,"RoundRobinTaskRef"],[3,"RunQueue"],[3,"VecDeque"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"RwLockPreempt"],[15,"usize"],[3,"TypeId"]]},\
"scheduler":{"doc":"","t":[5,5,5,5],"n":["get_priority","schedule","set_periodicity","set_priority"],"q":["scheduler","","",""],"d":["Returns the priority of a given task. This function …","Yields the current CPU by selecting a new <code>Task</code> to run  and …","","Changes the priority of the given task with the given …"],"i":[0,0,0,0],"f":[[1,[[3,[2]]]],[[],4],[[1,5],[[7,[6]]]],[[1,2],[[7,[6]]]]],"p":[[3,"TaskRef"],[15,"u8"],[4,"Option"],[15,"bool"],[15,"usize"],[15,"str"],[4,"Result"]]},\
"scheduler_priority":{"doc":"This crate picks the next task on token based scheduling …","t":[5,5,5],"n":["get_priority","select_next_task","set_priority"],"q":["scheduler_priority","",""],"d":["Returns the priority of the given task.","This defines the priority scheduler policy. Returns None …","Changes the priority of the given task with the given …"],"i":[0,0,0],"f":[[1,[[3,[2]]]],[2,[[3,[1]]]],[[1,2],[[5,[4]]]]],"p":[[3,"TaskRef"],[15,"u8"],[4,"Option"],[15,"str"],[4,"Result"]]},\
"scheduler_realtime":{"doc":"This scheduler implements the Rate Monotonic Scheduling …","t":[5,5],"n":["select_next_task","set_periodicity"],"q":["scheduler_realtime",""],"d":["This defines the realtime scheduler policy. Returns None …","Set the periodicity of a given <code>Task</code> in all <code>RunQueue</code> …"],"i":[0,0],"f":[[1,[[3,[2]]]],[[2,4],[[6,[5]]]]],"p":[[15,"u8"],[3,"TaskRef"],[4,"Option"],[15,"usize"],[15,"str"],[4,"Result"]]},\
"scheduler_round_robin":{"doc":"This crate picks the next task in round robin fashion. …","t":[5],"n":["select_next_task"],"q":["scheduler_round_robin"],"d":["This defines the round robin scheduler policy. Returns …"],"i":[0],"f":[[1,[[3,[2]]]]],"p":[[15,"u8"],[3,"TaskRef"],[4,"Option"]]},\
"sdt":{"doc":"ACPI table definitions and basic SDT structures.","t":[3,17,3,12,12,12,12,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11],"n":["GenericAddressStructure","SDT_SIZE_IN_BYTES","Sdt","access_size","address_space","bit_offset","bit_width","borrow","borrow","borrow_mut","borrow_mut","checksum","clone","clone","creator_id","creator_revision","fmt","fmt","from","from","into","into","length","oem_id","oem_revision","oem_table_id","phys_addr","revision","signature","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["sdt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A struct used to describe the position and layout of …","The size in bytes of the ACPI SDT Header (<code>Sdt</code> struct).","An ACPI System Descriptor Table. This is the header (the …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,2,2,2,2,1,2,1,2,1,1,2,1,1,1,2,1,2,1,2,1,1,1,1,2,1,1,1,2,1,2,1,2],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[1,1],[2,2],0,0,[[1,3],4],[[2,3],4],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[],5],[[],5],[[],5],[[],5],[[],6],[[],6]],"p":[[3,"Sdt"],[3,"GenericAddressStructure"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"serial_port":{"doc":"A full serial driver with more advanced I/O support, e.g., …","t":[13,13,13,13,3,13,13,3,4,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["COM1","COM2","COM3","COM4","DataChunk","DataReceived","ErrorOrBreak","SerialPort","SerialPortAddress","SerialPortBasic","SerialPortInterruptEvent","StatusChange","TransmitterEmpty","base_port_address","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","data","data_available","deref","deref_mut","drop","empty","enable_interrupt","eq","flush","fmt","fmt","from","from","from","from","from","from_str","get_serial_port","in_byte","in_bytes","init_serial_port","into","into","into","into","into","len","new","new","out_byte","out_bytes","out_str","read","ready_to_transmit","register_interrupt_handler","set_connection_listener","set_data_sender","take_serial_port_basic","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","write_str","write_str"],"q":["serial_port","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The base port I/O address for the COM1 serial port.","The base port I/O address for the COM2 serial port.","The base port I/O address for the COM3 serial port.","The base port I/O address for the COM4 serial port.","A chunk of data read from a serial port that will be …","","","A serial port abstraction with support for interrupt-based …","The base port I/O addresses for COM serial ports.","A serial port and its various data and control registers.","The types of events that can trigger an interrupt on a …","","","","","","","","","","","","","","","","","Returns <code>true</code> if the serial port has data available to read.","","","","Returns a new <code>DataChunk</code> filled with zeroes that can be …","Enable or disable interrupts on this serial port for …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Obtains a reference to the <code>SerialPort</code> specified by the …","Read one byte from the serial port, blocking until data is …","Reads multiple bytes from the serial port into the given …","Initializes the <code>SerialPort</code> specified by the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates and returns a new serial port structure,  and …","Initialize this serial port by giving it ownership and …","Write the given byte to the serial port, blocking until …","Write the given bytes to the serial port, blocking until …","Write the given string to the serial port, blocking until …","","Returns <code>true</code> if the serial port is ready to transmit a …","Register the interrupt handler for this serial port and …","A temporary hack to allow the serial port interrupt handler","Tells this <code>SerialPort</code> to push received data bytes onto the …","Takes ownership of the <code>SerialPort</code> specified by the given …","","","","","","","","","","","","","","","","","","","","",""],"i":[3,3,3,3,0,7,7,0,0,0,0,7,7,1,1,3,5,7,6,1,3,5,7,6,3,3,6,1,5,5,1,6,1,3,5,3,7,1,3,5,7,6,3,0,1,1,0,1,3,5,7,6,6,1,5,1,1,1,5,1,5,0,5,0,3,1,3,3,3,5,7,6,1,3,5,7,6,1,3,5,7,6,5,1,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[[]],0,[1,4],[5],[5],[1],[[],6],[[1,7,4]],[[3,3],4],[5,8],[[3,9],[[11,[10]]]],[[7,9],[[11,[10]]]],[[]],[[]],[[]],[[]],[[]],[12,[[11,[3]]]],[3,[[14,[13]]]],[1,15],[1,16],[[3,1],13],[[]],[[]],[[]],[[]],[[]],0,[2,1],[1,5],[[1,15]],[1],[[1,12]],[5,[[8,[16]]]],[1,4],[[[13,[[17,[5]]]],15,18],[[11,[12]]]],[[[19,[3]]],19],[[5,[19,[6]]],11],[3,[[14,[1]]]],[[]],[[],11],[[],11],[12,[[11,[3]]]],[2,[[11,[3]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],20],[[],20],[[],20],[[],20],[[],20],[5,[[8,[16]]]],[[1,12],[[11,[10]]]],[[5,12],21]],"p":[[3,"SerialPortBasic"],[15,"u16"],[4,"SerialPortAddress"],[15,"bool"],[3,"SerialPort"],[3,"DataChunk"],[4,"SerialPortInterruptEvent"],[6,"Result"],[3,"Formatter"],[3,"Error"],[4,"Result"],[15,"str"],[3,"Arc"],[4,"Option"],[15,"u8"],[15,"usize"],[3,"MutexIrqSafe"],[6,"HandlerFunc"],[3,"Sender"],[3,"TypeId"],[6,"Result"]]},\
"serial_port_basic":{"doc":"Support for basic serial port access, including …","t":[13,13,13,13,13,13,3,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["COM1","COM2","COM3","COM4","DataReceived","ErrorOrBreak","SerialPort","SerialPortAddress","SerialPortInterruptEvent","StatusChange","TransmitterEmpty","base_port_address","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","data_available","drop","enable_interrupt","eq","fmt","fmt","from","from","from","from_str","in_byte","in_bytes","into","into","into","new","out_byte","out_bytes","out_str","ready_to_transmit","take_serial_port","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_str"],"q":["serial_port_basic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The base port I/O address for the COM1 serial port.","The base port I/O address for the COM2 serial port.","The base port I/O address for the COM3 serial port.","The base port I/O address for the COM4 serial port.","","","A serial port and its various data and control registers.","The base port I/O addresses for COM serial ports.","The types of events that can trigger an interrupt on a …","","","","","","","","","","","","Returns <code>true</code> if the serial port has data available to read.","","Enable or disable interrupts on this serial port for …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Read one byte from the serial port, blocking until data is …","Reads multiple bytes from the serial port into the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates and returns a new serial port structure,  and …","Write the given byte to the serial port, blocking until …","Write the given bytes to the serial port, blocking until …","Write the given string to the serial port, blocking until …","Returns <code>true</code> if the serial port is ready to transmit a …","Takes ownership of the <code>SerialPort</code> specified by the given …","","","","","","","","","","","","",""],"i":[3,3,3,3,5,5,0,0,0,5,5,1,1,3,5,1,3,5,3,3,1,1,1,3,3,5,1,3,5,3,1,1,1,3,5,1,1,1,1,1,0,3,1,3,3,3,5,1,3,5,1,3,5,1],"f":[0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[[]],[1,4],[1],[[1,5,4]],[[3,3],4],[[3,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[1,10],[1,11],[[]],[[]],[[]],[2,1],[[1,10]],[1],[[1,8]],[1,4],[3,[[12,[1]]]],[[]],[[],9],[[],9],[8,[[9,[3]]]],[2,[[9,[3]]]],[[],9],[[],9],[[],9],[[],9],[[],13],[[],13],[[],13],[[1,8],7]],"p":[[3,"SerialPort"],[15,"u16"],[4,"SerialPortAddress"],[15,"bool"],[4,"SerialPortInterruptEvent"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Result"],[15,"u8"],[15,"usize"],[4,"Option"],[3,"TypeId"]]},\
"shapes":{"doc":"This crate defines the basic shapes used for display.","t":[3,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12],"n":["Coord","Rectangle","add","add","add","borrow","borrow","borrow_mut","borrow_mut","bottom_right","clone","clone","cmp","eq","eq","fmt","fmt","from","from","hash","hash","height","into","into","ne","ne","new","partial_cmp","sub","sub","sub","top_left","try_from","try_from","try_into","try_into","type_id","type_id","width","x","y"],"q":["shapes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A 2-D integer coordinate.","A rectangle given by its top-left coordinate and …","","","","","","","","The bottom-right point","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the height of this Rectangle.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new coordinate.","","","","","The top-left point","","","","","","","Returns the width of this Rectangle.","The x coordinate","The y coordinate"],"i":[0,0,1,1,2,1,2,1,2,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,1,2,1,1,1,1,2,2,1,2,1,2,1,2,2,1,1],"f":[0,0,[[1,1],1],[1,1],[[2,1],2],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[[1,1],3],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[[]],[[]],[1],[2],[2,7],[[]],[[]],[[1,1],4],[[2,2],4],[[8,8],1],[[1,1],[[9,[3]]]],[1,1],[[1,1],1],[[2,1],2],0,[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[2,7],0,0],"p":[[3,"Coord"],[3,"Rectangle"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"isize"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"signal_handler":{"doc":"Signal handlers for CPU exceptions/errors, like …","t":[13,13,4,13,13,13,13,4,3,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["ArithmeticError","BusError","ErrorCode","IllegalInstruction","InvalidAddress","Other","PageFaultError","Signal","SignalContext","SignalHandler","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","eq","eq","eq","error_code","fmt","fmt","fmt","from","from","from","from","hash","instruction_pointer","into","into","into","ne","ne","partial_cmp","register_signal_handler","signal","stack_pointer","take_signal_handler","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","accessed_address","pf_error"],"q":["signal_handler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","signal_handler::ErrorCode","",""],"d":["Bad arithmetic operation, e.g., divide by zero. Analogous …","Bad memory alignment, non-existent physical address. …","Possible error codes that may be provided by the CPU …","Invalid opcode, malformed instruction, etc. Analogous to …","Bad virtual address, unexpected page fault. Analogous to …","","","The possible signals that may occur due to CPU exceptions.","Information that is passed to a registered <code>SignalHandler</code> …","A signal handler is a callback function that will be …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Register a <code>SignalHandler</code> callback function for the current …","","","Take the <code>SignalHandler</code> registered for the given <code>signal</code> for …","","","","","","","","","","","","","","",""],"i":[1,1,0,1,1,3,3,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,1,2,3,2,1,2,3,1,2,3,3,1,2,1,2,3,2,3,1,0,2,2,0,1,2,3,1,2,3,1,2,3,1,2,3,14,15,15],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],[[1,1],4],[[1,1],5],[[2,2],5],[[3,3],5],0,[[1,6],7],[[2,6],7],[[3,6],7],[[]],[[]],[[]],[8,3],[1],0,[[]],[[]],[[]],[[2,2],5],[[3,3],5],[[1,1],[[9,[4]]]],[[1,[11,[10]]],12],0,0,[1,[[9,[[11,[10]]]]]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],0,0,0],"p":[[4,"Signal"],[3,"SignalContext"],[4,"ErrorCode"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u64"],[4,"Option"],[25,"SignalHandler"],[3,"Box"],[4,"Result"],[3,"TypeId"],[13,"Other"],[13,"PageFaultError"]]},\
"simd_personality":{"doc":"Management of two kernel personalities, one for …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"simd_test":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"simple_ipc":{"doc":"An implementation of a shared buffer for IPC that can be …","t":[3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11],"n":["Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new_channel","receive","send","try_from","try_from","try_into","try_into","try_receive","try_send","type_id","type_id"],"q":["simple_ipc","","","","","","","","","","","","","","","","","","","",""],"d":["Channel endpoint that only allows receiving messages.","Channel endpoint that only allows sending messages.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new channel and returns the endpoints","Tries to receive a message until succesful. Task will spin …","Tries to send a message until succesful. Task will spin in …","","","","","Tries to receive a message once. If the buffer is empty, …","Tries to send a message once. If the buffer is full, then …","",""],"i":[0,0,3,1,3,1,3,1,3,1,0,1,3,3,1,3,1,1,3,3,1],"f":[0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[[3,2]],[[],4],[[],4],[[],4],[[],4],[1,[[4,[2,5]]]],[[3,2],[[4,[5]]]],[[],6],[[],6]],"p":[[3,"Receiver"],[15,"u8"],[3,"Sender"],[4,"Result"],[15,"str"],[3,"TypeId"]]},\
"single_simd_task_optimization":{"doc":"Implements the performance optimization that allows a …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"slabmalloc":{"doc":"A slab allocator implementation for objects less than 8KiB.","t":[8,18,18,18,18,18,18,18,18,18,3,3,3,18,18,3,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,11,11,11,11,11,12,10,11,11,11,10,11,10,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocablePage","BASE_ALLOC_SIZES","BUFFER_SIZE","HEAP_ID_OFFSET","HEAP_ID_OFFSET","MAX_ALLOC_SIZE","MAX_BASE_ALLOC_SIZE","MAX_BASE_SIZE_CLASSES","METADATA_SIZE","METADATA_SIZE","MappedPages8k","ObjectPage8k","Rawlink","SIZE","SIZE","ZoneAllocator","allocate","allocate","allocate","bitfield","bitfield","bitfield_mut","bitfield_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_size","buffer_size","clear_metadata","clear_metadata","deallocate","deallocate","deallocate","default","default","default","empty_pages","exchange_pages_within_heap","first_fit","first_fit","fmt","from","from","from","from","get_max_size","heap_id","heap_id","heap_id","heap_id","into","into","into","into","is_empty","is_empty","is_full","is_full","mp","new","new","new","new","next","next","prev","prev","refill","retrieve_empty_page","retrieve_mapped_pages","retrieve_mapped_pages","set_heap_id","set_heap_id","start_address","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["slabmalloc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This trait is used to define a page from which objects are …","The set of sizes the allocator has lists for.","","","","Maximum size that allocated within 2 pages. (8 KiB - …","Maximum size which is allocated with ObjectPages8k (8 KiB).","How many allocators of type SCAllocator we have.","","","A wrapper type around MappedPages which ensures that the …","Holds allocated data within 2 4-KiB pages.","Rawlink is a type like Option but for holding a raw …","The total size (in bytes) of the page.","","A zone allocator for arbitrary sized allocations.","Tries to allocate an object within this page.","Tries to allocate an object within this page.","Allocate a pointer to a block of memory described by <code>layout</code>…","","","","","","","","","","","","","","","","clears the metadata section of the page","Deallocates a memory object within this page.","Deallocates a memory object within this page.","Deallocates a pointer to a block of memory, which was …","","","","The total number of empty pages in this zone allocator","","Tries to find a free block within <code>data</code> that satisfies …","Tries to find a free block within <code>data</code> that satisfies …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return maximum size an object of size <code>current_size</code> can use.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the page has currently no allocations.","Checks if the page has currently no allocations.","Checks if we can still allocate more objects of a given …","Checks if we can still allocate more objects of a given …","The MappedPages this memory area belongs to","","Creates a new 8KiB allocable page and stores the …","Creates a MappedPages8k object from MappedPages that have …","","","","","","Refills the SCAllocator for a given Layout with a …","Returns a MappedPages8k from the SCAllocator with the …","","Returns the MappedPages object that was stored in the …","","","","","","","","","","","","","","",""],"i":[0,3,14,18,14,3,3,3,18,14,0,0,0,18,14,0,18,18,3,18,7,18,7,7,14,9,3,7,14,9,3,18,7,18,7,18,18,3,7,9,3,3,3,18,18,7,7,14,9,3,3,18,7,7,3,7,14,9,3,18,18,18,18,7,18,7,14,3,18,7,18,7,3,3,18,7,18,7,14,7,14,9,3,7,14,9,3,7,14,9,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[[3,1],[[6,[[4,[2]],5]]]],[[]],[7],[[]],[7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[]],[7],[[[4,[2]],1],[[6,[5]]]],[[[4,[2]],1],[[6,[5]]]],[[3,[4,[2]],1],[[6,[5]]]],[[],7],[[],9],[[],3],[3,8],[[3,1],[[6,[5]]]],[1,10],[1,10],[[7,11],12],[[]],[[]],[[]],[[]],[8,[[10,[8]]]],[[],8],[7,8],0,0,[[]],[[]],[[]],[[]],[8,13],[8,13],[[],13],[[],13],0,[[14,8]],[[14,8],7],[15,[[6,[14,5]]]],[8,3],[[],9],[7,9],[[],9],[7,9],[[3,1,14],[[6,[5]]]],[[3,8],[[10,[14]]]],[[],[[10,[14]]]],[7,[[10,[14]]]],[8],[[7,8]],[14,16],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],17],[[],17],[[],17],[[],17]],"p":[[3,"Layout"],[15,"u8"],[3,"ZoneAllocator"],[3,"NonNull"],[15,"str"],[4,"Result"],[3,"ObjectPage8k"],[15,"usize"],[3,"Rawlink"],[4,"Option"],[3,"Formatter"],[6,"Result"],[15,"bool"],[3,"MappedPages8k"],[3,"MappedPages"],[3,"VirtualAddress"],[3,"TypeId"],[8,"AllocablePage"]]},\
"slabmalloc_safe":{"doc":"A slab allocator implementation for objects less than 8KiB.","t":[8,18,18,18,18,18,18,18,18,18,3,3,18,18,3,11,11,11,11,10,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocablePage","BASE_ALLOC_SIZES","BUFFER_SIZE","HEAP_ID_OFFSET","HEAP_ID_OFFSET","MAX_ALLOC_SIZE","MAX_BASE_ALLOC_SIZE","MAX_BASE_SIZE_CLASSES","METADATA_SIZE","METADATA_SIZE","MappedPages8k","ObjectPage8k","SIZE","SIZE","ZoneAllocator","allocate","allocate","allocate","allocate","bitfield","bitfield","bitfield_mut","bitfield_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear_metadata","clear_metadata","deallocate","deallocate","deallocate","deallocate","default","empty_pages","exchange_pages_within_heap","first_fit","first_fit","first_fit","from","from","from","get_max_size","heap_id","into","into","into","is_empty","is_empty","is_empty","is_full","is_full","is_full","new","new","refill","retrieve_empty_page","start_address","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["slabmalloc_safe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This trait is used to define a page from which objects are …","The set of sizes the allocator has lists for.","","","","Maximum size that allocated within 2 pages. (8 KiB - …","Maximum size which is allocated with ObjectPages8k (8 KiB).","How many allocators of type SCAllocator we have.","","","A wrapper type around MappedPages which ensures that the …","Holds allocated data within 2 4-KiB pages.","The total size (in bytes) of the page.","","A zone allocator for arbitrary sized allocations.","Tries to allocate an object within this page.","Tries to allocate an object within this page.","Tries to allocate an object within this page.","Allocate a pointer to a block of memory described by <code>layout</code>…","","","","","","","","","","","","clears the metadata section of the page","Deallocates a memory object within this page.","Deallocates a memory object within this page.","Deallocates a memory object within this page.","Deallocates a pointer to a block of memory, which was …","","The total number of empty pages in this zone allocator","","Tries to find a free block within <code>data</code> that satisfies …","Tries to find a free block within <code>data</code> that satisfies …","Tries to find a free block within <code>data</code> that satisfies …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return maximum size an object of size <code>current_size</code> can use.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the page has currently no allocations.","Checks if the page has currently no allocations.","Checks if the page has currently no allocations.","Checks if we can still allocate more objects of a given …","Checks if we can still allocate more objects of a given …","Checks if we can still allocate more objects of a given …","Creates a MappedPages8k object from MappedPages that have …","","Refills the SCAllocator for a given Layout with a …","Returns a MappedPages8k from the SCAllocator with the …","","","","","","","","","",""],"i":[0,4,12,15,12,4,4,4,15,12,0,0,15,12,0,15,15,3,4,15,3,15,3,3,12,4,3,12,4,15,3,15,15,3,4,4,4,4,15,15,3,3,12,4,4,4,3,12,4,15,15,3,15,15,3,12,4,4,4,12,3,12,4,3,12,4,3,12,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[[3,1],2],[[4,1],[[7,[[5,[2]],6]]]],[[]],[3],[[]],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[[[5,[2]],1],[[7,[6]]]],[[[5,[2]],1],[[7,[6]]]],[[3,[5,[2]],1],[[7,[6]]]],[[4,[5,[2]],1],[[7,[6]]]],[[],4],[4,8],[[4,1],[[7,[6]]]],[1,9],[1,9],[[3,1],9],[[]],[[]],[[]],[8,[[9,[8]]]],0,[[]],[[]],[[]],[8,10],[8,10],[[3,8],10],[[],10],[[],10],[3,10],[11,[[7,[12,6]]]],[8,4],[[4,1,12],[[7,[6]]]],[[4,8],[[9,[12]]]],[12,13],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],14],[[],14],[[],14]],"p":[[3,"Layout"],[15,"u8"],[3,"ObjectPage8k"],[3,"ZoneAllocator"],[3,"NonNull"],[15,"str"],[4,"Result"],[15,"usize"],[4,"Option"],[15,"bool"],[3,"MappedPages"],[3,"MappedPages8k"],[3,"VirtualAddress"],[3,"TypeId"],[8,"AllocablePage"]]},\
"slabmalloc_unsafe":{"doc":"A slab allocator implementation for objects less than 8KiB.","t":[8,18,18,18,18,18,18,3,3,18,3,11,11,11,10,11,10,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11],"n":["AllocablePage","BASE_ALLOC_SIZES","HEAP_ID_OFFSET","MAX_ALLOC_SIZE","MAX_BASE_ALLOC_SIZE","MAX_BASE_SIZE_CLASSES","METADATA_SIZE","ObjectPage8k","Rawlink","SIZE","ZoneAllocator","allocate","allocate","allocate","bitfield","bitfield","bitfield_mut","bitfield_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer_size","buffer_size","clear_metadata","clear_metadata","deallocate","deallocate","deallocate","default","default","default","empty_pages","exchange_pages_within_heap","first_fit","first_fit","fmt","from","from","from","get_max_size","heap_id","heap_id","heap_id","heap_id","into","into","into","is_empty","is_empty","is_full","is_full","new","next","next","prev","prev","refill","retrieve_empty_page","set_heap_id","set_heap_id","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["slabmalloc_unsafe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This trait is used to define a page from which objects are …","The set of sizes the allocator has lists for.","","Maximum size that allocated within 2 pages. (8 KiB - …","Maximum size which is allocated with ObjectPages8k (8 KiB).","How many allocators of type SCAllocator we have.","","Holds allocated data within 2 4-KiB pages.","Rawlink is a type like Option but for holding a raw …","The total size (in bytes) of the page.","A zone allocator for arbitrary sized allocations.","Tries to allocate an object within this page.","Tries to allocate an object within this page.","Allocate a pointer to a block of memory described by <code>layout</code>…","","","","","","","","","","","","","","clears the metadata section of the page","Deallocates a memory object within this page.","Deallocates a memory object within this page.","Deallocates a pointer to a block of memory, which was …","","","","The total number of empty pages in this zone allocator","","Tries to find a free block within <code>data</code> that satisfies …","Tries to find a free block within <code>data</code> that satisfies …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return maximum size an object of size <code>current_size</code> can use.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the page has currently no allocations.","Checks if the page has currently no allocations.","Checks if we can still allocate more objects of a given …","Checks if we can still allocate more objects of a given …","","","","","","Refills the SCAllocator for a given Layout with an object …","Returns an ObjectPage from the SCAllocator with the …","","","","","","","","","","",""],"i":[0,3,15,3,3,3,15,0,0,15,0,15,15,3,15,7,15,7,7,9,3,7,9,3,15,7,15,7,15,15,3,7,9,3,3,3,15,15,7,7,9,3,3,15,7,7,3,7,9,3,15,15,15,15,3,15,7,15,7,3,3,15,7,7,9,3,7,9,3,7,9,3],"f":[0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[[3,1],[[6,[[4,[2]],5]]]],[[]],[7],[[]],[7],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[]],[7],[[[4,[2]],1],[[6,[5]]]],[[[4,[2]],1],[[6,[5]]]],[[3,[4,[2]],1],[[6,[5]]]],[[],7],[[],9],[[],3],[3,8],[[3,1],[[6,[5]]]],[1,10],[1,10],[[7,11],12],[[]],[[]],[[]],[8,[[10,[8]]]],[[],8],[7,8],0,0,[[]],[[]],[[]],[8,13],[8,13],[[],13],[[],13],[8,3],[[],9],[7,9],[[],9],[7,9],[[3,1,7],[[6,[5]]]],[[3,8],[[10,[7]]]],[8],[[7,8]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14]],"p":[[3,"Layout"],[15,"u8"],[3,"ZoneAllocator"],[3,"NonNull"],[15,"str"],[4,"Result"],[3,"ObjectPage8k"],[15,"usize"],[3,"Rawlink"],[4,"Option"],[3,"Formatter"],[6,"Result"],[15,"bool"],[3,"TypeId"],[8,"AllocablePage"]]},\
"sleep":{"doc":"Provides APIs for tasks to sleep for specified time …","t":[5,5,5,5,5,5],"n":["get_current_time_in_ticks","increment_tick_count","sleep","sleep_periodic","sleep_until","unblock_sleeping_tasks"],"q":["sleep","","","","",""],"d":["Returns the current time in ticks","Update the current tick count Used as a callback in the …","Blocks the current task by putting it to sleep for <code>duration</code>…","Blocks the current task for a fixed time <code>period</code>, which …","Blocks the current task by putting it to sleep until a …","Remove all tasks that have been delayed but are able to be …"],"i":[0,0,0,0,0,0],"f":[[[],1],[[]],[1],[[2,1]],[1],[[]]],"p":[[15,"usize"],[3,"AtomicUsize"]]},\
"smoltcp_helper":{"doc":"Collection of functions to set up a TCP connection using a …","t":[17,5,5,14,5,5],"n":["STARTING_FREE_PORT","connect","get_default_iface","hpet_ticks","millis_since","poll_iface"],"q":["smoltcp_helper","","","","",""],"d":["The starting number for freely-available (non-reserved) …","A convenience function for connecting a socket. If the …","Returns the first network interface available in the …","A simple macro to get the current HPET clock ticks.","Function to calculate the currently elapsed time (in …","A convenience function to poll the given network interface …"],"i":[0,0,0,0,0,0],"f":[0,[[1,2,3,4,5,6],[[8,[7]]]],[[],[[8,[1,7]]]],0,[6,[[8,[6,7]]]],[[1,2,6],[[8,[9,7]]]]],"p":[[6,"NetworkInterfaceRef"],[3,"Set"],[3,"Handle"],[3,"Endpoint"],[15,"u16"],[15,"u64"],[15,"str"],[4,"Result"],[15,"bool"]]},\
"spawn":{"doc":"This crate offers routines for spawning new tasks and …","t":[3,3,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11],"n":["BootstrapTaskRef","TaskBuilder","argument","block","borrow","borrow","borrow_mut","borrow_mut","cleanup_bootstrap_tasks","create_idle_task","deref","drop","finish","fmt","from","from","idle","init","into","into","name","new_application_task_builder","new_task_builder","pin_on_core","spawn","spawn_restartable","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["spawn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A wrapper around a <code>TaskRef</code> for bootstrapped tasks, which …","A struct that offers a builder pattern to create and …","Set the argument that will be passed to the new Task’s …","Set the new Task’s <code>RunState</code> to be <code>Blocked</code> instead of …","","","","","Spawns a dedicated task to cleanup all bootstrap tasks by …","Spawns an idle task on the current CPU and adds it to this …","","","This function represents the final step of each CPU’s …","","Returns the argument unchanged.","Returns the argument unchanged.","Sets this new Task to be the idle task for the given core. ","Initializes tasking for the given AP core, including …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the String name for the new Task.","Creates a builder for a new application <code>Task</code>. ","Creates a builder for a new <code>Task</code> that starts at the given …","Pin the new Task to a specific core.","Finishes this <code>TaskBuilder</code> and spawns the new task as …","Like <code>TaskBuilder::spawn()</code>, this finishes this <code>TaskBuilder</code> …","","","","","",""],"i":[0,0,1,1,1,6,1,6,0,0,6,6,6,6,1,6,1,0,1,6,1,0,0,1,1,1,1,6,1,6,1,6],"f":[0,0,[1,1],[1,1],[[]],[[]],[[]],[[]],[2,[[4,[3]]]],[[],[[4,[5,3]]]],[6,7],[6],[6],[[6,8],9],[[]],[[]],[[1,10],1],[[11,10,12],[[4,[6,3]]]],[[]],[[]],[[1,13],1],[[14,[17,[[16,[15]]]]],[[4,[[1,[[18,[13]],19]],3]]]],[[],1],[[1,10],1],[1,[[4,[5,3]]]],[[1,17],[[4,[5,3]]]],[[],4],[[],4],[[],4],[[],4],[[],20],[[],20]],"p":[[3,"TaskBuilder"],[15,"usize"],[15,"str"],[4,"Result"],[3,"JoinableTaskRef"],[3,"BootstrapTaskRef"],[3,"TaskRef"],[3,"Formatter"],[6,"Result"],[15,"u8"],[6,"MmiRef"],[3,"Stack"],[3,"String"],[3,"Path"],[3,"CrateNamespace"],[3,"Arc"],[4,"Option"],[3,"Vec"],[15,"isize"],[3,"TypeId"]]},\
"stack":{"doc":"Provides the <code>Stack</code> type that represents a Task’s stack  …","t":[3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Stack","alloc_stack","borrow","borrow_mut","bottom","deref","deref_mut","fmt","from","from_pages","guard_page","into","top_unusable","top_usable","try_from","try_into","type_id"],"q":["stack","","","","","","","","","","","","","","","",""],"d":["A range of mapped memory designated for use as a task’s …","Allocates a new stack and maps it to the active page …","","","Returns the bottom of this stack, its lowest usable …","","","","Returns the argument unchanged.","Creates a stack from its constituent parts:  a guard page …","Returns the guard page(s) for this stack. ","Calls <code>U::from(self)</code>.","Returns the address just beyond the top of this stack,  …","Returns the highest usable address of this Stack,  which …","","",""],"i":[0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,[[1,2],[[4,[3]]]],[[]],[[]],[3,5],[3,6],[3,6],[[3,7],8],[[]],[[9,6],[[10,[3]]]],[3,11],[[]],[3,5],[3,5],[[],10],[[],10],[[],12]],"p":[[15,"usize"],[3,"Mapper"],[3,"Stack"],[4,"Option"],[3,"VirtualAddress"],[3,"MappedPages"],[3,"Formatter"],[6,"Result"],[3,"AllocatedPages"],[4,"Result"],[3,"PageRange"],[3,"TypeId"]]},\
"stack_trace":{"doc":"Stack trace (backtrace) functionality using DWARF …","t":[3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11],"n":["CrateNamespace","StrongSectionRef","add_symbols","borrow","borrow_mut","clone_on_write","crate_names","dir","dump_symbol_map","dump_symbol_map_recursive","find_symbols_starting_with","find_symbols_starting_with_and_namespace","for_each_crate","from","get_crate","get_crate_and_namespace","get_crate_containing_address","get_crate_object_file_starting_with","get_crate_object_files_starting_with","get_crate_starting_with","get_crates_starting_with","get_my_current_task","get_section_containing_address","get_symbol","get_symbol_and_namespace","get_symbol_or_load","get_symbol_starting_with","get_tls_initializer_data","into","load_crate","load_crate_as_application","load_crates","method_get_crate_object_file_starting_with","method_get_crate_object_files_starting_with","name","new","recursive_namespace","rewrite_section_dependents","stack_trace","try_from","try_into","type_id"],"q":["stack_trace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This struct represents a namespace of crates and their “…","A Strong reference (<code>Arc</code>) to a <code>LoadedSection</code>.","Adds only <em>global</em> symbols in the given <code>sections</code> iterator to …","","","Duplicates this <code>CrateNamespace</code> into a new <code>CrateNamespace</code>,  …","Returns a list of all of the crate names currently loaded …","Returns the directory that this <code>CrateNamespace</code> is based on.","Simple debugging function that returns the entire symbol …","Same as <code>dump_symbol_map()</code>,  but includes symbols from …","Returns a copied list of the corresponding <code>LoadedSection</code>s  …","Similar to <code>find_symbols_starting_with</code>, but also includes a …","Iterates over all crates in this namespace and calls the …","Returns the argument unchanged.","Acquires the lock on this <code>CrateNamespace</code>’s crate list …","Acquires the lock on this <code>CrateNamespace</code>’s crate list …","Finds the crate that contains the given <code>VirtualAddress</code> in …","Like <code>get_crate_starting_with()</code>, but for crate <em>object file</em>s …","Like <code>get_crates_starting_with()</code>, but for crate <em>object file</em>…","Finds the <code>LoadedCrate</code> whose name starts with the given …","Finds the <code>LoadedCrate</code>s whose names start with the given …","Returns a reference to the current task.","Finds the section that contains the given <code>VirtualAddress</code> …","Finds the corresponding <code>LoadedSection</code> reference for the …","Like <code>get_symbol()</code>, but also returns the exact …","Finds the corresponding <code>LoadedSection</code> reference for the …","Returns a weak reference to the <code>LoadedSection</code> whose name …","Returns a new copy of this namespace’s initial TLS area, …","Calls <code>U::from(self)</code>.","Loads the specified crate into memory, allowing it to be …","Loads the specified application crate into this …","This function first loads all of the given crates’ …","Same as <code>get_crate_object_file_starting_with()</code>, but is a …","Same as <code>get_crate_object_files_starting_with()</code>, but is a …","Returns the name of this <code>CrateNamespace</code>, which is just …","Creates a new <code>CrateNamespace</code> that is completely empty (no …","Returns the recursive namespace that this <code>CrateNamespace</code> …","Finds all of the weak dependents (sections that depend on …","Get a stack trace using the default stack tracer based on …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],"f":[0,0,[[1,2],3],[[]],[[]],[1,1],[[1,2],[[6,[4,5]]]],[1,7],[1,8],[1,8],[[1,9],[[6,[5]]]],[[1,9],[[6,[5]]]],[[1,2]],[[]],[[1,9],[[12,[[11,[10]]]]]],[[13,9],12],[[1,14,2],[[12,[[11,[10]]]]]],[[13,9],12],[[13,9],[[6,[5]]]],[[13,9],12],[[13,9],[[6,[5]]]],[[],[[12,[15]]]],[[1,14,2],12],[[1,9],[[17,[16]]]],[[1,9],12],[[1,9,[12,[1]],13,2],[[17,[16]]]],[[1,9],[[17,[16]]]],[1,18],[[]],[[1,13,[12,[1]],13,2],[[19,[9]]]],[[13,13,13,2],[[19,[20,9]]]],[[1,[12,[1]],13,2],[[19,[9]]]],[[1,9],12],[[1,9],[[6,[5]]]],[1,9],[[8,7,[12,[[13,[1]]]]],1],[1,[[12,[13]]]],[[13,13,13],[[19,[9]]]],[[21,[12,[3]]],[[19,[9]]]],[[],19],[[],19],[[],22]],"p":[[3,"CrateNamespace"],[15,"bool"],[15,"usize"],[3,"StrRef"],[3,"Global"],[3,"Vec"],[3,"NamespaceDir"],[3,"String"],[15,"str"],[3,"LoadedCrate"],[3,"CowArc"],[4,"Option"],[3,"Arc"],[3,"VirtualAddress"],[3,"TaskRef"],[3,"LoadedSection"],[3,"Weak"],[3,"TlsDataImage"],[4,"Result"],[3,"AppCrateRef"],[8,"FnMut"],[3,"TypeId"]]},\
"stack_trace_frame_pointers":{"doc":"Stack trace (backtrace) functionality using frame pointers.","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"state_store":{"doc":"","t":[3,11,11,11,11,5,5,5,11,11,11,11],"n":["SSCached","borrow","borrow_mut","from","get","get_state","init","insert_state","into","try_from","try_into","type_id"],"q":["state_store","","","","","","","","","","",""],"d":["A thread-safe cached reference to a system-wide state. …","","","Returns the argument unchanged.","Tries to upgrade the internal Weak pointer to a Strong …","Returns a Weak reference to the SystemState of the …","","Inserts a new SystemState-implementing type into the map. ","Calls <code>U::from(self)</code>.","","",""],"i":[0,2,2,2,2,0,0,0,2,2,2,2],"f":[0,[[]],[[]],[[]],[[[2,[1]]],[[4,[[3,[1]]]]]],[[],[[2,[1]]]],[[]],[1,[[4,[1]]]],[[]],[[],5],[[],5],[[],6]],"p":[[8,"Any"],[3,"SSCached"],[3,"Arc"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"state_transfer":{"doc":"","t":[5],"n":["prio_sched"],"q":["state_transfer"],"d":["This function is used for live evolution from a round …"],"i":[0],"f":[[[1,2],[[4,[3]]]]],"p":[[3,"Arc"],[3,"CrateNamespace"],[15,"str"],[4,"Result"]]},\
"stdio":{"doc":"This crate creates the abstraction of <code>stdio</code>. They are …","t":[3,3,3,3,3,6,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["KeyEventQueue","KeyEventQueueReader","KeyEventQueueWriter","KeyEventReadGuard","RingBufferEof","RingBufferEofRef","Stdio","StdioReadGuard","StdioReader","StdioWriteGuard","StdioWriter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","drop","flush","from","from","from","from","from","from","from","from","from","from","get_reader","get_reader","get_reader_with_buf_capacity","get_writer","get_writer","into","into","into","into","into","into","into","into","into","into","is_eof","lock","lock","new","new","new","read","read_line","read_one","remaining_bytes","set_eof","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_read","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write_one"],"q":["stdio","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A reader to keyevent ring buffer.","A writer to keyevent ring buffer.","A structure that allows applications to access keyboard …","A ring buffer with an EOF mark.","A reference to a ring buffer with an EOF mark with mutex …","A ring buffer containing bytes. It forms <code>stdin</code>, <code>stdout</code> and …","<code>StdioReadGuard</code> acts like <code>MutexGuard</code>, it locks the …","A reader to stdio buffers.","<code>StdioReadGuard</code> acts like <code>MutexGuard</code>, it locks the …","A writer to stdio buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reader of <code>KeyEventQueue</code> back to the previous …","The function required by <code>Write</code> trait. Currently it …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a reader to the stdio buffer. Note that each reader …","Get a reader to the ring buffer.","Get a reader to the stdio buffer with a customized buffer …","Get a writer to the stdio buffer.","Get a writer to the ring buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the EOF flag of the queue has been set.","Lock the reader and return a guard that can perform …","Lock the writer and return a guard that can perform …","Create a new stdio buffer.","Create a new ring buffer storing <code>KeyEvent</code>.","Create a new <code>KeyEventReadGuard</code>. This function <em>takes</em> a …","Read from the ring buffer. Returns the number of bytes …","Read a line from the ring buffer and return. Remaining …","Try to read a keyevent from the ring buffer. It returns …","Returns the number of bytes still in the read buffer.","Set the EOF flag of the queue to true.","","","","","","","","","","","","","","","","","","","","","","","","","Same as <code>read()</code>, but is non-blocking.","","","","","","","","","","","Write to the ring buffer, returniong the number of bytes …","Push a keyevent into the ring buffer."],"i":[0,0,0,0,0,0,0,0,0,0,0,20,9,12,6,10,5,1,2,3,4,20,9,12,6,10,5,1,2,3,4,1,2,3,4,1,2,3,4,5,5,6,20,9,12,6,10,5,1,2,3,4,9,10,9,9,10,20,9,12,6,10,5,1,2,3,4,12,1,2,9,10,5,12,1,3,12,6,1,2,3,4,20,9,12,6,10,5,1,2,3,4,20,9,12,6,10,5,1,2,3,4,12,20,9,12,6,10,5,1,2,3,4,6,4],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[5],[5],[6,[[8,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,1],[10,3],[[9,11],1],[9,2],[10,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,13],[1,12],[2,6],[[],9],[[],10],[[3,[15,[14]]],5],[12,[[8,[11,7]]]],[[1,16],[[8,[11,7]]]],[3,[[18,[17]]]],[12,11],[6],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[12,[[8,[11,7]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[6,[[8,[11,7]]]],[[4,17]]],"p":[[3,"StdioReader"],[3,"StdioWriter"],[3,"KeyEventQueueReader"],[3,"KeyEventQueueWriter"],[3,"KeyEventReadGuard"],[3,"StdioWriteGuard"],[3,"Error"],[4,"Result"],[3,"Stdio"],[3,"KeyEventQueue"],[15,"usize"],[3,"StdioReadGuard"],[15,"bool"],[8,"Fn"],[3,"Box"],[3,"String"],[3,"KeyEvent"],[4,"Option"],[3,"TypeId"],[3,"RingBufferEof"]]},\
"storage_device":{"doc":"Trait definitions for storage devices and storage …","t":[8,6,8,6,10,11,11,11,11,11,10],"n":["StorageController","StorageControllerRef","StorageDevice","StorageDeviceRef","devices","downcast","downcast_mut","downcast_rc","downcast_ref","is","size_in_blocks"],"q":["storage_device","","","","","","","","","",""],"d":["A trait that represents a storage controller, such as an …","A trait object wrapped in an Arc and Mutex that allows  …","A trait that represents a storage device, such as hard …","A trait object wrapped in an Arc and Mutex that allows  …","Returns an iterator of references to all <code>StorageDevice</code>s …","Returns a boxed object from a boxed trait object if the …","Returns a mutable reference to the object within the trait …","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …","Returns a reference to the object within the trait object …","Returns true if the trait object wraps an object of type …","Returns the total size of this device, given in number of …"],"i":[0,0,0,0,9,3,3,3,3,3,3],"f":[0,0,0,0,[[],[[2,[1]]]],[[[2,[3]]],[[4,[[2,[3]],[2,[3]]]]]],[3,5],[[[6,[3]]],[[4,[[6,[3]],[6,[3]]]]]],[3,5],[3,7],[[],8]],"p":[[8,"Iterator"],[3,"Box"],[8,"StorageDevice"],[4,"Result"],[4,"Option"],[3,"Rc"],[15,"bool"],[15,"usize"],[8,"StorageController"]]},\
"storage_manager":{"doc":"Manages and handles initialization of all storage devices …","t":[8,6,8,6,10,11,11,11,11,5,11,10,5,5],"n":["StorageController","StorageControllerRef","StorageDevice","StorageDeviceRef","devices","downcast","downcast_mut","downcast_rc","downcast_ref","init_device","is","size_in_blocks","storage_controllers","storage_devices"],"q":["storage_manager","","","","","","","","","","","","",""],"d":["A trait that represents a storage controller, such as an …","A trait object wrapped in an Arc and Mutex that allows  …","A trait that represents a storage device, such as hard …","A trait object wrapped in an Arc and Mutex that allows  …","Returns an iterator of references to all <code>StorageDevice</code>s …","Returns a boxed object from a boxed trait object if the …","Returns a mutable reference to the object within the trait …","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …","Returns a reference to the object within the trait object …","Attempts to handle the initialization of the given …","Returns true if the trait object wraps an object of type …","Returns the total size of this device, given in number of …","Returns an iterator over all initialized storage …","Returns an iterator over all storage devices attached to …"],"i":[0,0,0,0,13,4,4,4,4,0,4,4,0,0],"f":[0,0,0,0,[[],[[3,[1,2]]]],[[[3,[4,2]]],[[5,[[3,[2]],[3,[4,2]]]]]],[4,6],[[[7,[4]]],[[5,[7,[7,[4]]]]]],[4,6],[8,[[5,[[6,[9]],10]]]],[4,11],[[],12],[[],1],[[],1]],"p":[[8,"Iterator"],[3,"Global"],[3,"Box"],[8,"StorageDevice"],[4,"Result"],[4,"Option"],[3,"Rc"],[3,"PciDevice"],[6,"StorageControllerRef"],[15,"str"],[15,"bool"],[15,"usize"],[8,"StorageController"]]},\
"task":{"doc":"This crate contains the <code>Task</code> structure for supporting …","t":[13,13,13,4,13,6,13,3,6,4,13,13,3,13,13,3,4,13,7,3,3,3,12,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,5,11,5,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,12,11,12,12,11,11,12,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["Blocked","Completed","Exception","ExitValue","Exited","FailureCleanupFunction","Initing","JoinableTaskRef","KillHandler","KillReason","Killed","Panic","PanicInfoOwned","Reaped","Requested","RestartInfo","RunState","Runnable","TASKLIST","Task","TaskInner","TaskRef","app_crate","argument","block","bootstrap_task","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","default","deref","deref","drop","drop","eq","eq","failure_cleanup_function","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_payload","func","get_env","get_hash","get_hash","get_my_current_task","get_my_current_task_id","get_namespace","get_task","has_exited","hash","hash","id","inner_mut","into","into","into","into","into","into","into","into","into","is_an_idle_task","is_application","is_joinable","is_restartable","is_runnable","is_running","is_userspace","join","kill","kstack","line","mmi","msg","name","namespace","new","new","payload","pinned_core","pinned_core","restart_info","running_on_cpu","runstate","saved_sp","set_env","set_kill_handler","take_exit_value","take_kill_handler","task_switch","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unblock","with_kstack","with_restart_info","0","0","0","0"],"q":["task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","task::ExitValue","","task::KillReason",""],"d":["blocked on something, like I/O or a wait event","The Task ran to completion and returned the enclosed <code>Any</code> …","A non-language-level problem, such as a Page Fault or some …","The list of ways that a Task can exit, including possible …","The <code>Task</code> has exited and can no longer be run, either by …","The signature of a Task’s failure cleanup function.","in the midst of setting up the task","Represents a joinable <code>TaskRef</code>, created by <code>TaskRef::new()</code>. …","The function signature of the callback that will be invoked","The list of possible reasons that a given <code>Task</code> was killed …","The Task did NOT run to completion, and was instead killed.","A Rust-level panic occurred while running this <code>Task</code>.","Just like <code>core::panic::PanicInfo</code>, but with owned String …","This <code>Task</code> had already exited and its <code>ExitValue</code> has been …","The user or another task requested that this <code>Task</code> be …","A struct holding data items needed to restart a <code>Task</code>.","The set of possible runstates that a task can be in, e.g., …","able to be scheduled in, but not necessarily currently …","The list of all Tasks in the system.","A structure that contains contextual information for a …","The parts of a <code>Task</code> that may be modified after its …","A shareable, cloneable reference to a <code>Task</code> that exposes …","For application <code>Task</code>s, this is effectively a reference to …","Stores the argument of the task for restartable tasks","Blocks this <code>Task</code> by setting its runstate to …","Bootstrap a new task from the current thread of execution.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Marks the inner <code>Task</code> as not joinable, meaning that it is …","","","The function that should be run as a last-ditch attempt to …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new <code>PanicInfoOwned</code> object containing only the …","Stores the function of the task for restartable tasks","Gets a reference to this task’s <code>Environment</code>.","","","Returns a reference to the current task.","Returns the current task’s ID.","Returns the namespace in which this <code>Task</code> is loaded/linked …","returns a shared reference to the <code>Task</code> specified by the …","Returns <code>true</code> if this <code>Task</code> has been exited, i.e., if its …","","","The unique identifier of this Task.","Returns a mutable reference to this <code>Task</code>’s inner state. ","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this Task is an idle task, the task that runs by …","Returns <code>true</code> if this is an application <code>Task</code>.  This will …","Returns <code>true</code> if this task is joinable, <code>false</code> if not.","Returns <code>true</code> if this <code>Task</code> was spawned as a restartable …","Returns <code>true</code> if this <code>Task</code> is Runnable, i.e., able to be …","Returns <code>true</code> if this <code>Task</code> is currently running.","Returns <code>true</code> if this is a userspace <code>Task</code>. Currently …","Blocks until this task has exited or has been killed.","Kills this <code>Task</code> (not a clean exit) without allowing it to …","The kernel stack, which all <code>Task</code>s must have in order to …","","Memory management details: page tables, mappings, …","","The simple name of this Task.","This <code>Task</code> is linked into and runs within the context of …","Creates a new Task structure and initializes it to be …","Creates a new <code>TaskRef</code>, a shareable wrapper around the …","","Returns the APIC ID of the CPU this <code>Task</code> is pinned on, or …","Whether or not this task is pinned to a certain core. The …","Stores the restartable information of the task.  …","Returns the APIC ID of the CPU this <code>Task</code> is currently …","Returns the current <code>RunState</code> of this <code>Task</code>.","the saved stack pointer value, used for task switching.","Sets the <code>Environment</code> of this Task.","Registers a kill handler function for the current <code>Task</code>.","Takes ownership of this <code>Task</code>’s exit value and returns it,","Takes ownership of the current <code>Task</code>’s <code>KillHandler</code> …","Switches from the current task (<code>self</code>) to the given <code>next</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unblocks this <code>Task</code> by setting its runstate to …","Exposes read-only access to this <code>Task</code>’s <code>Stack</code> by invoking","Exposes read-only access to this <code>Task</code>’s <code>RestartInfo</code> by …","","","",""],"i":[8,16,15,0,8,0,8,0,0,0,16,15,0,8,15,0,0,8,0,0,0,0,1,32,1,0,32,26,1,10,15,16,8,5,9,32,26,1,10,15,16,8,5,9,8,9,8,9,10,10,5,9,1,5,8,9,1,10,1,1,10,10,15,15,16,8,5,9,32,26,1,10,10,15,16,8,5,9,10,32,1,1,9,0,0,1,0,1,1,9,1,1,32,26,1,10,15,16,8,5,9,1,1,1,1,1,1,1,9,9,26,10,1,10,1,1,1,9,10,1,26,26,1,1,26,1,0,1,0,1,8,9,1,10,15,32,26,1,10,15,16,8,5,9,32,26,1,10,15,16,8,5,9,32,26,1,10,15,16,8,5,9,1,1,1,33,34,35,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[2,3,4],[[7,[5,6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[9,9],[[]],[[]],0,[[],10],[5],[9],[1],[5],[[8,8],11],[[9,9],11],0,0,[[1,12],13],[[1,12],13],[[10,12],13],[[10,12],[[7,[14]]]],[[15,12],13],[[15,12],[[7,[14]]]],[[16,12],13],[[8,12],13],[[5,12],13],[[9,12],13],[[]],[[]],[[]],[17,10],[[]],[[]],[[]],[[]],[[]],[[]],[[[19,[18]]],10],0,[1,[[22,[[21,[20]]]]]],[[],23],[[],23],[[],[[24,[9]]]],[[],[[24,[25]]]],[1,22],[25,[[24,[9]]]],[1,11],[1],[9],0,[1,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,11],[1,11],[1,11],[1,11],[1,11],[1,11],[9,[[7,[6]]]],[[9,15],[[7,[6]]]],0,0,0,0,0,0,[[[24,[3]],27],[[7,[1,6]]]],[1,5],0,[1,[[24,[2]]]],0,0,[1,[[24,[2]]]],[1,8],0,[[1,[22,[[21,[20]]]]]],[28,[[7,[6]]]],[1,[[24,[16]]]],[[],[[24,[28]]]],[[1,9,2,29]],[[]],[[]],[[],30],[[],30],[[],30],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[1],[1],[1],0,0,0,0],"p":[[3,"Task"],[15,"u8"],[3,"Stack"],[6,"MmiRef"],[3,"JoinableTaskRef"],[15,"str"],[4,"Result"],[4,"RunState"],[3,"TaskRef"],[3,"PanicInfoOwned"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"KillReason"],[4,"ExitValue"],[3,"PanicInfo"],[8,"Any"],[3,"Box"],[3,"Environment"],[6,"Mutex"],[3,"Arc"],[15,"u64"],[4,"Option"],[15,"usize"],[3,"TaskInner"],[6,"FailureCleanupFunction"],[6,"KillHandler"],[3,"PreemptionGuard"],[3,"String"],[3,"TypeId"],[3,"RestartInfo"],[13,"Completed"],[13,"Killed"],[13,"Panic"],[13,"Exception"]],"a":{"orphan":[103],"reap":[127],"zombie":[103]}},\
"task_fs":{"doc":"This crate contains the direcotires and files that …","t":[3,3,17,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MmiDir","MmiFile","TASKS_DIRECTORY_NAME","TASKS_DIRECTORY_PATH","TaskDir","TaskFile","TaskFs","as_mapping","as_mapping","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","flush","flush","from","from","from","from","from","get","get","get","get_absolute_path","get_absolute_path","get_absolute_path","get_absolute_path","get_absolute_path","get_name","get_name","get_name","get_name","get_name","get_parent_dir","get_parent_dir","get_parent_dir","get_parent_dir","get_parent_dir","init","insert","insert","insert","into","into","into","into","into","len","len","list","list","list","name","new","new","new","new","read_at","read_at","remove","remove","remove","set_parent_dir","set_parent_dir","set_parent_dir","set_parent_dir","set_parent_dir","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write_at","write_at"],"q":["task_fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Lazily computed directory that contains subfiles and …","Lazily computed file that contains information  about a …","The name of the VFS directory that exposes task info in …","The absolute path of the tasks directory, which is …","A lazily computed directory that holds files and …","Lazily computed file that holds information about this …","The top level directory that includes a …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Initializes the tasks virtual filesystem directory within …","This function adds a newly created fs node (the argument) …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns a string listing all the children in the directory","Returns a string listing all the children in the directory","Returns a string listing all the children in the directory","The name of the directory","Creates a new directory and passes a pointer to the new …","","Creates a new directory and passes a pointer to the new …","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,5,7,10,1,11,5,7,10,1,11,5,1,5,7,10,1,11,5,7,10,11,7,10,1,11,5,7,10,1,11,5,7,10,1,11,5,0,7,10,11,7,10,1,11,5,1,5,7,10,11,10,10,1,11,5,1,5,7,10,11,7,10,1,11,5,7,10,1,11,5,7,10,1,11,5,7,10,1,11,5,1,5],"f":[0,0,0,0,0,0,0,[1,[[4,[2,3]]]],[5,[[4,[2,3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[4,[6]]]],[5,[[4,[6]]]],[[]],[[]],[[]],[[]],[[]],[[7,3],[[9,[8]]]],[[10,3],[[9,[8]]]],[[11,3],[[9,[8]]]],[7,12],[10,12],[1,12],[11,12],[5,12],[7,12],[10,12],[1,12],[11,12],[5,12],[7,[[9,[13]]]],[10,[[9,[13]]]],[1,[[9,[13]]]],[11,[[9,[13]]]],[5,[[9,[13]]]],[[],[[4,[3]]]],[[7,8],[[4,[[9,[8]],3]]]],[[10,8],[[4,[[9,[8]],3]]]],[[11,8],[[4,[[9,[8]],3]]]],[[]],[[]],[[]],[[]],[[]],[1,14],[5,14],[7,[[15,[12]]]],[10,[[15,[12]]]],[11,[[15,[12]]]],0,[[12,13,16],[[4,[10,3]]]],[16,1],[16,11],[16,5],[[1,14],[[4,[14,6]]]],[[5,14],[[4,[14,6]]]],[[7,8],[[9,[8]]]],[[10,8],[[9,[8]]]],[[11,8],[[9,[8]]]],[[7,17]],[[10,17]],[[1,17]],[[11,17]],[[5,17]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],18],[[],18],[[],18],[[],18],[[],18],[[1,14],[[4,[14,6]]]],[[5,14],[[4,[14,6]]]]],"p":[[3,"TaskFile"],[3,"MappedPages"],[15,"str"],[4,"Result"],[3,"MmiFile"],[4,"IoError"],[3,"TaskFs"],[4,"FileOrDir"],[4,"Option"],[3,"TaskDir"],[3,"MmiDir"],[3,"String"],[6,"DirRef"],[15,"usize"],[3,"Vec"],[3,"TaskRef"],[6,"WeakDirRef"],[3,"TypeId"]]},\
"terminal_print":{"doc":"Applications that want to print to their parent terminal …","t":[5,14,5,14,5],"n":["add_child","print","print_to_stdout_args","println","remove_child"],"q":["terminal_print","","","",""],"d":["Adds the (child application’s task ID, parent terminal …","The main printing macro, which simply pushes an output …","Converts the given <code>core::fmt::Arguments</code> to a <code>String</code> and …","Calls <code>print!()</code> with an extra newline (‘\\\\n’) appended …","Removes the (child application’s task ID, parent …"],"i":[0,0,0,0,0],"f":[[[1,[3,[2]]],[[5,[4]]]],0,[6],0,[1,[[5,[4]]]]],"p":[[15,"usize"],[4,"Event"],[3,"DFQueueProducer"],[15,"str"],[4,"Result"],[3,"Arguments"]]},\
"text_display":{"doc":"This crate defines a text displayable. A text displayable …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["TextDisplay","borrow","borrow_mut","display","fmt","from","get_bg_color","get_dimensions","get_index","get_location","get_next_index","get_size","into","new","reset_cache","set_size","set_text","try_from","try_into","type_id"],"q":["text_display","","","","","","","","","","","","","","","","","","",""],"d":["A text displayable profiles the size and color of a block …","","","","","Returns the argument unchanged.","Gets the background color of the text area","Gets the size of a text displayable in number of …","Translate the location of a character to its index in the …","Translate the index of a character in the text to the …","Gets the index of next character to be displayabled. It is …","","Calls <code>U::from(self)</code>.","Creates a new text displayable.","Clear the cache of the text displayable.","","Sets the text of the text displayable","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2,3],[[6,[4,5]]]],[[1,7],8],[[]],[1,9],[1],[[1,10,10],10],[[1,10]],[1,10],[1],[[]],[[10,10,9,9],[[6,[1,5]]]],[1],[[1,10,10]],[[1,5]],[[],6],[[],6],[[],11]],"p":[[3,"TextDisplay"],[3,"Coord"],[3,"Framebuffer"],[3,"Rectangle"],[15,"str"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"Color"],[15,"usize"],[3,"TypeId"]]},\
"text_terminal":{"doc":"A text-mode terminal emulator. ","t":[12,12,12,13,4,3,13,18,18,18,3,13,18,18,13,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,4,4,13,4,13,3,4,18,13,18,13,13,18,18,13,4,18,16,13,13,18,18,18,13,13,18,13,3,13,3,13,13,13,18,13,13,18,18,13,13,4,18,13,13,3,18,4,3,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,13,18,13,13,13,3,18,18,18,3,3,4,4,3,3,4,13,3,13,3,3,13,13,18,8,3,3,13,3,18,13,3,13,13,3,3,13,18,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","0","0","AlternateFont","AnsiStyleCodes","AsciiControlCodes","AtUnit","AutomaticCarriageReturn","BLINK","BRIGHT","BackgroundColor","BackgroundColor","Backspace","BackwardsDelete","Bar","Bell","Black","Blink","BlinkRapid","Blue","Bottom","Bright","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","CarriageReturn","CarriageReturnSendsLineFeed","Character","Circled","Color","Color8Bit","Column","CursorStyle","CursosPositionReport","Cyan","DIM","Default","Delete","DeviceStatusOk","DeviceStatusRequest","Dim","DisplayAction","DisplayControlChars","DisplayError","DoulbeUnderlinedOrNotBright","Down","ESCAPE_DELIM","ESCAPE_PREFIX","ESCAPE_SUFFIX","EmptyBox","Erase","Escape","FilledBox","ForegroundColor","ForegroundColor","FormatFlags","Fraktur","Framed","Green","HIDDEN","Hidden","Hidden","INVERSE","ITALIC","Insert","Insert","InsertMode","InsertMode","Inverse","Italic","Line","LineFeed","LineFeedSendsCarriageReturn","LineIndex","Magenta","ModeSwitch","Multi","No","No","No","None","NotBlink","NotBrightNorDim","NotFramedOrCircled","NotHidden","NotInverse","NotItalicNorFraktur","NotOverlined","NotStrikethrough","NotSuperOrSubscript","NotUnderlined","Overlined","Overwrite","Overwrite","PageBreak","PrimaryFont","RESET_SUFFIX","RGB","Red","Reset","Row","SET_SUFFIX","STRIKETHROUGH","SUFFIX","ScreenPoint","ScreenSize","ScrollAction","ScrollPosition","ScrollbackBuffer","ScrollbackBufferPoint","ShowCursor","Single","StatusReportCommands","Strikethrough","Style","StyleDiff","Subscript","Superscript","Tab","TerminalBackend","TerminalMode","TextTerminal","Top","TtyBackend","UNDERLINE","Underlined","UnderlinedColor","UnderlinedColor","Underscore","Unit","UnitIndex","Up","VerticalTab","Visible","White","Wrap","Yellow","Yes","Yes","Yes","_IdeogramDoubleOverlined","_IdeogramDoubleUnderlined","_IdeogramOverlined","_IdeogramStressMarking","_IdeogramUnderlined","_NotIdeogram","_NotProportionalSpacing","_ProportionalSpacing","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits_that_differ","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_screen","clear_screen","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","complement","contains","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","diff","difference","display","display","displayable_width","drop","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","handle_input","hash","index","index","index","index_mut","index_mut","index_mut","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_all","is_empty","last_column","last_row","move_cursor_by","move_cursor_by","move_cursor_to","move_cursor_to","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","next","not","num_columns","num_rows","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","reset_screen","reset_screen","resize_screen","screen_size","screen_size","screen_size","set","set_insert_mode","set_insert_mode","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","to_escape_code","to_escape_code","to_escape_code","to_escape_code","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","update_screen_size","update_screen_size","write_bytes","write_bytes","0","0","0","0","0","0","0","blue","green","red","num_units","screen_end","screen_start","screen_start","screen_start","screen_start","scrollback_end","scrollback_end","scrollback_start","scrollback_start","scrollback_start","width_difference","0","0","0","0"],"q":["text_terminaltext_terminal::AnsiStyleCodes","","","","text_terminal::Character","","text_terminal::Color","","","","text_terminal::DisplayAction","","","","","","","","","","","","text_terminal::ScrollAction","","text_terminal::ScrollPosition",""],"d":["","","","Sets the font to an alternate font.  There are 10 …","The set of all possible ANSI escape codes for setting text …","The set of ASCII values that are non-printable characters  …","The terminal is scrolled to a specific point, given by the ","(LF/NL) Automatically follow a Line Feed (LF), Vertical …","If set, the unit box where this character is displayed …","If set, this character is displayed in a bright color, …","A wrapper type around <code>Color</code> that is used in …","Set the background color: the color displayed behind the …","(BS) Moves the cursor backwards by one unit/character, but …","(DEL) Backwards-deletes the character before (to the left …","A line before (to the left of) the character box.","(BEL) Plays a terminal bell or beep.","","The text will blink at slower rate, under 150 blinks per …","The text will blink rapidly at a fast rate, over 150 …","","The terminal position is scrolled all the way down.","Bright or bold text.","Gray/grey.","","","","","","True pure white. ","","(CR) Moves the cursor to the beginning of the line, i.e., …","Whether a Carriage Return subsequently issues a Line Feed …","The character stored in each <code>Unit</code> of the terminal screen. ","The text will be displayed with a circle or oval …","The set of colors that can be displayed by a terminal …","8-bit color, as introduced in xterm.","A column index or number of columns in the x-dimension of …","","(CSR) Queries the terminal device for a cursor position …","","If set, this character is displayed using a dim or faint …","The default color, which is generally unspecified and …","Remove the given number of units from the screen starting …","The response to a [<code>DeviceStatusRequest</code>] indicating the …","(DSR) Queries the terminal device for its status. A reply …","Dim or faint text.","A pending action to display content from the terminal’s …","(DECCRM) Display control characters. This is off by …","The Error type returned by the <code>TerminalBackend::display()</code> …","The text will be underlined twice, or, depending on the …","Scroll the screen down by the included number of lines.","","","","An empty box that surrounds the character but does not …","Erases the contents displayed on the screen in the given …","(ESC) The escape character.","A rectangle that covers the entire character box. This is …","A wrapper type around <code>Color</code> that is used in …","Set the foreground color: the color the text will be …","The flags that describe the formatting of a given text …","Sets the font to be a blackletter font, which is a …","The text will be displayed with a rectangular box …","","If set, this character is not displayed at all, only a …","The text will be concealed/invisible and not displayed at …","","If set, this character is displayed with inversed/reversed …","If set, this character is displayed in italics.","Inserts the content from the given range in the scrollback …","Characters will be inserted at the current cursor, …","Whether text characters printed to the terminal will be …","(DECIM) Set insert mode. This is off by default, meaning …","The foreground and background colors will be swapped.  The …","Italicized text.","An entire unbroken line of characters (<code>Unit</code>s) that has …","(LF) Moves the cursor to the next line, i.e., Line feed, …","Whether a Line Feed (newline / new line) subsequently …","An index of a <code>Line</code> in the scrollback buffer.","","The set of “frequently-supported” commands to switch …","","","","","Do nothing, do not scroll the screen.","Disables <code>Blink</code> or <code>BlinkRapid</code>.","Normal font intensity: Disables <code>Bright</code> or <code>Dim</code>.","Disables <code>Framed</code> or <code>Circled</code>.","Disables Hidden``: text is displayed as normal. Sometimes …","Disables <code>Inverse</code>: foreground colors and background colors …","Normal font sytle: Disables <code>Italic</code> or <code>Fraktur</code>.","Disabled <code>Overlined</code>.","Disables <code>Strikethrough</code>: text is not crossed out.","Disables <code>Superscript</code> or <code>Subscript</code>.","Disables <code>Underline</code> or <code>DoubleUnderline</code>.","The text will be overlined: displayed with a line on top …","Replace the contents displayed on the screen starting at …","Characters will be overwritten in place. Sometimes called …","(FF) Inserts a page break (form feed) to move the …","Sets the font to the primary default font.","If this value comes after one of the above command values, …","True 24-bit RGB color, with 8 bits for each of the red, …","","Resets or clears all styles.","A row index or number of rows in the y-dimension of the …","If this value comes after one of the above command values, …","If set, this character is displayed with a strike-through, …","The value that comes after one of the above command values.","A 2D position value that represents a point on the screen, …","The size of a terminal screen, expressed as the number of …","A pending action to scroll the screen up or down by a …","The position (“viewport”) that the terminal is …","The scrollback buffer is stored as a row-major vector of …","A 2D position value that represents a point in the …","Whether the screen cursor is visible.","","","The text will be striked through, i.e., crossed out with a …","The style of text, including formatting and color choice,  …","A representation of the difference between two <code>Style</code>s.","","","(HT) Inserts a horizontal tab.","","The set of options that determine terminal behavior.","A text-based terminal that supports the ANSI, xterm, …","The terminal is scrolled all the way up.","A terminal backend that is simply a character device TTY …","If set, this character is displayed with a single …","Underlined text. ","A wrapper type around <code>Color</code> that is used in …","Sets the underline color.  Without this, the underline …","A line beneath the character box.","A <code>Unit</code> is a single character block displayed in the …","An index of a <code>Unit</code> in a <code>Line</code> in the scrollback buffer.","Scroll the screen up by the included number of lines.","(VT) Inserts a vertical tab.","","More of a light gray/grey. Use <code>BrightWhite</code> for true white.","Whether or not to wrap cursor movement or text display to …","","","","","","","","","","Disables all Ideogram styles.","Disables <code>_ProportionalSpacing</code>.","Proportional spacing, which sets the Teletex character …","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns a bit mask of the bits that differ between <code>self</code> …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the entire terminal screen.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Displays the given range of <code>Unit</code>s in the scrollback buffer …","","Returns the number of columns required to display this …","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","Flushes the entire viewable region of the terminal’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Pulls as many bytes as possible from the given <code>Read</code>er and …","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the index of the final <code>Column</code>, which is …","Returns the index of the final <code>Row</code>, which is <code>num_rows - 1</code>.","Moves the on-screen cursor by the given number of rows and …","","Moves the on-screen cursor to the given position.","","","","","","","","","","","","","","","","","","","Create an empty <code>TextTerminal</code> with no text content.","","","Returns the complement of this set of flags.","The width of the screen viewport in number of columns (x …","The height of the screen viewport in number of rows (y …","","","","","","","","Removes the specified flags in-place.","Fully reset the terminal screen to its initial default …","","Resizes this terminal’s screen to be <code>width</code> columns and …","Returns the screen size of the terminal.","Returns the size of this terminal’s screen.","","Inserts or removes the specified flags depending on the …","TODO: change this to support any arbitrary terminal mode","","Returns the set difference of the two sets of flags.","","","","","","","Disables all flags enabled in the set.","","","","","","","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Resizes the terminal screen. TODO: perform a full reflow …","","A temporary hack to allow direct writing to the backend’…","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[12,13,14,44,0,0,16,50,7,7,0,44,51,51,30,51,11,44,44,11,16,44,11,11,11,11,11,11,11,11,51,0,0,44,0,11,0,0,52,11,7,11,33,52,52,44,0,50,38,44,20,44,44,44,30,33,51,30,0,44,0,44,44,11,7,44,23,7,7,33,22,0,50,44,44,0,51,0,0,11,0,17,21,24,25,20,44,44,44,44,44,44,44,44,44,44,44,33,22,51,44,50,11,11,44,0,50,7,52,0,0,0,0,0,0,0,17,0,44,0,0,44,44,51,0,0,0,16,0,7,44,0,44,30,0,0,20,51,23,11,0,11,21,24,25,44,44,44,44,44,44,44,44,1,2,3,4,5,6,1,2,3,4,5,6,7,7,7,7,7,7,7,7,7,32,51,50,52,39,10,11,12,13,14,15,44,7,16,29,31,17,18,19,1,2,3,4,5,6,30,33,20,21,22,23,24,25,26,32,51,50,52,39,10,11,12,13,14,15,44,7,16,29,31,17,18,19,1,2,3,4,5,6,30,33,20,21,22,23,24,25,26,38,10,11,12,13,14,15,7,16,17,18,19,1,2,3,4,5,6,20,21,22,23,24,25,26,11,12,13,14,15,7,16,17,18,19,1,2,3,4,5,6,20,21,22,23,24,25,26,7,1,2,3,4,5,6,7,7,11,12,13,14,15,7,16,29,17,18,19,1,2,3,4,5,6,30,26,29,31,18,29,31,15,7,38,10,17,20,7,11,12,13,14,15,7,16,17,19,1,2,3,4,5,6,20,21,22,23,24,25,26,7,39,11,12,13,14,15,44,44,7,7,7,7,7,16,29,31,17,17,18,19,1,2,3,4,5,6,30,33,20,21,22,23,24,25,26,32,51,50,52,39,10,11,11,12,12,13,13,14,14,15,44,7,16,29,31,17,18,19,1,2,3,4,5,6,30,33,20,21,22,23,24,25,26,7,7,7,7,39,7,29,31,31,29,31,31,7,7,7,32,51,50,52,39,10,11,12,13,14,15,44,7,16,29,31,17,18,19,1,2,3,4,5,6,30,33,20,21,22,23,24,25,26,32,7,7,19,19,38,10,38,10,11,12,13,14,15,7,16,17,19,1,2,3,4,5,6,20,26,39,10,32,7,19,19,7,1,2,3,4,5,6,7,38,10,39,38,39,10,7,38,10,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,12,13,14,44,11,12,13,14,15,7,16,17,18,19,1,2,3,4,5,6,20,21,22,23,24,25,26,44,17,7,32,51,50,52,39,10,11,12,13,14,15,44,7,16,29,31,17,18,19,1,2,3,4,5,6,30,33,20,21,22,23,24,25,26,32,51,50,52,39,10,11,12,13,14,15,44,7,16,29,31,17,18,19,1,2,3,4,5,6,30,33,20,21,22,23,24,25,26,32,51,50,52,39,10,11,12,13,14,15,44,7,16,29,31,17,18,19,1,2,3,4,5,6,30,33,20,21,22,23,24,25,26,7,38,10,38,10,53,54,55,56,57,58,59,60,60,60,61,62,61,62,63,64,63,64,61,63,64,63,65,66,67,68],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[],7],[[7,7],7],[[7,7]],[[7,7],7],[[7,7]],[7,8],[[7,7],7],[[7,7],7],[[7,7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[10,[9]]]],[11,11],[12,12],[13,13],[14,14],[15,15],[7,7],[16,16],[17,17],[18,18],[19,19],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,7],27],[[1,1],27],[[2,2],27],[[3,3],27],[[4,4],27],[[5,5],27],[[6,6],27],[7,7],[[7,7],28],[[],11],[[],12],[[],13],[[],14],[[],15],[[],7],[[],16],[[],29],[[],17],[[],18],[[],19],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],30],[[],26],[29],[31],[18],[29],[31],[[15,15],32],[[7,7],7],[[33,31,[34,[15]]],[[35,[1]]]],[[[10,[9]],33,31,[34,[15]]],[[35,[1]]]],[17,36],[20],[[],7],[[11,11],28],[[12,12],28],[[13,13],28],[[14,14],28],[[15,15],28],[[7,7],28],[[16,16],28],[[17,17],28],[[19,19],28],[[1,1],28],[[2,2],28],[[3,3],28],[[4,4],28],[[5,5],28],[[6,6],28],[[20,20],28],[[21,21],28],[[22,22],28],[[23,23],28],[[24,24],28],[[25,25],28],[[26,26],28],[[7,37]],[[[39,[38]]],[[41,[40]]]],[[11,42],43],[[12,42],43],[[13,42],43],[[14,42],43],[[15,42],43],[[44,42],43],[[44,42],43],[[7,42],43],[[7,42],43],[[7,42],43],[[7,42],43],[[7,42],43],[[16,42],43],[[29,42],43],[[31,42],43],[[17,42],43],[[17,42],43],[[18,42],43],[[19,42],43],[[1,42],43],[[2,42],43],[[3,42],43],[[4,42],43],[[5,42],43],[[6,42],43],[[30,42],43],[[33,42],43],[[20,42],43],[[21,42],43],[[22,42],43],[[23,42],43],[[24,42],43],[[25,42],43],[[26,42],43],[[]],[[]],[[]],[[]],[[]],[[]],[8,11],[[]],[[]],[11,12],[11,13],[[]],[[]],[11,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,[[34,[7]]]],[8,7],[8,7],[37,7],[[[39,[38]]],[[41,[40]]]],[7],[[29,6]],[[31,5]],[[31,4]],[[29,6]],[[31,5]],[[31,4]],[[7,7]],[[7,7],7],[[7,7],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,28],[7,28],[19,3],[19,2],[[45,45],1],[[[10,[9]],45,45],1],[1,1],[[[10,[9]],1],1],[[11,11],28],[[12,12],28],[[13,13],28],[[14,14],28],[[15,15],28],[[7,7],28],[[16,16],28],[[17,17],28],[[19,19],28],[[1,1],28],[[2,2],28],[[3,3],28],[[4,4],28],[[5,5],28],[[6,6],28],[[20,20],28],[[26,26],28],[[36,36,38],[[39,[38]]]],[[[34,[19]],9],[[10,[9]]]],[32,34],[7,7],0,0,[[7,7],[[34,[27]]]],[[1,1],[[34,[27]]]],[[2,2],[[34,[27]]]],[[3,3],[[34,[27]]]],[[4,4],[[34,[27]]]],[[5,5],[[34,[27]]]],[[6,6],[[34,[27]]]],[[7,7]],[[]],[[[10,[9]]]],[[[39,[38]],36,36]],[[],19],[[[39,[38]]],19],[[[10,[9]]],19],[[7,7,28]],[22],[[[10,[9]],22]],[[7,7],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7],7],[12,[[47,[46]]]],[13,[[47,[46]]]],[14,[[47,[46]]]],[44,[[47,[46]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],48],[[],48],[[7,7]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[7,7],7],[19],[[[10,[9]],19]],[[]],[[[10,[9]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"ScreenPoint"],[3,"Row"],[3,"Column"],[3,"ScrollbackBufferPoint"],[3,"LineIndex"],[3,"UnitIndex"],[3,"FormatFlags"],[15,"u8"],[8,"Write"],[3,"TtyBackend"],[4,"Color"],[3,"ForegroundColor"],[3,"BackgroundColor"],[3,"UnderlinedColor"],[3,"Style"],[4,"ScrollPosition"],[4,"Character"],[3,"Unit"],[3,"ScreenSize"],[4,"ScrollAction"],[4,"Wrap"],[4,"InsertMode"],[4,"ShowCursor"],[4,"CarriageReturnSendsLineFeed"],[4,"LineFeedSendsCarriageReturn"],[3,"TerminalMode"],[4,"Ordering"],[15,"bool"],[3,"Line"],[4,"CursorStyle"],[3,"ScrollbackBuffer"],[3,"StyleDiff"],[4,"DisplayAction"],[4,"Option"],[4,"Result"],[15,"u16"],[8,"IntoIterator"],[8,"TerminalBackend"],[3,"TextTerminal"],[15,"usize"],[6,"Result"],[3,"Formatter"],[6,"Result"],[4,"AnsiStyleCodes"],[15,"i32"],[15,"str"],[4,"Cow"],[3,"String"],[3,"TypeId"],[3,"ModeSwitch"],[3,"AsciiControlCodes"],[3,"StatusReportCommands"],[13,"AlternateFont"],[13,"ForegroundColor"],[13,"BackgroundColor"],[13,"UnderlinedColor"],[13,"Single"],[13,"Multi"],[13,"Color8Bit"],[13,"RGB"],[13,"Delete"],[13,"Erase"],[13,"Overwrite"],[13,"Insert"],[13,"Up"],[13,"Down"],[13,"AtUnit"],[13,"Bottom"]]},\
"theseus_features":{"doc":"This crate exists solely to hold a centralized list of …","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"thread_local_macro":{"doc":"Provides a <code>thread_local!()</code> macro, a helper to instantiate …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11],"n":["AccessError","LocalKey","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","fmt","from","from","into","into","thread_local","to_owned","to_string","try_from","try_from","try_into","try_into","try_with","type_id","type_id","with"],"q":["thread_local_macro","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An error returned by <code>LocalKey::try_with</code>.","A thread-local storage key which owns its contents.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Declare a new thread local storage key of type <code>LocalKey</code>.","","","","","","","Acquires a reference to the value in this TLS key.","","","Acquires a reference to the value in this TLS key."],"i":[0,0,3,1,3,1,1,1,1,3,1,1,3,1,3,1,0,1,1,3,1,3,1,3,3,1,3],"f":[0,0,[[]],[[]],[[]],[[]],[1,1],[[]],[[1,1],2],[[3,4],5],[[1,4],5],[[1,4],5],[[]],[[]],[[]],[[]],0,[[]],[[],6],[[],7],[[],7],[[],7],[[],7],[3,[[7,[1]]]],[[],8],[[],8],[3]],"p":[[3,"AccessError"],[15,"bool"],[3,"LocalKey"],[3,"Formatter"],[6,"Result"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"tlb_shootdown":{"doc":"Support for broadcasting and handling TLB shootdown IPIs. ","t":[7,7,7,5,5,5],"n":["TLB_SHOOTDOWN_IPI_COUNT","TLB_SHOOTDOWN_IPI_LOCK","TLB_SHOOTDOWN_IPI_PAGES","handle_tlb_shootdown_ipi","init","send_tlb_shootdown_ipi"],"q":["tlb_shootdown","","","","",""],"d":["The number of remaining cores that still need to handle …","The lock that makes sure only one set of TLB shootdown …","The range of pages for a TLB shootdown IPI.","Handles a TLB shootdown ipi by flushing the <code>VirtualAddress</code>…","Initializes data, functions, and structures for the TLB …","Sends an IPI to all other cores (except me) to trigger  a …"],"i":[0,0,0,0,0,0],"f":[0,0,0,[1],[[]],[[2,1]]],"p":[[3,"PageRange"],[3,"LocalApic"]]},\
"tsc":{"doc":"","t":[3,11,11,11,11,11,5,11,11,11,11,11,5,11],"n":["TscTicks","add","borrow","borrow_mut","fmt","from","get_tsc_frequency","into","sub","to_ns","try_from","try_into","tsc_ticks","type_id"],"q":["tsc","","","","","","","","","","","","",""],"d":["","Checked addition. Computes <code>self + other</code>,  returning <code>None</code> …","","","","Returns the argument unchanged.","Returns the frequency of the TSC for the system,  …","Calls <code>U::from(self)</code>.","Checked subtraction. Computes <code>self - other</code>,  returning <code>None</code>…","Converts ticks to nanoseconds. ","","","Returns the current number of ticks from the TSC, i.e., …",""],"i":[0,1,1,1,1,1,0,1,1,1,1,1,0,1],"f":[0,[[1,1],[[2,[1]]]],[[]],[[]],[[1,3],4],[[]],[[],[[7,[5,6]]]],[[]],[[1,1],[[2,[1]]]],[1,[[2,[5]]]],[[],7],[[],7],[[],1],[[],8]],"p":[[3,"TscTicks"],[4,"Option"],[3,"Formatter"],[6,"Result"],[15,"u128"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"tss":{"doc":"","t":[17,5,5],"n":["DOUBLE_FAULT_IST_INDEX","create_tss","tss_set_rsp0"],"q":["tss","",""],"d":["The index of the double fault stack in a TaskStateSegment …","set up TSS entry for the given AP core.  Returns a …","Sets the current core’s TSS privilege stack 0 (RSP0) …"],"i":[0,0,0],"f":[0,[[1,2,2],3],[2,[[5,[4]]]]],"p":[[15,"u8"],[3,"VirtualAddress"],[6,"Mutex"],[15,"str"],[4,"Result"]]},\
"unwind":{"doc":"Support for unwinding the call stack and cleaning up stack …","t":[25,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FuncWithRegisters","StackFrame","StackFrameIter","UnwindingContext","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_site_address","fmt","fmt","from","from","from","initial_address","into","into","into","into","into_fallible_iter","invoke_with_current_registers","lsda","namespace","next","personality","registers","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["unwind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A single frame in the stack, which contains …","An iterator over the stack frames on the current task’s …","This is the context/state that is used during unwinding …","","","","","","","The <em>call site</em> of this stack frame, i.e., the address of …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The address (starting instruction pointer) of the function …","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","This function saves the current CPU register values onto …","The address of the Language-Specific Data Area (LSDA) that …","Returns a reference to the underlying <code>CrateNamespace</code> that …","","The address of the personality function that corresponds …","Returns the array of register values as they existed …","","","","","","","","",""],"i":[0,0,0,0,6,3,1,6,3,1,1,3,1,6,3,1,1,6,6,3,1,3,0,1,3,3,1,3,6,3,1,6,3,1,6,3,1],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[[3,4],5],[[1,4],5],[[]],[[]],[[]],[1,2],[[]],[6],[[]],[[]],[[]],[[],[[8,[7]]]],[1,[[9,[2]]]],[3,10],[3,[[8,[9]]]],[1,[[9,[2]]]],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11],[[],11]],"p":[[3,"StackFrame"],[15,"u64"],[3,"StackFrameIter"],[3,"Formatter"],[6,"Result"],[3,"UnwindingContext"],[15,"str"],[4,"Result"],[4,"Option"],[3,"Arc"],[3,"TypeId"]]},\
"util":{"doc":"","t":[5,5,5,5],"n":["log2","round_down","round_up","round_up_power_of_two"],"q":["util","","",""],"d":["the log base 2 of an integer value","Rounds the given <code>value</code> down to the nearest <code>multiple</code>.","Rounds the given <code>value</code> up to the nearest <code>multiple</code>.","rounds the given <code>value</code> to the nearest base, which must be …"],"i":[0,0,0,0],"f":[[1,1],[[1,1],1],[[1,1],1],[[1,1],1]],"p":[[15,"usize"]]},\
"vfs_node":{"doc":"This crate contains a very basic, generic concrete …","t":[3,11,11,12,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11],"n":["VFSDirectory","borrow","borrow_mut","children","from","get","get_name","get_parent_dir","insert","into","list","name","new","parent","remove","set_parent_dir","try_from","try_into","type_id"],"q":["vfs_node","","","","","","","","","","","","","","","","","",""],"d":["A struct that represents a node in the VFS ","","","A list of child filesystem nodes","Returns the argument unchanged.","","","Returns a pointer to the parent if it exists","","Calls <code>U::from(self)</code>.","Returns a string listing all the children in the directory","The name of the directory","Creates a new directory and passes a pointer to the new …","A weak reference to the parent directory","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],0,[[]],[[1,2],[[4,[3]]]],[1,5],[1,[[4,[6]]]],[[1,3],[[7,[[4,[3]],2]]]],[[]],[1,[[8,[5]]]],0,[[5,6],[[7,[6,2]]]],0,[[1,3],[[4,[3]]]],[[1,9]],[[],7],[[],7],[[],10]],"p":[[3,"VFSDirectory"],[15,"str"],[4,"FileOrDir"],[4,"Option"],[3,"String"],[6,"DirRef"],[4,"Result"],[3,"Vec"],[6,"WeakDirRef"],[3,"TypeId"]]},\
"vga_buffer":{"doc":"Support for basic printing to a simple 80x25 text-mode VGA …","t":[13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Black","Blue","Brown","Color","ColorCode","Cyan","DarkGray","Green","LightBlue","LightCyan","LightGray","LightGreen","LightRed","Magenta","Pink","Red","ScreenChar","White","Yellow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","from","from","from","into","into","into","new","new","print_raw","println_raw","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["vga_buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,2,3,1,2,3,1,2,3,1,2,3,2,1,2,3,1,2,3,1,2,3,2,3,0,0,1,2,3,1,2,3,1,2,3,1,2,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],[[],2],[[1,4],5],[[2,4],5],[[3,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],2],[[6,2],3],0,0,[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8]],"p":[[4,"Color"],[3,"ColorCode"],[3,"ScreenChar"],[3,"Formatter"],[6,"Result"],[15,"u8"],[4,"Result"],[3,"TypeId"]]},\
"virtual_nic":{"doc":"This crate defines a struct that enables language-level …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["VirtualNic","borrow","borrow_mut","drop","from","get_received_frame","id","into","mac_address","new","poll_receive","send_packet","send_packet_on_queue","try_from","try_into","type_id"],"q":["virtual_nic","","","","","","","","","","","","","","",""],"d":["A structure that contains a set of <code>RxQueue</code>s and <code>TxQueue</code>s …","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Create a new <code>VirtualNIC</code> with the given parameters. For now …","","","Send a packet on the specified queue.","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[0,[[]],[[]],[[[5,[1,2,3,4]]]],[[]],[[[5,[1,2,3,4]]],[[7,[6]]]],[[[5,[1,2,3,4]]],8],[[]],[[[5,[1,2,3,4]]]],[[[10,[[9,[1,2]]]],11,[10,[[12,[3,4]]]],11,13],[[15,[[5,[1,2,3,4]],14]]]],[[[5,[1,2,3,4]]],[[15,[14]]]],[[[5,[1,2,3,4]],16],[[15,[14]]]],[[[5,[1,2,3,4]],11,16],[[15,[14]]]],[[],15],[[],15],[[],17]],"p":[[8,"RxQueueRegisters"],[8,"RxDescriptor"],[8,"TxQueueRegisters"],[8,"TxDescriptor"],[3,"VirtualNic"],[3,"ReceivedFrame"],[4,"Option"],[15,"u8"],[3,"RxQueue"],[3,"Vec"],[15,"usize"],[3,"TxQueue"],[3,"MutexIrqSafe"],[15,"str"],[4,"Result"],[3,"TransmitBuffer"],[3,"TypeId"]]},\
"wait_condition":{"doc":"Simple condition variables that are convenience wrappers …","t":[3,3,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["SatisfiedWaitCondition","WaitCondition","WaitConditionFn","borrow","borrow","borrow_mut","borrow_mut","condition_satisfied","from","from","into","into","new","notify_one","notify_specific","try_from","try_from","try_into","try_into","type_id","type_id","wait"],"q":["wait_condition","","","","","","","","","","","","","","","","","","","","",""],"d":["A type wrapper that guarantees a given condition has been …","A condition variable that allows multiple <code>Task</code>s to wait …","The closure type that can be used within a <code>WaitCondition</code>: …","","","","","This function should be invoked after the wait condition …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>WaitCondition</code> in which <code>Task</code>s can wait for a …","Wake up a random <code>Task</code> that is waiting on this condition.","Wake up a specific <code>Task</code> that is waiting on this condition.","","","","","","","Waits for the condition to be true in a blocking fashion  …"],"i":[0,0,0,2,3,2,3,2,2,3,2,3,2,3,3,2,3,2,3,2,3,2],"f":[0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]]],[[4,[[3,[1]]]]]],[[]],[[]],[[]],[[]],[1,[[2,[1]]]],[[[3,[5]]],6],[[[3,[5]],7],6],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[[2,[1]]],[[8,[10]]]]],"p":[[8,"Fn"],[3,"WaitCondition"],[3,"SatisfiedWaitCondition"],[4,"Option"],[25,"WaitConditionFn"],[15,"bool"],[3,"TaskRef"],[4,"Result"],[3,"TypeId"],[4,"WaitError"]]},\
"wait_queue":{"doc":"","t":[13,13,13,13,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Interrupted","NoCurrentTask","SpuriousWakeup","Timeout","WaitError","WaitGuard","WaitQueue","block_again","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","eq","fmt","from","from","from","into","into","into","new","new","notify_one","notify_specific","task","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wait","wait_until","wait_until_mut","with_capacity"],"q":["wait_queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Errors that may occur while waiting on a …","An object that holds a blocked <code>Task</code>  that will be …","A queue in which multiple <code>Task</code>s can wait for other <code>Task</code>s …","Blocks the task guarded by this waitguard, which is useful …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Blocks the given <code>Task</code> and returns a new <code>WaitGuard</code> object …","Create a new empty WaitQueue.","Wake up one random <code>Task</code> that is waiting on this queue.","Wake up a specific <code>Task</code> that is waiting on this queue.","Returns a reference to the <code>Task</code> being blocked in this …","","","","","","","","","","Puts the current <code>Task</code> to sleep where it blocks on this …","Similar to <code>wait</code>, but this function blocks until the given …","Similar to <code>wait_until</code>, but this function accepts a …","Create a new empty WaitQueue."],"i":[2,2,2,2,0,0,0,1,1,7,2,1,7,2,1,2,2,1,7,2,1,7,2,1,7,7,7,1,1,7,2,1,7,2,1,7,2,7,7,7,7],"f":[0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],[[]],[[]],[1],[[2,2],3],[[2,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[6,1],[[],7],[7,3],[[7,6],3],[1,6],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[7,[[8,[2]]]],[[7,10],[[8,[2]]]],[[7,11],[[8,[2]]]],[12,7]],"p":[[3,"WaitGuard"],[4,"WaitError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"TaskRef"],[3,"WaitQueue"],[4,"Result"],[3,"TypeId"],[8,"Fn"],[8,"FnMut"],[15,"usize"]]},\
"wasi_interpreter":{"doc":"Interpreter for executing WASI-compliant WASM binaries.","t":[3,11,11,11,11,5,11,11,11,11,11,14,11,11,11],"n":["HostExternals","as_any","as_any_mut","borrow","borrow_mut","execute_binary","from","into","into_any","into_any_rc","invoke_index","sig","try_from","try_into","type_id"],"q":["wasi_interpreter","","","","","","","","","","","","","",""],"d":["Theseus and wasmi I/O required to execute WASI system …","","","","","Executes a WASI-compliant WebAssembly binary.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Function used by wasmi to invoke a system call given a …","Macro to efficiently generate wasmi function signature.","","",""],"i":[0,9,9,9,9,0,9,9,9,9,9,0,9,9,9],"f":[0,[[],1],[[],1],[[]],[[]],[[[3,[2]],[3,[4]],[3,[4]]],5],[[]],[[]],[[[7,[6]]],[[7,[1,6]]]],[8,[[8,[1]]]],[[9,10,11],[[15,[[13,[12]],14]]]],0,[[],15],[[],15],[[],16]],"p":[[8,"Any"],[15,"u8"],[3,"Vec"],[3,"String"],[15,"isize"],[3,"Global"],[3,"Box"],[3,"Rc"],[3,"HostExternals"],[15,"usize"],[3,"RuntimeArgs"],[4,"RuntimeValue"],[4,"Option"],[3,"Trap"],[4,"Result"],[3,"TypeId"]]},\
"window":{"doc":"A <code>Window</code> object should be owned by an application. It can …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Window","area","borrow","borrow_mut","drop","framebuffer","framebuffer_mut","from","handle_event","into","is_active","new","render","try_from","try_into","type_id"],"q":["window","","","","","","","","","","","","","","",""],"d":["This struct is the application-facing representation of a …","Returns a <code>Rectangle</code> describing the position and dimensions …","","","","Returns an immutable reference to this window’s virtual …","Returns a mutable reference to this window’s virtual …","Returns the argument unchanged.","Tries to receive an <code>Event</code> that has been sent to this <code>Window</code>…","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this window is the currently active …","Creates a new window to be displayed on screen. ","Renders the area of this <code>Window</code> specified by the given …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,2],[[]],[[]],[1],[1,[[6,[3,[5,[4]]]]]],[1,[[7,[3,[5,[4]]]]]],[[]],[1,[[11,[[9,[8]],10]]]],[[]],[1,12],[[13,14,14,15],[[11,[1,10]]]],[[1,[9,[2]]],[[11,[10]]]],[[],11],[[],11],[[],16]],"p":[[3,"Window"],[3,"Rectangle"],[3,"WindowInner"],[3,"AlphaPixel"],[3,"Framebuffer"],[6,"MutexGuardRef"],[6,"MutexGuardRefMut"],[4,"Event"],[4,"Option"],[15,"str"],[4,"Result"],[15,"bool"],[3,"Coord"],[15,"usize"],[3,"Color"],[3,"TypeId"]]},\
"window_inner":{"doc":"The <code>WindowInner</code> struct is the internal representation of a …","t":[17,17,13,13,3,4,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,12],"n":["DEFAULT_BORDER_SIZE","DEFAULT_TITLE_BAR_HEIGHT","Moving","Stationary","WindowInner","WindowMovingStatus","border_size","borrow","borrow","borrow_mut","borrow_mut","contains","content_area","framebuffer","framebuffer_mut","from","from","get_border_size","get_pixel","get_position","get_size","get_title_bar_height","into","into","moving","new","resize","send_event","set_position","title_bar_height","try_from","try_from","try_into","try_into","type_id","type_id","0"],"q":["window_inner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","window_inner::WindowMovingStatus"],"d":["","","The window is currently in motion.  The enclosed <code>Coord</code> …","The window is not in motion.","The <code>WindowInner</code> struct is the internal system-facing …","Whether a window is moving (being dragged by the mouse).","The width of the border in pixels. By default, there is a …","","","","","Returns <code>true</code> if the given <code>coordinate</code> (relative to the …","Returns the position and dimensions of the Window’s …","Returns an immutable reference to this window’s virtual …","Returns a mutable reference to this window’s virtual …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the size of the Window border in pixels.  There is …","Returns the pixel value at the given <code>coordinate</code>, if the …","Gets the top-left position of the window relative to the …","Gets the size of a window in pixels","Returns the size of the Window title bar in pixels.  There …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether a window is moving or stationary.","Creates a new <code>WindowInner</code> object backed by the given …","Resizes and moves this window to fit the given <code>Rectangle</code> …","Sends the given <code>event</code> to this window.","Sets the top-left position of the window relative to the …","The height of title bar in pixels. By default, there is …","","","","","","",""],"i":[0,0,14,14,0,0,1,14,1,14,1,1,1,1,1,14,1,1,1,1,1,1,14,1,1,1,1,1,1,1,14,1,14,1,14,1,15],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[1,2],3],[1,4],[1,5],[1,5],[[]],[[]],[1,6],[[1,2],[[8,[7]]]],[1,2],[1],[1,6],[[]],[[]],0,[[2,[5,[7]],[10,[9]]],1],[[1,4],[[12,[11]]]],[[1,9],[[12,[9]]]],[[1,2]],0,[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0],"p":[[3,"WindowInner"],[3,"Coord"],[15,"bool"],[3,"Rectangle"],[3,"Framebuffer"],[15,"usize"],[3,"AlphaPixel"],[4,"Option"],[4,"Event"],[3,"Queue"],[15,"str"],[4,"Result"],[3,"TypeId"],[4,"WindowMovingStatus"],[13,"Moving"]]},\
"window_manager":{"doc":"This crate acts as a manager of a list of windows. It …","t":[7,3,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["WINDOW_MANAGER","WindowManager","borrow","borrow_mut","delete_window","final_fb","from","get_screen_size","init","into","is_active","move_active_window","move_floating_border","refresh_active_window","refresh_bottom_windows","refresh_mouse","refresh_top","refresh_windows","set_active","try_from","try_into","type_id"],"q":["window_manager","","","","","","","","","","","","","","","","","","","","",""],"d":["The instance of the default window manager","Window manager structure which maintains a list of windows …","","","delete a window and refresh its region","The final framebuffer which is mapped to the screen (the …","Returns the argument unchanged.","Returns the <code>(width, height)</code> in pixels of the screen itself …","Initialize the window manager. It returns …","Calls <code>U::from(self)</code>.","Returns true if the given <code>window</code> is the currently active …","take active window’s base position and current mouse, …","Move the floating border when a window is moving.","Refresh the part in <code>bounding_box</code> of the active window. …","Refresh the region in <code>bounding_box</code>. Only render the bottom …","Refresh the mouse display","Refresh the region of <code>bounding_box</code> in the top framebuffer","Refresh the part in <code>bounding_box</code> of every window. …","Sets one window as active, push last active (if exists) to …","","",""],"i":[0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[[1,2],[[4,[3]]]],0,[[]],[1],[[],[[4,[3]]]],[[]],[[1,2],5],[1,[[4,[3]]]],[1,[[4,[3]]]],[[1,[7,[6]]],[[4,[3]]]],[[1,[0,[8,9]],5],[[4,[3]]]],[1,[[4,[3]]]],[[1,[0,[8,9]]],[[4,[3]]]],[[1,[0,[8,9]]],[[4,[3]]]],[[1,2,5],[[4,[5,3]]]],[[],4],[[],4],[[],10]],"p":[[3,"WindowManager"],[3,"Arc"],[15,"str"],[4,"Result"],[15,"bool"],[3,"Rectangle"],[4,"Option"],[8,"IntoIterator"],[8,"Clone"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
