window.SIDEBAR_ITEMS = {"enum":[["IoError","Errors that can be returned from I/O operations."]],"fn":[["blocks_from_bytes","Calculates block-wise bounds for an I/O transfer  based on a byte-wise range into a block-wise stream."],["round_down","Rounds the given `value` down to the nearest `multiple`."],["round_up","Rounds the given `value` up to the nearest `multiple`."]],"struct":[["BlockByteTransfer","Describes an operation for performing byte-wise I/O on a block-based I/O stream."],["ByteReaderWrapper","A wrapper struct that implements a byte-wise reader atop a block-based reader."],["ByteReaderWriterWrapper","A wrapper struct that implements a byte-wise reader and writer atop a block-based reader and writer."],["ByteWriterWrapper","A wrapper struct that implements a byte-wise writer atop a block-based reader and writer."],["LockableIo","A struct that holds an IO object wrapped in a [`Lockable`] type `L`,  for the purpose of forwarding various IO-related traits through the lock to the `IO` type."],["Reader","A stateful reader that keeps track of its current offset within the internal stateless [`ByteReader`] I/O stream."],["ReaderWriter","A readable and writable “stateful” I/O stream that keeps track  of its current offset within its internal stateless I/O stream."],["Writer","A stateful writer that keeps track of its current offset within the internal stateless [`ByteWriter`] I/O stream."]],"trait":[["BlockIo","A parent trait used to specify the block size (in bytes) of I/O transfers (read and write operations).  See its use in [`BlockReader`] and [`BlockWriter`]."],["BlockReader","A trait that represents an I/O stream (e.g., an I/O device) that can be read from in blocks. The block size specifies the minimum granularity of each transfer,  as given by the [`BlockIo::block_size()`] function."],["BlockWriter","A trait that represents an I/O stream (e.g., an I/O device) that can be written to in blocks. The block size specifies the minimum granularity of each transfer,  as given by the [`BlockIo::block_size()`] function."],["ByteReader","A trait that represents an I/O stream that can be read from at the granularity of individual bytes, but which does not track the current offset into the stream."],["ByteWriter","A trait that represents an I/O stream that can be written to, but which does not track the current offset into the stream."],["KnownLength","A trait that represents an I/O stream that has a known length, e.g., a disk drive."]]};